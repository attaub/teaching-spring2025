(undo-tree-save-format-version . 1)
"388ad25ffbca2d9499b3d469df208641e1de76c0"
[nil nil nil nil (26513 15667 151010 990000) 0 nil]
([nil nil ((#("\\begin{example}
  Use the properties of logarithms to write the expression as a sum,
  difference, or product of simpler logarithms.
  \\begin{enumerate}
  \\item $\\log_{4}\\sqrt{5x}$
  \\item $\\log_{2} \\left(\\frac{4x}{5y} \\right)$
  \\item $\\log_{4}\\sqrt{5x}$
  \\item $\\ln\\left (\\frac{\\sqrt{5x}}{\\sqrt[3]{4}} \\right)$ %cube root in last part
  % \\item $\\log_{4}\\sqrt{5x}$
  \\end{enumerate}
\\end{example}

\\textbf{Solution:}
\\begin{enumerate}
\\item Using power rule we get
  \\[
  \\log_4 \\sqrt{5x} = \\log_4 (5x)^{1/2} = \\frac{1}{2} \\log_4 (5x)
  \\]
  Since
  \\[
   \\log_4 (5x) =   \\log_4 5 + \\log_4 x 
  \\]
  therefore
  \\[
  \\log_4 \\sqrt{5x} = \\frac{1}{2} \\log_4 5 + \\frac{1}{2} \\log_4 x
\\]

\\item 
  \\[
  \\log_2 \\left( \\frac{4x}{5y} \\right) = \\log_2 (4x) - \\log_2 (5y)
  \\]
  since,
  \\[
  \\log_2 (4x) = \\log_2 4 + \\log_2 x
  \\]
  and 
  \\[
  \\log_2 (5y) = \\log_2 5 + \\log_2 y
  \\]
  therefore:
  \\[
  \\log_2 \\left( \\frac{4x}{5y} \\right)=\\log_2 4 + \\log_2 x - (\\log_2 5 + \\log_2 y)
  \\]
  Since \\(\\log_2 4 = \\log_2 2^{2} = 2 \\log_2 2 = 2\\), the final expression is:
  \\[
  \\log_2 \\left( \\frac{4x}{5y} \\right)=2 - \\log_2 5 + \\log_2 x - \\log_2 y
  \\]
\\item Try yourself!
\\item Try yourself!
\\end{enumerate}



\\begin{example}
  Solve the equation for $x$.
  \\begin{enumerate}
  \\item $\\log_{x} 625 = 4$ 
  \\item $\\log_{4} (x+1) - \\log_{4}(x-1)  = 1$ 
  \\item $\\ln x + \\ln 3x = 5 $
  \\item $e^{x+1} = 18$ 
  \\end{enumerate}
\\end{example}

\\subsection{Applicatons}

\\begin{example}
The census bureau for a large country has reported that the country is becoming more diverse. The projected population (in millions) of a certain minority is modeled by the exponential function
\\[
h(t) = 37.67 \\times (1.023)^t \\quad \\text{where} \\quad 0 \\leq t \\leq 50.
\\]
for the years 2000 to 2050.
Estimate in what year the minority's population will double the 2005 population of 42.21 million. 

\\end{example}

\\textbf{Solution}
We are given the population model:
\\[
h(t) = 37.67 \\times (1.023)^t
\\]
and the population in 2005 is 42.21 million, we can verify this by.
\\[
h(5) = 37.67 \\times (1.023)^{5} \\approx 42.21
\\]
We need to find the year when the population doubles 
\\(
2 \\times 42.21 = 84.42 \\text{ million}.
\\)
Therefore
\\[
84.42 = 37.67 \\times (1.023)^t.
\\]
and  Solve for \\( t \\)
\\[
\\frac{84.42}{37.67} = (1.023)^t,
\\]
\\[
2.24 = (1.023)^t.
\\]

Take the natural logarithm (or any logarithm) of both sides, we get
\\[
\\ln(2.24) = t \\ln(1.023).
\\]

therefore:
\\[
t = \\frac{\\ln(2.24)}{\\ln(1.023)} \\approx 
 0.8047, \\quad \\ln(1.023) \\approx 0.0227,
\\]
we get:
\\[
t \\approx \\frac{0.8047}{0.0227} \\approx 35.44.
\\]

Thus, the population will double in approximately the year 2035.

\\begin{example}
Find the present value of a deposit of \\$40,000 at an interest rate of 4.1\\% compounded continuously for 10 years.
\\end{example}

\\textbf{Solution}
The formula for the present value \\( P \\) when the amount \\( A \\) is compounded continuously is given by:
\\[
A = P e^{rt}
\\]
where \\( r \\) is the interest rate (4.1\\% or 0.041).

We are given \\( A = 40,000 \\), \\( r = 0.041 \\), and  \\( t = 10 \\). 

\\[
40,000 = P e^{0.041 \\times 10}
\\]
\\[
40,000 = P e^{0.41}
\\]

\\[
P = \\frac{40,000}{e^{0.41}}.
\\]

\\[
P \\approx \\frac{40,000}{1.506} \\approx 26,546.01.
\\]
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 14 (face font-lock-function-name-face fontified t) 14 135 (fontified t) 135 141 (face font-lock-keyword-face fontified t) 141 142 (fontified t) 142 151 (face font-lock-function-name-face fontified t) 151 155 (fontified t) 155 160 (face font-lock-keyword-face fontified t) 160 162 (fontified t) 162 166 (face font-lock-keyword-face fontified t) 166 170 (fontified t) 170 175 (face font-lock-keyword-face fontified t) 175 183 (fontified t) 183 188 (face font-lock-keyword-face fontified t) 188 190 (fontified t) 190 194 (face font-lock-keyword-face fontified t) 194 199 (fontified t) 199 204 (face font-lock-keyword-face fontified t) 204 205 (fontified t) 205 210 (face font-lock-keyword-face fontified t) 210 219 (fontified t) 219 225 (face font-lock-keyword-face fontified t) 225 230 (fontified t) 230 235 (face font-lock-keyword-face fontified t) 235 237 (fontified t) 237 241 (face font-lock-keyword-face fontified t) 241 245 (fontified t) 245 250 (face font-lock-keyword-face fontified t) 250 258 (fontified t) 258 263 (face font-lock-keyword-face fontified t) 263 265 (fontified t) 265 268 (face font-lock-keyword-face fontified t) 268 273 (face font-lock-keyword-face fontified t) 273 275 (fontified t) 275 280 (face font-lock-keyword-face fontified t) 280 281 (fontified t) 281 286 (face font-lock-keyword-face fontified t) 286 292 (fontified t) 292 297 (face font-lock-keyword-face fontified t) 297 305 (fontified t) 305 311 (face font-lock-keyword-face fontified t) 311 314 (fontified t) 314 338 (face font-lock-comment-face fontified t) 338 340 (fontified t) 340 368 (face font-lock-comment-face fontified t) 368 370 (fontified t) 370 374 (face font-lock-keyword-face fontified t) 374 375 (fontified t) 375 384 (face font-lock-function-name-face fontified t) 384 386 (fontified t) 386 390 (face font-lock-keyword-face fontified t) 390 391 (fontified t) 391 398 (face font-lock-function-name-face fontified t) 398 401 (fontified t) 401 408 (face font-lock-keyword-face fontified t) 408 409 (fontified t) 409 418 (face (bold) fontified t) 418 420 (fontified t) 420 426 (face font-lock-keyword-face fontified t) 426 427 (fontified t) 427 436 (face font-lock-function-name-face fontified t) 436 438 (fontified t) 438 443 (face font-lock-keyword-face fontified t) 443 470 (fontified t) 470 472 (face font-lock-keyword-face fontified t) 472 475 (fontified t) 475 479 (face font-lock-keyword-face fontified t) 479 482 (fontified t) 482 487 (face font-lock-keyword-face fontified t) 487 494 (fontified t) 494 498 (face font-lock-keyword-face fontified t) 498 514 (fontified t) 514 519 (face font-lock-keyword-face fontified t) 519 526 (fontified t) 526 530 (face font-lock-keyword-face fontified t) 530 540 (fontified t) 540 542 (face font-lock-keyword-face fontified t) 542 553 (fontified t) 553 555 (face font-lock-keyword-face fontified t) 555 559 (fontified t) 559 563 (face font-lock-keyword-face fontified t) 563 575 (fontified t) 575 579 (face font-lock-keyword-face fontified t) 579 586 (fontified t) 586 590 (face font-lock-keyword-face fontified t) 590 598 (fontified t) 598 600 (face font-lock-keyword-face fontified t) 600 615 (fontified t) 615 617 (face font-lock-keyword-face fontified t) 617 620 (fontified t) 620 624 (face font-lock-keyword-face fontified t) 624 627 (fontified t) 627 632 (face font-lock-keyword-face fontified t) 632 639 (fontified t) 639 644 (face font-lock-keyword-face fontified t) 644 651 (fontified t) 651 655 (face font-lock-keyword-face fontified t) 655 662 (fontified t) 662 667 (face font-lock-keyword-face fontified t) 667 674 (fontified t) 674 678 (face font-lock-keyword-face fontified t) 678 683 (fontified t) 683 685 (face font-lock-keyword-face fontified t) 685 687 (fontified t) 687 692 (face font-lock-keyword-face fontified t) 692 696 (fontified t) 696 698 (face font-lock-keyword-face fontified t) 698 701 (fontified t) 701 705 (face font-lock-keyword-face fontified t) 705 708 (fontified t) 708 713 (face font-lock-keyword-face fontified t) 713 715 (fontified t) 715 720 (face font-lock-keyword-face fontified t) 720 729 (fontified t) 729 735 (face font-lock-keyword-face fontified t) 735 739 (fontified t) 739 743 (face font-lock-keyword-face fontified t) 743 753 (fontified t) 753 757 (face font-lock-keyword-face fontified t) 757 767 (fontified t) 767 769 (face font-lock-keyword-face fontified t) 769 781 (fontified t) 781 783 (face font-lock-keyword-face fontified t) 783 786 (fontified t) 786 790 (face font-lock-keyword-face fontified t) 790 800 (fontified t) 800 804 (face font-lock-keyword-face fontified t) 804 811 (fontified t) 811 815 (face font-lock-keyword-face fontified t) 815 822 (fontified t) 822 824 (face font-lock-keyword-face fontified t) 824 834 (fontified t) 834 836 (face font-lock-keyword-face fontified t) 836 839 (fontified t) 839 843 (face font-lock-keyword-face fontified t) 843 853 (fontified t) 853 857 (face font-lock-keyword-face fontified t) 857 864 (fontified t) 864 868 (face font-lock-keyword-face fontified t) 868 875 (fontified t) 875 877 (face font-lock-keyword-face fontified t) 877 893 (fontified t) 893 895 (face font-lock-keyword-face fontified t) 895 898 (fontified t) 898 902 (face font-lock-keyword-face fontified t) 902 905 (fontified t) 905 910 (face font-lock-keyword-face fontified t) 910 912 (fontified t) 912 917 (face font-lock-keyword-face fontified t) 917 926 (fontified t) 926 932 (face font-lock-keyword-face fontified t) 932 934 (fontified t) 934 938 (face font-lock-keyword-face fontified t) 938 945 (fontified t) 945 949 (face font-lock-keyword-face fontified t) 949 957 (fontified t) 957 961 (face font-lock-keyword-face fontified t) 961 968 (fontified t) 968 972 (face font-lock-keyword-face fontified t) 972 980 (fontified t) 980 982 (face font-lock-keyword-face fontified t) 982 991 (fontified t) 991 993 (face font-lock-keyword-face fontified t) 993 997 (face font-lock-keyword-face fontified t) 997 1004 (fontified t) 1004 1008 (face font-lock-keyword-face fontified t) 1008 1021 (fontified t) 1021 1025 (face font-lock-keyword-face fontified t) 1025 1028 (fontified t) 1028 1033 (fontified nil) 1033 1035 (face font-lock-keyword-face fontified nil) 1035 3113 (fontified nil) 3113 3115 (face font-lock-keyword-face fontified t) 3115 3136 (fontified t) 3136 3138 (face font-lock-keyword-face fontified t) 3138 3140 (fontified t) 3140 3142 (face font-lock-keyword-face fontified t) 3142 3147 (fontified t) 3147 3152 (face font-lock-keyword-face fontified t) 3152 3172 (fontified t) 3172 3174 (face font-lock-keyword-face fontified t) 3174 3176 (fontified t) 3176 3178 (face font-lock-keyword-face fontified t) 3178 3181 (fontified t) 3181 3188 (face font-lock-keyword-face fontified t) 3188 3189 (fontified t) 3189 3194 (face font-lock-keyword-face fontified t) 3194 3210 (fontified t) 3210 3217 (face font-lock-keyword-face fontified t) 3217 3229 (fontified t) 3229 3231 (face font-lock-keyword-face fontified t) 3231 3232 (fontified t)) . 473) (undo-tree-id0 . -3229) (undo-tree-id1 . -3113) (undo-tree-id2 . -3229) (undo-tree-id3 . -3229) (undo-tree-id4 . -3229) (undo-tree-id5 . -3229) (undo-tree-id6 . -3229) (undo-tree-id7 . -3232) (undo-tree-id8 . -3231) 3702 (t 26507 769 22872 357000)) nil (26513 15667 151008 267000) 0 nil])
([nil nil ((473 . 474) (472 . 473) (t 26513 15667 172451 916000) 455) nil (26513 15685 398632 806000) 0 nil])
([nil nil ((nil rear-nonsticky nil 472 . 473) (#("
" 0 1 (fontified nil)) . -490) (472 . 491) 455) nil (26513 15685 398632 13000) 0 nil])
([nil nil ((apply -2 473 493 undo--wrap-and-run-primitive-undo 473 493 ((473 . 475)))) nil (26513 15685 398631 260000) 0 nil])
([nil nil ((486 . 487) (#("2" 0 1 (face font-lock-comment-face fontified t)) . 486) (undo-tree-id9 . -1)) nil (26513 15685 398630 353000) 0 nil])
([nil nil ((493 . 494) (492 . 493) 486) nil (26513 15685 398623 283000) 0 nil])
([nil nil ((504 . 509) (#("name" 0 4 (face (font-lock-function-name-face ml/section) fontified nil)) . 504) (undo-tree-id33 . -4) (503 . 504) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 503 509 nil nil nil t #s(yas--field 2 518 552 nil nil (unless yas/modified-p (reftex-label nil 'dont-insert)) nil #s(yas--exit 554 nil))) #s(yas--field 2 518 552 nil nil (unless yas/modified-p (reftex-label nil 'dont-insert)) nil #s(yas--exit 554 nil))) #s(yas--exit 554 nil) 0 nil #s(yas--field 1 503 509 nil nil nil t #s(yas--field 2 518 552 nil nil (unless yas/modified-p (reftex-label nil 'dont-insert)) nil #s(yas--exit 554 nil))) nil nil)) (494 . 552) (#("sec" 0 3 (fontified t)) . 494) (undo-tree-id34 . -3) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -2) (undo-tree-id43 . -2) (undo-tree-id44 . -2) (undo-tree-id45 . -2) (undo-tree-id46 . -2) (undo-tree-id47 . -2) (undo-tree-id48 . -2) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -3) (undo-tree-id55 . -3) (undo-tree-id56 . -3) (undo-tree-id57 . -3) (undo-tree-id58 . -3) (undo-tree-id59 . -3) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) 497 (494 . 497) (#("*" 0 1 (fontified t)) . -494) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) 495 (494 . 495) (t 26513 15685 416277 928000)) nil (26513 15716 369425 354000) 0 nil])
([nil nil ((apply yas--snippet-revive 494 554 #s(yas--snippet nil (#s(yas--field 1 503 509 nil nil nil t #s(yas--field 2 518 552 nil nil (unless yas/modified-p (reftex-label nil 'dont-insert)) nil #s(yas--exit 554 nil))) #s(yas--field 2 518 552 nil nil (unless yas/modified-p (reftex-label nil 'dont-insert)) nil #s(yas--exit 554 nil))) #s(yas--exit 554 nil) 0 nil #s(yas--field 1 503 509 nil nil nil t #s(yas--field 2 518 552 nil nil (unless yas/modified-p (reftex-label nil 'dont-insert)) nil #s(yas--exit 554 nil))) nil nil))) nil (26513 15716 369151 197000) 0 nil])
([nil nil ((510 . 511) 508) nil (26513 15716 369150 799000) 0 nil])
([nil nil ((511 . 512)) nil (26513 15716 369150 447000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1222 . 1223) (nil fontified nil 512 . 1223) (512 . 1223)) nil (26513 15716 369149 979000) 0 nil])
([nil nil ((#("\\label{\"waiting for reftex-label call...\"}
" 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 41 (face font-lock-constant-face fontified t) 41 43 (fontified t)) . 1224) (undo-tree-id10 . -42) (undo-tree-id11 . -43) (undo-tree-id12 . -43) (undo-tree-id13 . -43) (undo-tree-id14 . -43) (undo-tree-id15 . -43) (undo-tree-id16 . -43) (undo-tree-id17 . -43) (undo-tree-id18 . -16) (undo-tree-id19 . -16) (undo-tree-id20 . -16) (undo-tree-id21 . -16) (undo-tree-id22 . -16) (undo-tree-id23 . -16) (undo-tree-id24 . -16) (undo-tree-id25 . -16) (undo-tree-id26 . -16) (undo-tree-id27 . -16) (undo-tree-id28 . -16) (undo-tree-id29 . -16) (undo-tree-id30 . -16) (undo-tree-id31 . -16) (undo-tree-id32 . -43)) nil (26513 15716 369146 454000) 0 nil])
([nil nil ((1372 . 1390) (t 26513 15716 388598 89000)) nil (26513 15724 294558 878000) 0 nil])
([nil nil ((133 . 134) (t 26513 15724 303748 413000) 126) nil (26513 15744 327003 856000) 0 nil])
([nil nil ((nil rear-nonsticky nil 156 . 157) (nil fontified nil 134 . 157) (134 . 157)) nil (26513 15744 326999 270000) 0 nil])
([nil nil ((apply -2 479 499 undo--wrap-and-run-primitive-undo 479 499 ((479 . 481) 495))) nil (26513 15757 978235 696000) 0 nil])
([nil nil ((apply -2 461 481 undo--wrap-and-run-primitive-undo 461 481 ((461 . 463) 477))) nil (26513 15765 91644 878000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field nil 559 566 nil nil nil nil nil)) nil 1 nil #s(yas--field nil 559 566 nil nil nil nil nil) nil nil)) (557 . 559) (541 . 579) (#("exm" 0 3 (fontified t)) . 541) (undo-tree-id315 . -3) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -2) (undo-tree-id331 . -2) (undo-tree-id332 . -2) (undo-tree-id333 . -2) (undo-tree-id334 . -2) (undo-tree-id335 . -2) (undo-tree-id336 . -2) (undo-tree-id337 . -2) (undo-tree-id338 . -2) (undo-tree-id339 . -2) (undo-tree-id340 . -2) (undo-tree-id341 . -2) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -3) (undo-tree-id345 . -3) (undo-tree-id346 . -3) (undo-tree-id347 . -3) (undo-tree-id348 . -3) (undo-tree-id349 . -3) (undo-tree-id350 . -3) (undo-tree-id351 . -3) (undo-tree-id352 . -3) 544 (541 . 544) (#("E" 0 1 (fontified t)) . -541) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (#("x" 0 1 (fontified t)) . -542) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) 543 (541 . 543) (539 . 541) (538 . 539) (t 26513 15765 110473 115000) 535) nil (26513 15840 761112 184000) 0 nil])
([nil nil ((apply yas--snippet-revive 541 581 #s(yas--snippet nil (#s(yas--field nil 559 566 nil nil nil nil nil)) nil 1 nil #s(yas--field nil 559 566 nil nil nil nil nil) nil nil))) nil (26513 15840 761090 715000) 0 nil])
([nil nil ((#("  example
" 0 10 (fontified t)) . 557) (undo-tree-id232 . -9) (undo-tree-id233 . -1) (undo-tree-id234 . 8) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2) (undo-tree-id238 . -2) (undo-tree-id239 . -2) (undo-tree-id240 . -2) (undo-tree-id241 . -2) (undo-tree-id242 . -2) (undo-tree-id243 . -2) (undo-tree-id244 . -2) (undo-tree-id245 . -2) (undo-tree-id246 . -2) (undo-tree-id247 . -2) (undo-tree-id248 . -2) (undo-tree-id249 . -2) (undo-tree-id250 . -2) (undo-tree-id251 . -2) (undo-tree-id252 . -2) (undo-tree-id253 . -2) (undo-tree-id254 . -2) (undo-tree-id255 . -2) (undo-tree-id256 . -2) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -2) (undo-tree-id260 . -2) (undo-tree-id261 . -2) (undo-tree-id262 . -2) (undo-tree-id263 . -2) (undo-tree-id264 . -2) (undo-tree-id265 . -2) (undo-tree-id266 . -2) (undo-tree-id267 . -2) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -10) 558) nil (26513 15840 761088 963000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 557) (undo-tree-id230 . 1) (undo-tree-id231 . -1)) nil (26513 15840 761055 880000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -592) (592 . 593) (#("}" 0 1 (fontified nil)) . -592) (591 . 593) (#("r" 0 1 (fontified t)) . -591) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) 592 (591 . 592) (589 . 592) (584 . 589) (#(")" 0 1 (fontified nil)) . -584) (583 . 585) (582 . 583) (#("\\" 0 1 (face font-lock-keyword-face fontified t)) . -582) (undo-tree-id228 . -1) (undo-tree-id229 . -1) 583 (582 . 583) (581 . 582) (580 . 582) (559 . 580) (556 . 559) 541) nil (26513 15840 761053 785000) 0 nil])
([nil nil ((606 . 613) (#("approaching " 0 12 (fontified t)) . -606) (undo-tree-id88 . -12) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -2) (undo-tree-id97 . -2) (undo-tree-id98 . -2) (undo-tree-id99 . -2) (undo-tree-id100 . -2) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -3) (undo-tree-id104 . -3) (undo-tree-id105 . -3) (undo-tree-id106 . -3) (undo-tree-id107 . -3) (undo-tree-id108 . -3) (undo-tree-id109 . -3) (undo-tree-id110 . -4) (undo-tree-id111 . -4) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . -5) (undo-tree-id120 . -5) (undo-tree-id121 . -5) (undo-tree-id122 . -5) (undo-tree-id123 . -5) (undo-tree-id124 . -6) (undo-tree-id125 . -6) (undo-tree-id126 . -6) (undo-tree-id127 . -6) (undo-tree-id128 . -6) (undo-tree-id129 . -6) (undo-tree-id130 . -6) (undo-tree-id131 . -7) (undo-tree-id132 . -7) (undo-tree-id133 . -7) (undo-tree-id134 . -7) (undo-tree-id135 . -7) (undo-tree-id136 . -7) (undo-tree-id137 . -7) (undo-tree-id138 . -8) (undo-tree-id139 . -8) (undo-tree-id140 . -8) (undo-tree-id141 . -8) (undo-tree-id142 . -8) (undo-tree-id143 . -8) (undo-tree-id144 . -8) (undo-tree-id145 . -9) (undo-tree-id146 . -9) (undo-tree-id147 . -9) (undo-tree-id148 . -9) (undo-tree-id149 . -9) (undo-tree-id150 . -9) (undo-tree-id151 . -9) (undo-tree-id152 . -10) (undo-tree-id153 . -10) (undo-tree-id154 . -10) (undo-tree-id155 . -10) (undo-tree-id156 . -10) (undo-tree-id157 . -10) (undo-tree-id158 . -10) (undo-tree-id159 . -11) (undo-tree-id160 . -11) (undo-tree-id161 . -11) (undo-tree-id162 . -11) (undo-tree-id163 . -11) (undo-tree-id164 . -11) (undo-tree-id165 . -11) (undo-tree-id166 . -12) (undo-tree-id167 . -12) (undo-tree-id168 . -12) (undo-tree-id169 . -12) (undo-tree-id170 . -12) (undo-tree-id171 . -12) (undo-tree-id172 . -12) (undo-tree-id173 . -12) (undo-tree-id174 . -12) 618 (602 . 618) (601 . 602) (#("$" 0 1 (fontified nil)) . -601) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (#("$" 0 1 (fontified t)) . 602) (#("x" 0 1 (fontified t)) . -602) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("=" 0 1 (fontified t)) . -603) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) 604 (602 . 604) (601 . 603) (594 . 601)) nil (26513 15840 761044 827000) 0 nil])
([nil nil ((#("section*" 0 8 (face font-lock-keyword-face fontified t)) . 630) (undo-tree-id407 . -7) (undo-tree-id408 . -7) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (undo-tree-id411 . -7) (undo-tree-id412 . -7) (undo-tree-id413 . -8) (undo-tree-id414 . -8) 637 (t 26513 15840 779420 740000)) nil (26513 15855 449034 208000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-keyword-face fontified t)) . 629) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1)) nil (26513 15855 449026 523000) 0 nil])
([nil nil ((630 . 636) (629 . 630) (t 26513 15855 468353 171000)) nil (26513 15868 370508 636000) 0 nil])
([nil nil ((632 . 633) (#("c" 0 1 (face font-lock-keyword-face fontified t)) . 632) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1)) nil (26513 15868 370505 550000) 0 nil])
([nil nil ((nil rear-nonsticky nil 989 . 990) (nil fontified nil 983 . 990) (983 . 990) (#("\\section*" 0 9 (face font-lock-keyword-face fontified t)) . 983) (undo-tree-id424 . -9) (undo-tree-id425 . -8) (undo-tree-id426 . -8) (undo-tree-id427 . -9) (undo-tree-id428 . -8) (undo-tree-id429 . -9) (undo-tree-id430 . -9) 992 (t 26513 15868 389183 212000)) nil (26513 15883 87071 847000) 0 nil])
([nil nil ((#("is the" 0 6 (fontified t)) . 564) (undo-tree-id564 . -5) (undo-tree-id565 . -5) (undo-tree-id566 . -5) (undo-tree-id567 . -5) (undo-tree-id568 . -5) (undo-tree-id569 . -5) (undo-tree-id570 . -6) (undo-tree-id571 . -6) 569 (t 26513 15883 104888 750000)) nil (26513 15954 809105 131000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 564) (undo-tree-id561 . 1) (undo-tree-id562 . -1) (undo-tree-id563 . -1)) nil (26513 15954 809102 590000) 0 nil])
([nil nil ((587 . 601)) nil (26513 15954 809101 383000) 0 nil])
([nil nil ((610 . 622) (#("is near" 0 7 (fontified t)) . 610) (undo-tree-id552 . -6) (undo-tree-id553 . -6) (undo-tree-id554 . -6) (undo-tree-id555 . -6) (undo-tree-id556 . -6) (undo-tree-id557 . -6) (undo-tree-id558 . -7) (undo-tree-id559 . -7) (undo-tree-id560 . -7) 616) nil (26513 15954 809100 832000) 0 nil])
([nil nil ((665 . 666) (664 . 665) (661 . 664) (660 . 661) (658 . 660) (#(")" 0 1 (fontified nil)) . -658) (657 . 659) (656 . 657) (655 . 656) (#("f" 0 1 (fontified t)) . -655) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (#("(" 0 1 (fontified t)) . -656) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("x" 0 1 (fontified t)) . -657) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) 658 (657 . 658) (656 . 657) (655 . 656) (654 . 656) (640 . 654) (#("e" 0 1 (fontified t)) . -640) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("i" 0 1 (fontified t)) . -641) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id501 . -1) 642 (632 . 642) (#("o" 0 1 (fontified t)) . -632) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) 633 (632 . 633) (#("w" 0 1 (fontified t)) . -632) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) 633 (629 . 633) (627 . 629) (#("  " 0 2 (fontified nil)) . 626) (undo-tree-id524 . -2) (undo-tree-id525 . -2) (undo-tree-id526 . -2) (undo-tree-id527 . -2) (undo-tree-id528 . -2) (undo-tree-id529 . -2) (undo-tree-id530 . -2) (undo-tree-id531 . -2) (undo-tree-id532 . -2) (undo-tree-id533 . -2) (undo-tree-id534 . -2) (undo-tree-id535 . -2) (undo-tree-id536 . -2) (undo-tree-id537 . -2) (undo-tree-id538 . -2) (undo-tree-id539 . -2) (undo-tree-id540 . -2) (626 . 629) (#(" " 0 1 (fontified nil)) . 625) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (626 . 627) (625 . 626)) nil (26513 15954 809093 323000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . 665) (undo-tree-id431 . -1) (undo-tree-id432 . -1)) nil (26513 15954 808920 236000) 0 nil])
([nil nil ((676 . 680) (675 . 676) (674 . 675) (673 . 674) (672 . 674) (666 . 672) (t 26513 15954 828504 880000)) nil (26513 15966 478601 388000) 0 nil])
([nil nil ((763 . 764) (761 . 764) (t 26513 15966 497027 903000)) nil (26513 16065 526620 420000) 0 nil])
([nil nil ((1122 . 1123) (1120 . 1123)) ((#("^{}" 0 1 (face (bold) fontified nil) 1 3 (face (bold) fontified nil)) . 1120) (#("+" 0 1 (face (bold) fontified t)) . 1122)) (26513 16066 682832 90000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1303 . 1304) (#("
" 0 1 (fontified nil)) . -1310) (1303 . 1311) 1295 (t 26513 16067 581368 30000)) nil (26513 16074 476657 229000) 0 nil] [nil nil ((1398 . 1400) (#("  " 0 2 (fontified nil)) . 1397) (undo-tree-id572 . -2) (undo-tree-id574 . -2) (undo-tree-id576 . -2) (undo-tree-id578 . -2) (undo-tree-id580 . -2) (undo-tree-id582 . -2) (undo-tree-id584 . -2) (undo-tree-id586 . -2) (undo-tree-id588 . -2) (1399 . 1400) (1396 . 1399) (t 26513 15990 752992 690000) 1392) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 1396) (undo-tree-id622 . -3) (undo-tree-id623 . -3) (undo-tree-id624 . -3) (undo-tree-id625 . -3) (undo-tree-id626 . -3) (undo-tree-id627 . -3) (undo-tree-id628 . -3) (undo-tree-id629 . -3) (undo-tree-id630 . -3) (undo-tree-id631 . -3) (undo-tree-id632 . -3) (undo-tree-id633 . -3) (undo-tree-id634 . -3) (undo-tree-id635 . -3) (undo-tree-id636 . -3) (undo-tree-id637 . -3) (undo-tree-id638 . -3) (undo-tree-id639 . -3) (undo-tree-id640 . -3) (undo-tree-id641 . -3) (undo-tree-id642 . -3) (undo-tree-id643 . -3) (undo-tree-id644 . -3) (undo-tree-id645 . -3) (undo-tree-id646 . -3) (undo-tree-id647 . -3) (undo-tree-id648 . -3) (undo-tree-id649 . -3) (undo-tree-id650 . -3) (undo-tree-id651 . -3) (undo-tree-id652 . -3) (undo-tree-id653 . -3) (undo-tree-id654 . -3) (undo-tree-id655 . -3) (undo-tree-id656 . -3) (undo-tree-id657 . -3) (undo-tree-id658 . -3) (undo-tree-id659 . -3) (undo-tree-id660 . -3) (undo-tree-id661 . -3) (undo-tree-id662 . -3) (undo-tree-id663 . -3) (undo-tree-id664 . -3) (undo-tree-id665 . -3) (undo-tree-id666 . -3) (undo-tree-id667 . -3) (undo-tree-id668 . -3) (undo-tree-id669 . -3) (undo-tree-id670 . -3) (undo-tree-id671 . -3) (undo-tree-id672 . -3) (undo-tree-id673 . -3) (undo-tree-id674 . -3) (undo-tree-id675 . -3) (undo-tree-id676 . -3) (undo-tree-id677 . -3) (undo-tree-id678 . -3) (undo-tree-id679 . -3) (undo-tree-id680 . -3) (undo-tree-id681 . -3) (undo-tree-id682 . -3) (undo-tree-id683 . -3) (undo-tree-id684 . -3) (undo-tree-id685 . -3) (undo-tree-id686 . -3) (undo-tree-id687 . -3) (undo-tree-id688 . -3) (undo-tree-id689 . -3) (undo-tree-id690 . -3) (undo-tree-id691 . -3) (undo-tree-id692 . -3) (undo-tree-id693 . -3) (undo-tree-id694 . -3) (#("
" 0 1 (fontified nil)) . 1399) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (1397 . 1399) (#("  " 0 2 (fontified t)) . 1398) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (t 26513 16060 268830 194000)) (26513 16059 36595 288000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1327 . 1328) (#("
" 0 1 (fontified nil)) . -1334) (1327 . 1335) 1311 (t 26513 16074 496725 234000)) nil (26513 16078 932571 240000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1400 . 1401) (#("
" 0 1 (fontified nil)) . -1555) (1400 . 1556) 1399) ((#("
\\begin{example}
  What value of $f(x) = x^{2}$ approaches to, when x appoaches to 2.

  In mathematical notation $f(x) \\to ?$ when $x \\to 2$
\\end{example}
" 0 1 (fontified nil rear-nonsticky nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil) 8 15 (face font-lock-function-name-face fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 33 (fontified t) 33 35 (fontified t) 35 37 (fontified t) 37 42 (fontified t) 42 43 (fontified t) 43 45 (fontified t) 45 46 (fontified t) 46 86 (fontified t) 86 87 (fontified t) 87 114 (fontified t) 114 116 (fontified t) 116 118 (fontified t) 118 120 (fontified t) 120 123 (face font-lock-keyword-face fontified t) 123 125 (fontified t) 125 132 (fontified t) 132 135 (fontified t) 135 138 (face font-lock-keyword-face fontified t) 138 140 (fontified t) 140 141 (fontified t) 141 142 (fontified t) 142 146 (face font-lock-keyword-face fontified nil) 146 147 (fontified nil) 147 154 (face font-lock-function-name-face fontified nil) 154 155 (fontified nil) 155 156 (fontified nil)) . 1400) (1555 . 1556) (nil rear-nonsticky t 1400 . 1401) (t 26513 16056 11029 38000)) (26513 16054 614181 529000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1354 . 1355) (#("
" 0 1 (fontified nil)) . -1361) (1354 . 1362) 1335) nil (26513 16078 932570 119000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1303 . 1304) (#("
" 0 1 (fontified nil)) . -1310) (1303 . 1311) 1290 (t 26513 16030 920190 57000)) ((#("
\\hline
" 0 1 (fontified nil rear-nonsticky nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 1303) (1310 . 1311) (nil rear-nonsticky t 1303 . 1304)) (26513 16053 996513 836000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1384 . 1385) (#("
" 0 1 (fontified nil)) . -1391) (1384 . 1392) 1362) nil (26513 16078 932565 695000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1327 . 1328) (#("
" 0 1 (fontified nil)) . -1334) (1327 . 1335) 1311) ((#("
\\hline
" 0 1 (fontified nil rear-nonsticky nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 1327) (1334 . 1335) (nil rear-nonsticky t 1327 . 1328)) (26513 16053 561707 363000) 0 nil])
([nil nil ((nil rear-nonsticky nil 944 . 945) (#("
" 0 1 (fontified nil)) . -951) (944 . 952) 931 (t 26513 16078 950699 661000)) nil (26513 16089 938209 876000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1354 . 1355) (#("
" 0 1 (fontified nil)) . -1361) (1354 . 1362) 1335) ((#("
\\hline
" 0 1 (fontified nil rear-nonsticky nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 1354) (1361 . 1362) (nil rear-nonsticky t 1354 . 1355)) (26513 16052 507900 680000) 0 nil])
([nil nil ((nil rear-nonsticky nil 968 . 969) (#("
" 0 1 (fontified nil)) . -975) (968 . 976) 952) nil (26513 16089 938205 213000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1384 . 1385) (#("
" 0 1 (fontified nil)) . -1391) (1384 . 1392) 1362) ((#("
\\hline
" 0 1 (fontified nil rear-nonsticky nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 1384) (1391 . 1392) (nil rear-nonsticky t 1384 . 1385)) (26513 16050 554459 629000) 0 nil])
([nil nil ((nil rear-nonsticky nil 995 . 996) (#("
" 0 1 (fontified nil)) . -1002) (995 . 1003) 976 (t 26513 16089 957269 36000)) nil (26513 16094 769081 464000) 0 nil])
([nil nil ((nil rear-nonsticky nil 944 . 945) (#("
" 0 1 (fontified nil)) . -951) (944 . 952) 931) ((#("
\\hline
" 0 1 (rear-nonsticky nil fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 944) (undo-tree-id590 . -7) (undo-tree-id591 . -7) (undo-tree-id592 . -7) (undo-tree-id593 . -7) (undo-tree-id594 . -7) (undo-tree-id595 . -7) (undo-tree-id596 . -7) (undo-tree-id597 . -7) (undo-tree-id598 . -6) (undo-tree-id599 . -6) (undo-tree-id600 . -1) (undo-tree-id601 . -7) (undo-tree-id602 . -6) (undo-tree-id603 . -6) (undo-tree-id604 . -6) (undo-tree-id605 . -6) (undo-tree-id606 . -6) (undo-tree-id607 . -6) (undo-tree-id608 . -6) (undo-tree-id609 . -6) (undo-tree-id610 . -6) (undo-tree-id611 . -6) (undo-tree-id612 . -6) (undo-tree-id613 . -6) (undo-tree-id614 . -6) (undo-tree-id615 . -6) (undo-tree-id616 . -6) (undo-tree-id617 . -6) (undo-tree-id618 . -6) (undo-tree-id619 . -1) (undo-tree-id620 . -7) (undo-tree-id621 . -6) (951 . 952) (nil rear-nonsticky t 944 . 945)) (26513 16050 237872 281000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1025 . 1026) (#("
" 0 1 (fontified nil)) . -1032) (1025 . 1033) 1003) nil (26513 16094 769074 735000) 0 nil])
([nil nil ((nil rear-nonsticky nil 968 . 969) (#("
" 0 1 (fontified nil)) . -975) (968 . 976) 952) ((#("
\\hline
" 0 1 (fontified nil rear-nonsticky nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 968) (975 . 976) (nil rear-nonsticky t 968 . 969)) (26513 16049 867829 89000) 0 nil])
([nil nil ((1099 . 1101) (1098 . 1100) (#("}" 0 1 (fontified nil)) . -1097) (1097 . 1098) (#("}" 0 1 (fontified nil)) . -1097) (1093 . 1098) (#("r" 0 1 (fontified t)) . -1093) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) 1094 (1093 . 1094) (#("R" 0 1 (fontified t)) . -1093) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (#("e" 0 1 (fontified t)) . -1094) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (#("d" 0 1 (fontified t)) . -1095) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) 1096 (1093 . 1096) (1092 . 1094) (1084 . 1092) (1083 . 1084) (1082 . 1083) (1081 . 1082) (t 26513 16094 787246 575000) 1066) nil (26513 16140 876285 267000) 0 nil])
([nil nil ((nil rear-nonsticky nil 995 . 996) (#("
" 0 1 (fontified nil)) . -1002) (995 . 1003) 976) ((#("
\\hline
" 0 1 (fontified nil rear-nonsticky nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 995) (1002 . 1003) (nil rear-nonsticky t 995 . 996)) (26513 16049 228230 71000) 0 nil])
([nil nil ((1094 . 1096) (1093 . 1094) (#("cyan" 0 4 (fontified t)) . 1093) (undo-tree-id905 . -3) (undo-tree-id906 . -1) (undo-tree-id907 . -3) (undo-tree-id908 . -3) (undo-tree-id909 . -3) (undo-tree-id910 . -3) (undo-tree-id911 . -3) (undo-tree-id912 . -3) (undo-tree-id913 . -3) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -4) (undo-tree-id924 . -4) 1094 (t 26513 16140 886642 254000)) nil (26513 16147 284978 795000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1025 . 1026) (#("
" 0 1 (fontified nil)) . -1032) (1025 . 1033) 1003) ((#("
\\hline
" 0 1 (rear-nonsticky nil fontified nil) 1 7 (face font-lock-keyword-face fontified nil) 7 8 (fontified nil)) . 1025) (undo-tree-id589 . -1) (1032 . 1033) (nil rear-nonsticky t 1025 . 1026) (t 26513 16041 701693 640000)) (26513 16049 80415 120000) 0 nil])
([nil nil ((1092 . 1093) (t 26513 16147 303587 357000)) nil (26513 16153 901829 640000) 0 nil])
([nil nil ((951 . 952) (#("
" 0 1 (fontified t)) . 951) (t 26513 16041 701693 640000)) ((951 . 952) (#("
" 0 1 (fontified t)) . 951)) (26513 16049 79925 255000) 0 nil])
([nil nil ((1121 . 1123) (1118 . 1121) (1117 . 1118) (1115 . 1117) (#(")" 0 1 (face (ml/red) fontified nil)) . -1115) (1114 . 1116) (1113 . 1114) (#("\\" 0 1 (face (font-lock-keyword-face ml/red) fontified t)) . -1113) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) 1114 (1113 . 1114) (1112 . 1113) (1111 . 1113) (1101 . 1111) (t 26513 16153 920530 666000)) nil (26513 16198 824843 421000) 0 nil])
nil
([nil nil ((1138 . 1139) (1136 . 1139) (1135 . 1136) (#("r" 0 1 (face (ml/red) fontified t)) . -1135) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) 1136 (1132 . 1136) (1131 . 1132) (1130 . 1131) (#("^" 0 1 (face (ml/red) fontified t)) . -1130) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) 1131 (#("{" 0 1 (face (shadow ml/red) fontified nil)) . -1131) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (#("}" 0 1 (face (shadow ml/red) fontified t)) . 1132) (#(")" 0 1 (face (ml/red) fontified t)) . -1132) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -1) (undo-tree-id1110 . -1) 1133 (#(" " 0 1 (face (ml/red) fontified t)) . 1133) (undo-tree-id1111 . -1) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (undo-tree-id1135 . -1) 1134 (#("t" 0 1 (face (ml/red) fontified t)) . -1134) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (undo-tree-id1138 . -1) (undo-tree-id1139 . -1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#("o" 0 1 (face (ml/red) fontified t)) . -1135) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) 1136 (1133 . 1136) (#("o" 0 1 (face (ml/red) fontified t)) . -1133) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) 1134 (#(" " 0 1 (face (ml/red) fontified t)) . 1134) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) 1135 (1132 . 1135) (#(")" 0 1 (face (shadow ml/red) fontified nil)) . -1132) (1132 . 1133) (1130 . 1133) (1129 . 1130) (1128 . 1130) (1126 . 1128) (#("r" 0 1 (face (ml/red) fontified t)) . -1126) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) 1127 (#(" " 0 1 (face (ml/red) fontified t)) . 1127) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) 1128 (1124 . 1128)) nil (26513 16198 824831 952000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1530 . 1531) (#("
" 0 1 (fontified nil)) . -1590) (1530 . 1591) (t 26513 16198 844078 918000)) nil (26513 16210 938336 965000) 0 nil])
([nil nil ((1586 . 1587) (#("-" 0 1 (face (ml/red) fontified t)) . 1586) (undo-tree-id1226 . -1)) nil (26513 16210 938333 772000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1142 . 1143) (#("
" 0 1 (fontified nil)) . -1202) (1142 . 1203) 1138 (t 26513 16210 957521 741000)) nil (26513 16259 978839 805000) 0 nil])
([nil nil ((1143 . 1145) (1142 . 1143) 1083) nil (26513 16259 978839 5000) 0 nil])
([nil nil ((1190 . 1191) (1188 . 1191) (1184 . 1188) (1183 . 1184) (1182 . 1183) (#("^" 0 1 (face (ml/red) fontified t)) . -1182) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) 1183 (#("{" 0 1 (face (shadow ml/red) fontified nil)) . -1183) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) (undo-tree-id1270 . -1) (undo-tree-id1271 . -1) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (#("}" 0 1 (face (shadow ml/red) fontified t)) . 1184) (1182 . 1185) (1181 . 1182) (1179 . 1182) (1175 . 1179)) nil (26513 16259 978837 89000) 0 nil])
([nil nil ((1198 . 1199) (#("8" 0 1 (face (ml/red) fontified t)) . -1198) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) 1199 (1198 . 1199) (#("\\to" 0 3 (face (font-lock-keyword-face ml/red) fontified t)) . 1198) (undo-tree-id1248 . -3) (undo-tree-id1249 . -2) (undo-tree-id1250 . -2) (undo-tree-id1251 . -3) (undo-tree-id1252 . -3) (undo-tree-id1253 . -3) (undo-tree-id1254 . -3) (undo-tree-id1255 . -3) (undo-tree-id1256 . -3) 1201) nil (26513 16259 978828 614000) 0 nil])
([nil nil ((#("$ as $x \\to 2^{-}$" 0 5 (face (ml/red) fontified t) 5 8 (face (ml/red) fontified t) 8 11 (face (font-lock-keyword-face ml/red) fontified t) 11 13 (face (ml/red) fontified t) 13 14 (face (ml/red) fontified t) 14 17 (face (ml/red) fontified t) 17 18 (face (ml/red) fontified t)) . 1202) (undo-tree-id1230 . -17) (undo-tree-id1231 . -17) (undo-tree-id1232 . -17) (undo-tree-id1233 . -17) (undo-tree-id1234 . -17) (undo-tree-id1235 . -17) (undo-tree-id1236 . -18) 1219) nil (26513 16259 978508 26000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 1202) (undo-tree-id1227 . 1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1)) nil (26513 16259 978504 418000) 0 nil])
([nil nil ((1201 . 1203) (#("}" 0 1 (fontified nil)) . -1201) (1201 . 1202)) nil (26513 16259 978493 299000) 0 nil])
([nil nil ((1201 . 1202) (#("7" 0 1 (face (ml/red) fontified t)) . -1201) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) 1202 (1201 . 1202) (t 26513 16259 997818 465000)) nil (26513 16277 37216 410000) 0 nil])
([nil nil ((1201 . 1202) (#("4" 0 1 (face (ml/red) fontified t)) . 1201) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1)) nil (26513 16277 37208 939000) 0 nil])
([nil nil ((1201 . 1202) (#("4" 0 1 (face (ml/red) fontified t)) . 1201) (undo-tree-id1325 . -1)) nil (26513 16277 37205 369000) 0 nil])
([nil nil ((#("'" 0 1 (face (ml/red) fontified t)) . -1202) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) (undo-tree-id1281 . -1) (undo-tree-id1282 . -1) (undo-tree-id1283 . -1) (undo-tree-id1284 . -1) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) (undo-tree-id1287 . -1) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1290 . -1) (undo-tree-id1291 . -1) (undo-tree-id1292 . -1) 1203 (#(" " 0 1 (face (ml/red) fontified t)) . 1203) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) 1204 (#("c" 0 1 (face (ml/red) fontified t)) . -1204) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) 1205 (1204 . 1205) (1202 . 1204) (1201 . 1202) (#(")" 0 1 (face (ml/red) fontified t)) . 1201) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1)) nil (26513 16277 37200 579000) 0 nil])
([nil nil ((1143 . 1144) (1142 . 1143) (t 26513 16277 57018 786000) 1135) nil (26513 16285 207564 571000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . 1143) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (undo-tree-id1361 . -1)) nil (26513 16285 207563 399000) 0 nil])
([nil nil ((1146 . 1147) 1144) nil (26513 16285 207550 397000) 0 nil])
([nil nil ((1165 . 1176) (#("v" 0 1 (face (ml/red) fontified t)) . -1165) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (#("u" 0 1 (face (ml/red) fontified t)) . -1166) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) 1167 (1164 . 1167) (#("We say that" 0 11 (face (ml/red) fontified t)) . 1164) (undo-tree-id1391 . -10) (undo-tree-id1392 . -10) (undo-tree-id1393 . -10) (undo-tree-id1394 . -10) (undo-tree-id1395 . -10) (undo-tree-id1396 . -10) (undo-tree-id1397 . -11) (undo-tree-id1398 . -11) (undo-tree-id1399 . -11) 1174 (t 26513 16285 227184 469000)) nil (26513 16301 911896 196000) 0 nil])
([nil nil ((610 . 620) (#("appoaches" 0 9 (fontified t)) . 610) (t 26513 16301 932528 366000)) nil (26513 16328 845317 155000) 0 nil])
([nil nil ((1209 . 1210) (t 26513 16329 957881 243000) 1182) nil (26513 16338 908218 211000) 0 nil] [nil nil ((1180 . 1182) (#(" " 0 1 (face (ml/red) fontified nil)) . -1180) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) (undo-tree-id1416 . -1) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (1179 . 1180)) ((#("
" 0 1 (face (ml/red) fontified t)) . 1179) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (1180 . 1181) (#("  " 0 2 (face (ml/red) fontified t)) . 1180) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1)) (26513 16328 845168 271000) 0 nil])
([nil nil ((#("

" 0 1 (fontified t) 1 2 (fontified t)) . -1211) (undo-tree-id1440 . 2) (1210 . 1211) 1210) nil (26513 16338 908215 164000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 1658 . 1659) (#("
" 0 1 (fontified nil)) . -1723) (1658 . 1724) (t 26513 16338 927064 218000)) nil (26513 16350 486432 340000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1662) (undo-tree-id1461 . -1)) nil (26513 16353 568684 709000) 0 nil] [nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 1658) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1)) ((1658 . 1659)) (26513 16350 486299 434000) 0 nil])
([nil nil ((1707 . 1708) (#("-" 0 1 (face (ml/red) fontified t)) . 1707) (undo-tree-id1462 . -1) (t 26513 16353 586756 310000)) nil (26513 16356 700302 67000) 0 nil])
nil
([nil nil ((1661 . 1662) (t 26513 16356 720480 841000) 1660) nil (26513 16361 921484 766000) 0 nil])
([nil nil ((#("% - Applications, Word Problems" 0 2 (face font-lock-comment-delimiter-face fontified t) 2 31 (face font-lock-comment-face fontified t)) . 1731) (undo-tree-id1463 . -30) (undo-tree-id1464 . -31) (undo-tree-id1465 . -31) (t 26513 16361 940025 49000)) nil (26513 16372 397217 699000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t)) . -1726) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) 1727 (1726 . 1727) (t 26513 16372 417121 73000)) nil (26513 16422 697613 845000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1726) (undo-tree-id1612 . 1) (undo-tree-id1613 . -1)) nil (26513 16422 697607 613000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 1726) (undo-tree-id1608 . -2) (undo-tree-id1609 . 3) (undo-tree-id1610 . -2) (undo-tree-id1611 . -3)) nil (26513 16422 697606 593000) 0 nil])
([nil nil ((1751 . 1753) (1749 . 1751) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1749) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) 1750 (1749 . 1750) (#("t" 0 1 (face font-lock-keyword-face fontified t)) . -1749) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) 1750 (1749 . 1750) (#("b" 0 1 (face font-lock-keyword-face fontified t)) . -1749) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . -1) (undo-tree-id1570 . -1) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (undo-tree-id1575 . -1) (undo-tree-id1576 . -1) (undo-tree-id1577 . -1) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1584 . -1) (undo-tree-id1585 . -1) (undo-tree-id1586 . -1) 1750 (#("{" 0 1 (face (shadow) fontified nil)) . -1750) (undo-tree-id1587 . -1) (undo-tree-id1588 . -1) (undo-tree-id1589 . -1) (#("}" 0 1 (face (shadow) fontified t)) . 1751) (1750 . 1752) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -1750) (undo-tree-id1590 . -1) (undo-tree-id1591 . -1) (undo-tree-id1592 . -1) (undo-tree-id1593 . -1) (undo-tree-id1594 . -1) (undo-tree-id1595 . -1) (undo-tree-id1596 . -1) (undo-tree-id1597 . -1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) 1751 (#("
" 0 1 (fontified t)) . -1751) (1745 . 1751) (1744 . 1745) (1743 . 1744) 1743) nil (26513 16422 697601 716000) 0 nil])
([nil nil ((1753 . 1754)) nil (26513 16422 697568 799000) 0 nil])
([nil nil ((#("%%% Local Variables:
%%% mode: LaTeX
%%% TeX-master: t
%%% TeX-master: t
%%% TeX-master: t
%%% TeX-master: t
%%% End:
" 0 4 (face font-lock-comment-delimiter-face fontified t) 4 21 (face font-lock-comment-face fontified t) 21 25 (face font-lock-comment-delimiter-face fontified t) 25 37 (face font-lock-comment-face fontified t) 37 41 (face font-lock-comment-delimiter-face fontified t) 41 55 (face font-lock-comment-face fontified t) 55 59 (face font-lock-comment-delimiter-face fontified t) 59 73 (face font-lock-comment-face fontified t) 73 77 (face font-lock-comment-delimiter-face fontified t) 77 91 (face font-lock-comment-face fontified t) 91 95 (face font-lock-comment-delimiter-face fontified t) 95 103 (face font-lock-comment-face fontified t) 103 105 (face font-lock-comment-face fontified t) 105 107 (face font-lock-comment-face fontified t) 107 108 (face font-lock-comment-face fontified t) 108 109 (face font-lock-comment-face fontified t) 109 112 (face font-lock-comment-delimiter-face fontified t) 112 113 (face font-lock-comment-delimiter-face fontified t) 113 118 (face font-lock-comment-face fontified t)) . 1754) (undo-tree-id1506 . -118) (undo-tree-id1507 . -118) (undo-tree-id1508 . -117) (undo-tree-id1509 . -118) (undo-tree-id1510 . 118) (undo-tree-id1511 . -118) (undo-tree-id1512 . -118) (undo-tree-id1513 . -118) (undo-tree-id1514 . -118) 1872) nil (26513 16422 697567 999000) 0 nil])
([nil nil ((1753 . 1756) (#("n" 0 1 (face (bold) fontified t)) . -1753) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) 1754 (1752 . 1754) (#("R" 0 1 (face (bold) fontified t)) . -1752) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (#("E" 0 1 (face (bold) fontified t)) . -1753) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) 1754 (1752 . 1754)) nil (26513 16422 697558 358000) 0 nil])
([nil nil ((1757 . 1758) (t 26513 16422 717952 299000)) nil (26513 16434 342464 731000) 0 nil])
([nil nil ((1756 . 1757)) nil (26513 16434 342464 380000) 0 nil])
([nil nil ((#("\\textbf{Note:} 
" 0 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t) 8 13 (face (bold) fontified t) 13 15 (fontified t) 15 16 (fontified t)) . 1744) (undo-tree-id1631 . -16) (undo-tree-id1632 . -16) (undo-tree-id1633 . -16) (undo-tree-id1634 . -16) (undo-tree-id1635 . -15) (undo-tree-id1636 . -12) (undo-tree-id1637 . 3) (undo-tree-id1638 . -5) (undo-tree-id1639 . -5) (undo-tree-id1640 . -5) (undo-tree-id1641 . -5) (undo-tree-id1642 . -5) (undo-tree-id1643 . -5) (undo-tree-id1644 . -5) (undo-tree-id1645 . -5) (undo-tree-id1646 . -5) (undo-tree-id1647 . -5) (undo-tree-id1648 . -5) (undo-tree-id1649 . -5) (undo-tree-id1650 . -5) (undo-tree-id1651 . -5) (undo-tree-id1652 . -5) (undo-tree-id1653 . -5) (undo-tree-id1654 . -5) (undo-tree-id1655 . -5) (undo-tree-id1656 . -5) (undo-tree-id1657 . -5) (undo-tree-id1658 . -5) (undo-tree-id1659 . -5) (undo-tree-id1660 . -5) (undo-tree-id1661 . -5) (undo-tree-id1662 . -5) (undo-tree-id1663 . -5) (undo-tree-id1664 . -5) (undo-tree-id1665 . -5) (undo-tree-id1666 . -5) (undo-tree-id1667 . -5) (undo-tree-id1668 . -5) (undo-tree-id1669 . -5) (undo-tree-id1670 . -5) (undo-tree-id1671 . -5) (undo-tree-id1672 . -5) (undo-tree-id1673 . -5) (undo-tree-id1674 . -5) (undo-tree-id1675 . -5) (undo-tree-id1676 . -5) (undo-tree-id1677 . -5) (undo-tree-id1678 . -5) (undo-tree-id1679 . -5) (undo-tree-id1680 . -5) (undo-tree-id1681 . -5) (undo-tree-id1682 . -5) (undo-tree-id1683 . -5) (undo-tree-id1684 . -5) (undo-tree-id1685 . -5) (undo-tree-id1686 . -5) (undo-tree-id1687 . -5) (undo-tree-id1688 . -5) (undo-tree-id1689 . -5) (undo-tree-id1690 . -5) (undo-tree-id1691 . -5) (undo-tree-id1692 . -5) (undo-tree-id1693 . -5) (undo-tree-id1694 . -5) (undo-tree-id1695 . -5) (undo-tree-id1696 . -5) (undo-tree-id1697 . -5) (undo-tree-id1698 . -16) (undo-tree-id1699 . -16) (undo-tree-id1700 . -16) (undo-tree-id1701 . -8) (undo-tree-id1702 . -8) (undo-tree-id1703 . -8) (undo-tree-id1704 . -8) (undo-tree-id1705 . -8) (undo-tree-id1706 . -8) (undo-tree-id1707 . -8) (undo-tree-id1708 . -8) (undo-tree-id1709 . -8) (undo-tree-id1710 . -8) (undo-tree-id1711 . -8) (undo-tree-id1712 . -8) (undo-tree-id1713 . -8) (undo-tree-id1714 . -8) (undo-tree-id1715 . -9) (undo-tree-id1716 . -9) (undo-tree-id1717 . -9) (undo-tree-id1718 . -9) (undo-tree-id1719 . -9) (undo-tree-id1720 . -9) (undo-tree-id1721 . -9) (undo-tree-id1722 . -11) (undo-tree-id1723 . -11) (undo-tree-id1724 . -11) (undo-tree-id1725 . -11) (undo-tree-id1726 . -11) (undo-tree-id1727 . -11) (undo-tree-id1728 . -11) (undo-tree-id1729 . -11) (undo-tree-id1730 . -11) (undo-tree-id1731 . -11) (undo-tree-id1732 . -11) (undo-tree-id1733 . -11) (undo-tree-id1734 . -11) (undo-tree-id1735 . -11) (undo-tree-id1736 . -11) (undo-tree-id1737 . -11) (undo-tree-id1738 . -14) (undo-tree-id1739 . -14) (undo-tree-id1740 . -14) (undo-tree-id1741 . -14) (undo-tree-id1742 . -14) (undo-tree-id1743 . -14) (undo-tree-id1744 . -14) (undo-tree-id1745 . -15) (undo-tree-id1746 . -15) (undo-tree-id1747 . -15) (undo-tree-id1748 . -15) (undo-tree-id1749 . -15) (undo-tree-id1750 . -15) (undo-tree-id1751 . -15) (undo-tree-id1752 . -15) (undo-tree-id1753 . -15) (undo-tree-id1754 . -15) (undo-tree-id1755 . -15) (undo-tree-id1756 . -15) (undo-tree-id1757 . -15) (undo-tree-id1758 . -14) (undo-tree-id1759 . -14) (undo-tree-id1760 . -14) (undo-tree-id1761 . -14) (undo-tree-id1762 . -14) (undo-tree-id1763 . -14) (undo-tree-id1764 . -14) (undo-tree-id1765 . -12) (undo-tree-id1766 . -12) (undo-tree-id1767 . -12) (undo-tree-id1768 . -12) (undo-tree-id1769 . -12) (undo-tree-id1770 . -12) (undo-tree-id1771 . -12) (undo-tree-id1772 . -13) (undo-tree-id1773 . -13) (undo-tree-id1774 . -13) (undo-tree-id1775 . -13) (undo-tree-id1776 . -13) (undo-tree-id1777 . -13) (undo-tree-id1778 . -13) (undo-tree-id1779 . -12) (undo-tree-id1780 . -12) (undo-tree-id1781 . -12) (undo-tree-id1782 . -12) (undo-tree-id1783 . -12) (undo-tree-id1784 . -12) (undo-tree-id1785 . -12) (undo-tree-id1786 . -12) (undo-tree-id1787 . -12) (undo-tree-id1788 . -12) (undo-tree-id1789 . -12) (undo-tree-id1790 . -12) (undo-tree-id1791 . -13) (undo-tree-id1792 . -12) (undo-tree-id1793 . -12) (undo-tree-id1794 . -12) (undo-tree-id1795 . -12) (undo-tree-id1796 . -16) 1756) nil (26513 16434 342460 562000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1726 . 1727) (#("
" 0 1 (fontified nil)) . -1742) (1726 . 1743)) nil (26513 16434 342020 157000) 0 nil])
([nil nil ((1742 . 1743)) nil (26513 16434 342015 334000) 0 nil])
([nil nil ((#("C" 0 1 (face (bold) fontified t)) . -1735) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (#("o" 0 1 (face (bold) fontified t)) . -1736) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) 1737 (1735 . 1737) (#("Note:" 0 5 (face (bold) fontified t)) . 1735) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (undo-tree-id2341 . -4) (undo-tree-id2342 . -4) (undo-tree-id2343 . -5) (undo-tree-id2344 . -5) (undo-tree-id2345 . -5) 1739 (t 26513 16434 361020 813000)) nil (26513 16461 322154 131000) 0 nil])
([nil nil ((#("\\textbf{}  
" 0 7 (face font-lock-keyword-face fontified t) 7 8 (face (shadow) fontified t) 8 9 (face (shadow) fontified t) 9 11 (fontified t) 11 12 (fontified t)) . 1727) (undo-tree-id2217 . -8) (undo-tree-id2218 . -8) (undo-tree-id2219 . 4) (undo-tree-id2220 . -8) (undo-tree-id2221 . -8) (undo-tree-id2222 . -11) (undo-tree-id2223 . -7) (undo-tree-id2224 . 4) (undo-tree-id2225 . -10) (undo-tree-id2226 . -10) (undo-tree-id2227 . -10) (undo-tree-id2228 . -10) (undo-tree-id2229 . -10) (undo-tree-id2230 . -10) (undo-tree-id2231 . -10) (undo-tree-id2232 . -10) (undo-tree-id2233 . -10) (undo-tree-id2234 . -10) (undo-tree-id2235 . -10) (undo-tree-id2236 . -10) (undo-tree-id2237 . -10) (undo-tree-id2238 . -10) (undo-tree-id2239 . -10) (undo-tree-id2240 . -10) (undo-tree-id2241 . -10) (undo-tree-id2242 . -10) (undo-tree-id2243 . -10) (undo-tree-id2244 . -10) (undo-tree-id2245 . -10) (undo-tree-id2246 . -10) (undo-tree-id2247 . -10) (undo-tree-id2248 . -10) (undo-tree-id2249 . -10) (undo-tree-id2250 . -10) (undo-tree-id2251 . -10) (undo-tree-id2252 . -10) (undo-tree-id2253 . -10) (undo-tree-id2254 . -10) (undo-tree-id2255 . -10) (undo-tree-id2256 . -10) (undo-tree-id2257 . -8) (undo-tree-id2258 . -8) (undo-tree-id2259 . -8) (undo-tree-id2260 . -8) (undo-tree-id2261 . -8) (undo-tree-id2262 . -8) (undo-tree-id2263 . -8) (undo-tree-id2264 . -8) (undo-tree-id2265 . -8) (undo-tree-id2266 . -8) (undo-tree-id2267 . -8) (undo-tree-id2268 . -8) (undo-tree-id2269 . -8) (undo-tree-id2270 . -8) (undo-tree-id2271 . -8) (undo-tree-id2272 . -8) (undo-tree-id2273 . -8) (undo-tree-id2274 . -8) (undo-tree-id2275 . -8) (undo-tree-id2276 . -8) (undo-tree-id2277 . -8) (undo-tree-id2278 . -8) (undo-tree-id2279 . -8) (undo-tree-id2280 . -8) (undo-tree-id2281 . -8) (undo-tree-id2282 . -8) (undo-tree-id2283 . -8) (undo-tree-id2284 . -8) (undo-tree-id2285 . -7) (undo-tree-id2286 . -7) (undo-tree-id2287 . -7) (undo-tree-id2288 . -7) (undo-tree-id2289 . -7) (undo-tree-id2290 . -7) (undo-tree-id2291 . -7) (undo-tree-id2292 . -7) (undo-tree-id2293 . -7) (undo-tree-id2294 . -7) (undo-tree-id2295 . -7) (undo-tree-id2296 . -7) (undo-tree-id2297 . -7) (undo-tree-id2298 . -7) (undo-tree-id2299 . -7) (undo-tree-id2300 . -7) (undo-tree-id2301 . -7) (undo-tree-id2302 . -8) (undo-tree-id2303 . -7) (undo-tree-id2304 . -7) (undo-tree-id2305 . -7) (undo-tree-id2306 . -7) (undo-tree-id2307 . -12) 1734) nil (26513 16461 322138 103000) 0 nil])
([nil nil ((#("W" 0 1 (fontified t)) . -1727) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (#("e" 0 1 (fontified t)) . -1728) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) 1729 (#(" " 0 1 (fontified t)) . 1729) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) 1730 (#("say " 0 4 (fontified t)) . -1730) (undo-tree-id2097 . -4) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -2) (undo-tree-id2106 . -2) (undo-tree-id2107 . -2) (undo-tree-id2108 . -2) (undo-tree-id2109 . -2) (undo-tree-id2110 . -2) (undo-tree-id2111 . -2) (undo-tree-id2112 . -3) (undo-tree-id2113 . -3) (undo-tree-id2114 . -3) (undo-tree-id2115 . -3) (undo-tree-id2116 . -3) (undo-tree-id2117 . -3) (undo-tree-id2118 . -3) (undo-tree-id2119 . -4) (undo-tree-id2120 . -4) (undo-tree-id2121 . -4) (undo-tree-id2122 . -4) (undo-tree-id2123 . -4) (undo-tree-id2124 . -4) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) (undo-tree-id2136 . -4) (undo-tree-id2137 . -4) (undo-tree-id2138 . -4) (undo-tree-id2139 . -4) (undo-tree-id2140 . -4) (undo-tree-id2141 . -4) (undo-tree-id2142 . -4) (undo-tree-id2143 . -4) (undo-tree-id2144 . -4) (undo-tree-id2145 . -4) (undo-tree-id2146 . -4) (undo-tree-id2147 . -4) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) (undo-tree-id2151 . -4) (undo-tree-id2152 . -4) (undo-tree-id2153 . -4) (undo-tree-id2154 . -4) (undo-tree-id2155 . -4) (undo-tree-id2156 . -4) (undo-tree-id2157 . -4) (undo-tree-id2158 . -4) (undo-tree-id2159 . -4) (undo-tree-id2160 . -4) (undo-tree-id2161 . -4) (undo-tree-id2162 . -4) (undo-tree-id2163 . -4) (undo-tree-id2164 . -4) (undo-tree-id2165 . -4) (undo-tree-id2166 . -4) (undo-tree-id2167 . -4) (undo-tree-id2168 . -4) (undo-tree-id2169 . -4) (undo-tree-id2170 . -4) 1734 (#("that " 0 5 (fontified t)) . -1734) (undo-tree-id2171 . -5) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -2) (undo-tree-id2180 . -2) (undo-tree-id2181 . -2) (undo-tree-id2182 . -2) (undo-tree-id2183 . -2) (undo-tree-id2184 . -2) (undo-tree-id2185 . -2) (undo-tree-id2186 . -3) (undo-tree-id2187 . -3) (undo-tree-id2188 . -3) (undo-tree-id2189 . -3) (undo-tree-id2190 . -3) (undo-tree-id2191 . -3) (undo-tree-id2192 . -3) (undo-tree-id2193 . -4) (undo-tree-id2194 . -4) (undo-tree-id2195 . -4) (undo-tree-id2196 . -4) (undo-tree-id2197 . -4) (undo-tree-id2198 . -4) (undo-tree-id2199 . -4) (undo-tree-id2200 . -5) (undo-tree-id2201 . -5) (undo-tree-id2202 . -5) (undo-tree-id2203 . -5) (undo-tree-id2204 . -5) (undo-tree-id2205 . -5) (undo-tree-id2206 . -5) (undo-tree-id2207 . -5) (undo-tree-id2208 . -5) (undo-tree-id2209 . -5) (undo-tree-id2210 . -5) (undo-tree-id2211 . -5) (undo-tree-id2212 . -5) (undo-tree-id2213 . -5) (undo-tree-id2214 . -5) (undo-tree-id2215 . -5) (undo-tree-id2216 . -5) 1739 (1727 . 1739)) nil (26513 16461 321500 717000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1725 . 1726) (#("
" 0 1 (fontified nil)) . -1786) (1725 . 1787)) nil (26513 16461 321066 655000) 0 nil])
([nil nil ((1737 . 1741) (#("red" 0 3 (fontified t)) . 1737) (undo-tree-id1797 . -2) (undo-tree-id1798 . -2) (undo-tree-id1799 . -2) (undo-tree-id1800 . -2) (undo-tree-id1801 . -2) (undo-tree-id1802 . -2) (undo-tree-id1803 . -2) (undo-tree-id1804 . -2) (undo-tree-id1805 . -2) (undo-tree-id1806 . -2) (undo-tree-id1807 . -2) (undo-tree-id1808 . -2) (undo-tree-id1809 . -2) (undo-tree-id1810 . -3) (undo-tree-id1811 . -3) 1726) nil (26513 16461 321062 882000) 0 nil])
([nil nil ((1751 . 1760) (1743 . 1751) (#("Equivalently" 0 12 (face (ml/cyan) fontified t)) . 1743) (undo-tree-id2541 . -11) (undo-tree-id2542 . -11) (undo-tree-id2543 . -11) (undo-tree-id2544 . -11) (undo-tree-id2545 . -11) (undo-tree-id2546 . -11) (undo-tree-id2547 . -11) (undo-tree-id2548 . -11) (undo-tree-id2549 . -11) (undo-tree-id2550 . -11) (undo-tree-id2551 . -11) (undo-tree-id2552 . -11) (undo-tree-id2553 . -11) (undo-tree-id2554 . -11) (undo-tree-id2555 . -11) (undo-tree-id2556 . -11) (undo-tree-id2557 . -11) (undo-tree-id2558 . -11) (undo-tree-id2559 . -11) (undo-tree-id2560 . -11) (undo-tree-id2561 . -11) (undo-tree-id2562 . -11) (undo-tree-id2563 . -11) (undo-tree-id2564 . -11) (undo-tree-id2565 . -11) (undo-tree-id2566 . -11) (undo-tree-id2567 . -11) (undo-tree-id2568 . -11) (undo-tree-id2569 . -11) (undo-tree-id2570 . -11) (undo-tree-id2571 . -11) (undo-tree-id2572 . -11) (undo-tree-id2573 . -11) (undo-tree-id2574 . -11) (undo-tree-id2575 . -11) (undo-tree-id2576 . -11) (undo-tree-id2577 . -11) (undo-tree-id2578 . -11) (undo-tree-id2579 . -11) (undo-tree-id2580 . -12) (undo-tree-id2581 . -12) (undo-tree-id2582 . -12) 1754 (t 26513 16461 341900 411000)) nil (26513 16512 603377 607000) 0 nil])
([nil nil ((#("We conclude that" 0 16 (face (ml/cyan) fontified t)) . 1743) (undo-tree-id2409 . -15) (undo-tree-id2410 . -15) (undo-tree-id2411 . -15) (undo-tree-id2412 . -15) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (undo-tree-id2419 . -1) (undo-tree-id2420 . -2) (undo-tree-id2421 . -2) (undo-tree-id2422 . -2) (undo-tree-id2423 . -2) (undo-tree-id2424 . -2) (undo-tree-id2425 . -2) (undo-tree-id2426 . -2) (undo-tree-id2427 . -3) (undo-tree-id2428 . -3) (undo-tree-id2429 . -3) (undo-tree-id2430 . -3) (undo-tree-id2431 . -3) (undo-tree-id2432 . -3) (undo-tree-id2433 . -3) (undo-tree-id2434 . -4) (undo-tree-id2435 . -4) (undo-tree-id2436 . -4) (undo-tree-id2437 . -4) (undo-tree-id2438 . -4) (undo-tree-id2439 . -4) (undo-tree-id2440 . -4) (undo-tree-id2441 . -5) (undo-tree-id2442 . -5) (undo-tree-id2443 . -5) (undo-tree-id2444 . -5) (undo-tree-id2445 . -5) (undo-tree-id2446 . -5) (undo-tree-id2447 . -5) (undo-tree-id2448 . -6) (undo-tree-id2449 . -6) (undo-tree-id2450 . -6) (undo-tree-id2451 . -6) (undo-tree-id2452 . -6) (undo-tree-id2453 . -6) (undo-tree-id2454 . -6) (undo-tree-id2455 . -7) (undo-tree-id2456 . -7) (undo-tree-id2457 . -7) (undo-tree-id2458 . -7) (undo-tree-id2459 . -7) (undo-tree-id2460 . -7) (undo-tree-id2461 . -7) (undo-tree-id2462 . -8) (undo-tree-id2463 . -8) (undo-tree-id2464 . -8) (undo-tree-id2465 . -8) (undo-tree-id2466 . -8) (undo-tree-id2467 . -8) (undo-tree-id2468 . -8) (undo-tree-id2469 . -9) (undo-tree-id2470 . -9) (undo-tree-id2471 . -9) (undo-tree-id2472 . -9) (undo-tree-id2473 . -9) (undo-tree-id2474 . -9) (undo-tree-id2475 . -9) (undo-tree-id2476 . -10) (undo-tree-id2477 . -10) (undo-tree-id2478 . -10) (undo-tree-id2479 . -10) (undo-tree-id2480 . -10) (undo-tree-id2481 . -10) (undo-tree-id2482 . -10) (undo-tree-id2483 . -11) (undo-tree-id2484 . -11) (undo-tree-id2485 . -11) (undo-tree-id2486 . -11) (undo-tree-id2487 . -11) (undo-tree-id2488 . -11) (undo-tree-id2489 . -11) (undo-tree-id2490 . -12) (undo-tree-id2491 . -12) (undo-tree-id2492 . -12) (undo-tree-id2493 . -12) (undo-tree-id2494 . -12) (undo-tree-id2495 . -12) (undo-tree-id2496 . -12) (undo-tree-id2497 . -13) (undo-tree-id2498 . -13) (undo-tree-id2499 . -13) (undo-tree-id2500 . -13) (undo-tree-id2501 . -13) (undo-tree-id2502 . -13) (undo-tree-id2503 . -13) (undo-tree-id2504 . -14) (undo-tree-id2505 . -14) (undo-tree-id2506 . -14) (undo-tree-id2507 . -14) (undo-tree-id2508 . -14) (undo-tree-id2509 . -14) (undo-tree-id2510 . -14) (undo-tree-id2511 . -16) (undo-tree-id2512 . -16) (undo-tree-id2513 . -16) (undo-tree-id2514 . -16) (undo-tree-id2515 . -16) (undo-tree-id2516 . -16) (undo-tree-id2517 . -16) (undo-tree-id2518 . -16) (undo-tree-id2519 . -16) (undo-tree-id2520 . -16) (undo-tree-id2521 . -16) (undo-tree-id2522 . -16) (undo-tree-id2523 . -16) (undo-tree-id2524 . -16) (undo-tree-id2525 . -16) (undo-tree-id2526 . -16) (undo-tree-id2527 . -16) (undo-tree-id2528 . -16) (undo-tree-id2529 . -16) (undo-tree-id2530 . -16) (undo-tree-id2531 . -16) (undo-tree-id2532 . -16) (undo-tree-id2533 . -16) (undo-tree-id2534 . -16) (undo-tree-id2535 . -16) (undo-tree-id2536 . -16) (undo-tree-id2537 . -15) (undo-tree-id2538 . -15) (undo-tree-id2539 . -16) (undo-tree-id2540 . -16) 1758) nil (26513 16512 603358 645000) 0 nil])
([nil nil ((#(" " 0 1 (face (ml/cyan) fontified t)) . 1743) (undo-tree-id2398 . 1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1)) nil (26513 16512 602920 417000) 0 nil])
([nil nil ((1769 . 1770)) nil (26513 16512 602916 725000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1792 . 1793) (nil fontified nil 1770 . 1793) (1770 . 1793) 1769) nil (26513 16512 602916 330000) 0 nil])
([nil nil ((1784 . 1785) (#("+" 0 1 (face (ml/cyan) fontified t)) . 1784) (undo-tree-id2397 . -1)) nil (26513 16512 602915 642000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1800 . 1801) (#("
" 0 1 (fontified nil)) . -1874) (1800 . 1875)) nil (26513 16512 602914 469000) 0 nil])
([nil nil ((1832 . 1836) (1828 . 1832) (#("e" 0 1 (face (ml/cyan) fontified t)) . -1828) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) 1829 (1821 . 1829) (#("c" 0 1 (face (ml/cyan) fontified t)) . -1821) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) 1822 (#(" " 0 1 (face (ml/cyan) fontified t)) . 1822) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) 1823 (1819 . 1823) (#("W" 0 1 (face (ml/cyan) fontified t)) . -1819) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) 1820 (1819 . 1820)) nil (26513 16512 602910 697000) 0 nil])
([nil nil ((#("{" 0 1 (face (ml/cyan) fontified t)) . 1851) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (t 26513 16512 613987 861000)) nil (26513 16528 973293 822000) 0 nil])
([nil nil ((#("+" 0 1 (face (ml/cyan) fontified t)) . 1851) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1)) nil (26513 16528 973292 397000) 0 nil])
([nil nil ((#("^" 0 1 (face (ml/cyan) fontified t)) . 1850) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1)) nil (26513 16528 973290 504000) 0 nil])
([nil nil ((#("lim_{x \\to 2^{-}}f(x) =" 0 7 (fontified t) 7 10 (face font-lock-keyword-face fontified t) 10 14 (fontified t) 14 15 (fontified t) 15 22 (fontified t) 22 23 (fontified t rear-nonsticky t)) . 1859) (undo-tree-id2585 . -22) (undo-tree-id2586 . -23)) nil (26513 16528 973279 79000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 1851) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1)) nil (26513 16528 973274 441000) 0 nil])
([nil nil ((1916 . 1929) (1913 . 1916) (1911 . 1912) (1910 . 1912) (#("x" 0 1 (fontified t)) . -1910) (undo-tree-id2605 . -1) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) 1911 (1910 . 1911) (#("$" 0 1 (fontified nil)) . -1910) (undo-tree-id2608 . -1) (undo-tree-id2609 . -1) (#("$" 0 1 (fontified t)) . 1911) (1910 . 1912) (1899 . 1910) (1898 . 1899) (#("}" 0 1 (fontified nil)) . -1897) (1897 . 1898) (#("}" 0 1 (fontified nil)) . -1897) (1896 . 1898) (1894 . 1897) (1892 . 1894) (#("$" 0 1 (fontified nil)) . -1892) (undo-tree-id2610 . -1) (#("$" 0 1 (fontified t)) . 1893) (1892 . 1893) (1891 . 1892) (#(")" 0 1 (fontified nil)) . -1891) (1890 . 1892) (1889 . 1890) (1888 . 1889) (1887 . 1889) (1882 . 1887) (#("n" 0 1 (fontified t)) . -1882) (undo-tree-id2611 . -1) (undo-tree-id2612 . -1) (undo-tree-id2613 . -1) 1883 (1878 . 1883) (1866 . 1878) (1865 . 1866) (1864 . 1865) (t 26513 16528 993763 89000) 1851) nil (26513 16575 464106 555000) 0 nil])
([nil nil ((1930 . 1931) (1929 . 1930) (t 26513 16575 484336 50000)) nil (26513 16594 946831 218000) 0 nil])
([nil nil ((apply yas--snippet-revive 1933 1969 #s(yas--snippet nil nil #s(yas--exit 1952 nil) 2 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 1952 nil) 2 nil nil nil nil)) (1933 . 1969) (#("def" 0 3 (fontified t)) . 1933) (undo-tree-id2687 . -3) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -2) (undo-tree-id2696 . -2) (undo-tree-id2697 . -2) (undo-tree-id2698 . -2) (undo-tree-id2699 . -2) (undo-tree-id2700 . -2) (undo-tree-id2701 . -2) (undo-tree-id2702 . -3) (undo-tree-id2703 . -3) (undo-tree-id2704 . -3) (undo-tree-id2705 . -3) (undo-tree-id2706 . -3) (undo-tree-id2707 . -3) (undo-tree-id2708 . -3) (undo-tree-id2709 . -3) (undo-tree-id2710 . -3) (undo-tree-id2711 . -3) 1936 (1933 . 1936) (1932 . 1933) (1931 . 1932) (t 26513 16594 966088 752000) 1931) nil (26513 16707 227721 913000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2362 . 2363) (nil fontified nil 1952 . 2363) (1952 . 2363)) nil (26513 16707 227712 730000) 0 nil])
([nil nil ((apply yas--snippet-revive 2381 2417 #s(yas--snippet nil nil #s(yas--exit 2400 nil) 3 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 2400 nil) 3 nil nil nil nil)) (2381 . 2417) (#("def" 0 3 (fontified t)) . 2381) (undo-tree-id2662 . -3) (undo-tree-id2663 . -1) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -2) (undo-tree-id2671 . -2) (undo-tree-id2672 . -2) (undo-tree-id2673 . -2) (undo-tree-id2674 . -2) (undo-tree-id2675 . -2) (undo-tree-id2676 . -2) (undo-tree-id2677 . -3) (undo-tree-id2678 . -3) (undo-tree-id2679 . -3) (undo-tree-id2680 . -3) (undo-tree-id2681 . -3) (undo-tree-id2682 . -3) (undo-tree-id2683 . -3) (undo-tree-id2684 . -3) (undo-tree-id2685 . -3) (undo-tree-id2686 . -3) 2384 (2381 . 2384) (2380 . 2381) 2364) nil (26513 16707 227711 724000) 0 nil])
([nil nil ((2380 . 2381) 2364) nil (26513 16707 227700 836000) 0 nil])
([nil nil ((#("The right-hand limit of \\( f(x) \\) as \\( x \\to a \\) is defined as:
\\[
\\lim_{x \\to a^+} f(x) = L
\\]
which means that as \\( x \\) approaches \\( a \\) from the right, the function \\( f(x) \\) approaches \\( L \\).

" 0 24 (fontified t) 24 26 (face font-lock-keyword-face fontified t) 26 32 (fontified t) 32 34 (face font-lock-keyword-face fontified t) 34 38 (fontified t) 38 40 (face font-lock-keyword-face fontified t) 40 43 (fontified t) 43 46 (face font-lock-keyword-face fontified t) 46 49 (fontified t) 49 51 (face font-lock-keyword-face fontified t) 51 67 (fontified t) 67 69 (face font-lock-keyword-face fontified t) 69 70 (fontified t) 70 74 (face font-lock-keyword-face fontified t) 74 78 (fontified t) 78 81 (face font-lock-keyword-face fontified t) 81 96 (fontified t) 96 98 (face font-lock-keyword-face fontified t) 98 119 (fontified t) 119 121 (face font-lock-keyword-face fontified t) 121 124 (fontified t) 124 126 (face font-lock-keyword-face fontified t) 126 138 (fontified t) 138 140 (face font-lock-keyword-face fontified t) 140 143 (fontified t) 143 145 (face font-lock-keyword-face fontified t) 145 175 (fontified t) 175 177 (face font-lock-keyword-face fontified t) 177 183 (fontified t) 183 185 (face font-lock-keyword-face fontified t) 185 197 (fontified t) 197 199 (face font-lock-keyword-face fontified t) 199 202 (fontified t) 202 204 (face font-lock-keyword-face fontified t) 204 205 (fontified t) 205 206 (rear-nonsticky t fontified t) 206 207 (fontified t)) . 2157) (undo-tree-id2614 . -206) (undo-tree-id2615 . -206) (undo-tree-id2616 . -206) (undo-tree-id2617 . -206) (undo-tree-id2618 . -206) (undo-tree-id2619 . -206) (undo-tree-id2620 . -206) (undo-tree-id2621 . -206) (undo-tree-id2622 . -206) (undo-tree-id2623 . -206) (undo-tree-id2624 . -206) (undo-tree-id2625 . -206) (undo-tree-id2626 . -206) (undo-tree-id2627 . -206) (undo-tree-id2628 . -206) (undo-tree-id2629 . -206) (undo-tree-id2630 . -206) (undo-tree-id2631 . -206) (undo-tree-id2632 . -206) (undo-tree-id2633 . -206) (undo-tree-id2634 . -206) (undo-tree-id2635 . -206) (undo-tree-id2636 . -206) (undo-tree-id2637 . -207) (undo-tree-id2638 . -207) (undo-tree-id2639 . -207) (undo-tree-id2640 . -207) (undo-tree-id2641 . -207) (undo-tree-id2642 . -207) (undo-tree-id2643 . -207) (undo-tree-id2644 . -207) (undo-tree-id2645 . -207) (undo-tree-id2646 . -207) (undo-tree-id2647 . -207) (undo-tree-id2648 . -207) (undo-tree-id2649 . -207) (undo-tree-id2650 . -207) (undo-tree-id2651 . -67) (undo-tree-id2652 . -67) (undo-tree-id2653 . -67) (undo-tree-id2654 . -67) (undo-tree-id2655 . -206) (undo-tree-id2656 . -67) (undo-tree-id2657 . -67) (undo-tree-id2658 . -67) (undo-tree-id2659 . -206) (undo-tree-id2660 . -206) (undo-tree-id2661 . -207) 2363) nil (26513 16707 227698 811000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2194 . 2195) (#("
" 0 1 (fontified nil)) . -2401) (2194 . 2402)) nil (26513 16707 227364 108000) 0 nil])
([nil nil (1933) nil (26513 16734 172743 645000) 0 nil])
([nil nil ((1957 . 1967) (1956 . 1957) (1952 . 1956) (1951 . 1953) (t 26513 16707 248418 185000)) nil (26513 16734 172739 458000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2226 . 2227) (nil fontified nil 2210 . 2227) (2210 . 2227) 2209 (t 26513 16734 193387 737000)) nil (26513 16750 40728 41000) 0 nil])
([nil nil ((2211 . 2216) (#("Left" 0 4 (fontified t)) . 2211) (undo-tree-id2712 . -3) (undo-tree-id2713 . -3) (undo-tree-id2714 . -3) (undo-tree-id2715 . -3) (undo-tree-id2716 . -3) (undo-tree-id2717 . -3) (undo-tree-id2718 . -4) (undo-tree-id2719 . -4) (undo-tree-id2720 . -4) 2214 (t 26513 16750 62336 485000)) nil (26513 16761 444844 553000) 0 nil])
([nil nil ((2453 . 2454) (t 26513 16761 464582 250000) 2437) nil (26513 16788 475562 779000) 0 nil])
([nil nil ((2455 . 2456) (2454 . 2455) 2454) nil (26513 16788 475562 401000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2456 . 2457) (#("
" 0 1 (fontified nil rear-nonsticky t)) . -2718) (2456 . 2719)) nil (26513 16788 475561 895000) 0 nil])
([nil nil ((#("Right-Hand" 0 10 (fontified t)) . 2476) (undo-tree-id2735 . -9) (undo-tree-id2736 . -9) (undo-tree-id2737 . -9) (undo-tree-id2738 . -9) (undo-tree-id2739 . -9) (undo-tree-id2740 . -9) (undo-tree-id2741 . -10) (undo-tree-id2742 . -10) 2485) nil (26513 16788 475561 277000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2476) (undo-tree-id2732 . 1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1)) nil (26513 16788 475557 980000) 0 nil])
([nil nil ((#("right-hand" 0 10 (fontified t)) . 2488) (undo-tree-id2724 . -9) (undo-tree-id2725 . -9) (undo-tree-id2726 . -9) (undo-tree-id2727 . -9) (undo-tree-id2728 . -9) (undo-tree-id2729 . -9) (undo-tree-id2730 . -10) (undo-tree-id2731 . -10) 2497) nil (26513 16788 475555 641000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2488) (undo-tree-id2721 . 1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1)) nil (26513 16788 475548 472000) 0 nil])
([nil nil ((#("^" 0 1 (fontified t)) . -2556) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) 2557 (#("+" 0 1 (fontified t)) . -2557) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) 2558 (t 26513 16788 496087 957000)) nil (26513 16797 575218 543000) 0 nil])
([nil nil ((2628 . 2635) (#("u" 0 1 (fontified t)) . -2628) (undo-tree-id2778 . -1) (undo-tree-id2779 . -1) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (#("e" 0 1 (fontified t)) . -2629) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (#("f" 0 1 (fontified t)) . -2630) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) 2631 (2622 . 2631) (#("the" 0 3 (fontified t)) . 2622) (undo-tree-id2832 . -2) (undo-tree-id2833 . -2) (undo-tree-id2834 . -2) (undo-tree-id2835 . -2) (undo-tree-id2836 . -2) (undo-tree-id2837 . -2) (undo-tree-id2838 . -2) (undo-tree-id2839 . -2) (undo-tree-id2840 . -2) (undo-tree-id2841 . -2) (undo-tree-id2842 . -2) (undo-tree-id2843 . -3) (undo-tree-id2844 . -3) (undo-tree-id2845 . -3) 2624 (t 26513 16797 596806 382000)) nil (26513 16827 160244 53000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 2633) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1)) nil (26513 16827 160215 852000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2634 . 2635) (nil fontified nil 2634 . 2635) (2634 . 2635) 2633) nil (26513 16827 160200 578000) 0 nil])
([nil nil ((2692 . 2693) (#(" " 0 1 (fontified nil)) . 2691) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (2692 . 2693) (2687 . 2692) (#("." 0 1 (fontified t)) . -2687) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) 2688 (2685 . 2688) (#("." 0 1 (fontified t)) . -2685) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) 2686 (#(" " 0 1 (fontified t)) . 2686) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) 2687 (#("i" 0 1 (fontified t)) . -2687) (undo-tree-id2979 . -1) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) 2688 (2685 . 2688) (#("." 0 1 (fontified t)) . -2685) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) 2686 (#("
" 0 1 (fontified t)) . 2686) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) 2687 (2686 . 2687) (t 26513 16827 181774 884000) 2643) nil (26513 16864 123986 497000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2692 . 2693) (#("
" 0 1 (fontified nil)) . -2722) (2692 . 2723)) nil (26513 16864 123565 24000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2719 . 2720) (#("
" 0 1 (fontified nil)) . -2743) (2719 . 2744) 2696) nil (26513 16864 123564 561000) 0 nil])
([nil nil ((#("= L" 0 3 (fontified t)) . 2716) (undo-tree-id2911 . -2) (undo-tree-id2912 . -3) (undo-tree-id2913 . -3)) nil (26513 16864 123564 14000) 0 nil])
([nil nil ((2715 . 2716) (#(" " 0 1 (fontified nil)) . 2715) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (undo-tree-id2890 . -1) (#("
" 0 1 (fontified t rear-nonsticky t)) . -2716) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) 2715) nil (26513 16864 123561 927000) 0 nil])
([nil nil ((2716 . 2717)) nil (26513 16864 123546 926000) 0 nil])
([nil nil ((2717 . 2718)) nil (26513 16864 123546 685000) 0 nil])
([nil nil ((2711 . 2712) (2709 . 2712)) nil (26513 16864 123546 113000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t)) . -2738) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) 2739 (#(" " 0 1 (fontified t)) . 2739) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) 2740 (2738 . 2740) (2737 . 2738) (2735 . 2738)) nil (26513 16864 123542 583000) 0 nil])
([nil nil ((1931 . 1933) (t 26513 16864 145584 718000)) nil (26513 17142 148597 42000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2703 . 2704) (nil fontified nil 1933 . 2704) (1933 . 2704)) nil (26513 17142 148596 515000) 0 nil])
([nil nil ((2705 . 2706) (2704 . 2705) 2703) nil (26513 17142 148592 605000) 0 nil])
([nil nil ((#("section" 0 7 (face font-lock-keyword-face fontified t)) . 1934) (undo-tree-id3043 . -6) (undo-tree-id3044 . -6) (undo-tree-id3045 . -6) (undo-tree-id3046 . -6) (undo-tree-id3047 . -6) (undo-tree-id3048 . -6) (undo-tree-id3049 . -7) (undo-tree-id3050 . -7) 1940 (t 26513 17142 169471 760000)) nil (26513 17154 104217 445000) 0 nil])
([nil nil ((1936 . 1940) (1934 . 1936) (#("*" 0 1 (face font-lock-keyword-face fontified t)) . 1934) (undo-tree-id3039 . 1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1)) nil (26513 17154 104210 658000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field nil 1951 1958 nil nil nil nil nil)) nil 4 nil #s(yas--field nil 1951 1958 nil nil nil nil nil) nil nil)) (1949 . 1951) (1933 . 1971) (#("exm" 0 3 (fontified t)) . 1933) (undo-tree-id3091 . -3) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -2) (undo-tree-id3100 . -2) (undo-tree-id3101 . -2) (undo-tree-id3102 . -2) (undo-tree-id3103 . -2) (undo-tree-id3104 . -2) (undo-tree-id3105 . -2) (undo-tree-id3106 . -3) (undo-tree-id3107 . -3) (undo-tree-id3108 . -3) (undo-tree-id3109 . -3) (undo-tree-id3110 . -3) (undo-tree-id3111 . -3) (undo-tree-id3112 . -3) (undo-tree-id3113 . -3) (undo-tree-id3114 . -3) (undo-tree-id3115 . -3) 1936 (1933 . 1936) (1932 . 1933) (t 26513 17154 125418 637000) 1932) nil (26513 17224 836611 89000) 0 nil])
([nil nil ((apply yas--snippet-revive 1933 1973 #s(yas--snippet nil (#s(yas--field nil 1951 1958 nil nil nil nil nil)) nil 4 nil #s(yas--field nil 1951 1958 nil nil nil nil nil) nil nil))) nil (26513 17224 836595 559000) 0 nil])
([nil nil ((#("  example
" 0 10 (fontified t)) . 1949) (undo-tree-id3057 . -9) (undo-tree-id3058 . -1) (undo-tree-id3059 . 8) (undo-tree-id3060 . -2) (undo-tree-id3061 . -2) (undo-tree-id3062 . -2) (undo-tree-id3063 . -2) (undo-tree-id3064 . -2) (undo-tree-id3065 . -2) (undo-tree-id3066 . -2) (undo-tree-id3067 . -2) (undo-tree-id3068 . -2) (undo-tree-id3069 . -2) (undo-tree-id3070 . -2) (undo-tree-id3071 . -2) (undo-tree-id3072 . -2) (undo-tree-id3073 . -2) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (undo-tree-id3090 . -10) 1950) nil (26513 17224 836594 297000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1951 . 1952) (#("
" 0 1 (fontified nil)) . -2075) (1949 . 2076)) nil (26513 17224 836577 966000) 0 nil])
([nil nil ((#("In mathematical notation $f(x) \\to ?$ when $x \\to 2$" 0 25 (fontified t) 25 27 (fontified t) 27 29 (fontified t) 29 31 (fontified t) 31 34 (face font-lock-keyword-face fontified t) 34 36 (fontified t) 36 43 (fontified t) 43 46 (fontified t) 46 49 (face font-lock-keyword-face fontified t) 49 51 (fontified t) 51 52 (fontified t)) . 2023) (undo-tree-id3054 . -51) (undo-tree-id3055 . -52) (undo-tree-id3056 . -52)) nil (26513 17224 836577 111000) 0 nil])
([nil nil ((1976 . 1978) (#("}" 0 1 (fontified nil)) . -1975) (1975 . 1976) (#("}" 0 1 (face (shadow) fontified nil)) . -1975) (1975 . 1976) (1974 . 1976)) nil (26513 17224 836574 403000) 0 nil])
([nil nil ((#("}" 0 1 (face (shadow) fontified t)) . 1977) (undo-tree-id3051 . 1) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1)) nil (26513 17224 836573 109000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1982 . 1983) (nil fontified nil 1982 . 1983) (1982 . 1983) 1981) nil (26513 17224 836561 232000) 0 nil])
([nil nil ((1975 . 1979) (1974 . 1975)) nil (26513 17224 836560 623000) 0 nil])
([nil nil ((1984 . 1985) (1982 . 1985) (1981 . 1982) (1980 . 1981)) nil (26513 17224 836559 662000) 0 nil])
([nil nil ((1981 . 1982)) nil (26513 17224 836554 873000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 1981) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (t 26513 17224 857051 735000)) nil (26513 17241 487698 140000) 0 nil])
([nil nil ((1990 . 1991) (1988 . 1991) (1987 . 1988) (1986 . 1987) (#("2" 0 1 (fontified t)) . -1986) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) 1987 (1986 . 1987)) nil (26513 17241 487696 779000) 0 nil])
([nil nil ((1987 . 1988)) nil (26513 17241 487690 430000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 1980) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1)) nil (26513 17241 487686 663000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . 1996) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (t 26513 17241 507953 860000)) nil (26513 17258 245990 301000) 0 nil])
([nil nil ((#("2" 0 1 (fontified t)) . 1996) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1)) nil (26513 17258 245987 979000) 0 nil])
([nil nil ((1996 . 1997) (1995 . 1996) (#("^" 0 1 (fontified t)) . 1995) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1)) nil (26513 17258 245982 632000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1997 . 1998) (nil fontified nil 1974 . 1998) (1974 . 1998) (#("\\frac{x^{3}-2x^{2}}{x-2}}" 0 5 (face font-lock-keyword-face fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 14 (fontified t) 14 15 (fontified t) 15 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t) 23 24 (fontified t) 24 25 (rear-nonsticky t fontified t)) . 1974) (undo-tree-id3172 . -25) (undo-tree-id3173 . -24) (undo-tree-id3174 . -24) (undo-tree-id3175 . -25) (undo-tree-id3176 . 2) (undo-tree-id3177 . -24) (undo-tree-id3178 . -21) (undo-tree-id3179 . -21) (undo-tree-id3180 . -21) (undo-tree-id3181 . -21) (undo-tree-id3182 . -21) (undo-tree-id3183 . -21) (undo-tree-id3184 . -21) (undo-tree-id3185 . -21) (undo-tree-id3186 . -21) (undo-tree-id3187 . -21) (undo-tree-id3188 . -21) (undo-tree-id3189 . -21) (undo-tree-id3190 . -22) (undo-tree-id3191 . -22) (undo-tree-id3192 . -22) (undo-tree-id3193 . -22) (undo-tree-id3194 . -22) (undo-tree-id3195 . -22) (undo-tree-id3196 . -22) (undo-tree-id3197 . -22) (undo-tree-id3198 . -22) (undo-tree-id3199 . -22) (undo-tree-id3200 . -22) (undo-tree-id3201 . -22) (undo-tree-id3202 . -22) (undo-tree-id3203 . -22) (undo-tree-id3204 . -22) (undo-tree-id3205 . -22) (undo-tree-id3206 . -22) (undo-tree-id3207 . -22) (undo-tree-id3208 . -22) (undo-tree-id3209 . -22) (undo-tree-id3210 . -22) (undo-tree-id3211 . -24) (undo-tree-id3212 . -22) (undo-tree-id3213 . -24) (undo-tree-id3214 . -25) (undo-tree-id3215 . -25) 1999 (t 26513 17258 265851 499000)) nil (26513 17277 21426 364000) 0 nil])
([nil nil ((1998 . 1999)) nil (26513 17277 21396 63000) 0 nil])
([nil nil ((#("of" 0 2 (fontified t)) . 1963) (undo-tree-id3216 . -1) (undo-tree-id3217 . -1) (undo-tree-id3218 . -1) (undo-tree-id3219 . -1) (undo-tree-id3220 . -1) (undo-tree-id3221 . -1) (undo-tree-id3222 . -2) (undo-tree-id3223 . -2) (undo-tree-id3224 . -2) 1964 (t 26513 17277 42732 519000)) nil (26513 17296 487806 324000) 0 nil])
([nil nil ((#("of " 0 3 (fontified t)) . 570) (undo-tree-id3225 . -2) (undo-tree-id3226 . -3) (t 26513 17296 499604 772000)) nil (26513 17308 611973 599000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 1946) (undo-tree-id3230 . -1) (t 26513 17308 632522 964000)) nil (26513 17335 859140 785000) 0 nil])
([nil nil ((#("  " 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t)) . 1946) (undo-tree-id3227 . -1) (undo-tree-id3228 . -2) (undo-tree-id3229 . -2)) nil (26513 17335 859136 323000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 2033) (undo-tree-id3231 . -2) (undo-tree-id3232 . -3) (t 26513 17335 880333 671000)) nil (26513 17338 738069 431000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2320 . 2321) (#("
" 0 1 (fontified nil)) . -2327) (2320 . 2328) 2307 (t 26513 17338 758313 251000)) nil (26513 17366 858278 37000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2344 . 2345) (#("
" 0 1 (fontified nil)) . -2351) (2344 . 2352) 2328) nil (26513 17366 858277 380000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2371 . 2372) (#("
" 0 1 (fontified nil)) . -2378) (2371 . 2379) 2352) nil (26513 17366 858276 646000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2401 . 2402) (#("
" 0 1 (fontified nil)) . -2408) (2401 . 2409) 2379) nil (26513 17366 858272 633000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2735 . 2736) (#("
" 0 1 (fontified nil)) . -2742) (2735 . 2743) 2722 (t 26513 17366 879109 760000)) nil (26513 17375 236732 429000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2759 . 2760) (#("
" 0 1 (fontified nil)) . -2766) (2759 . 2767) 2743) nil (26513 17375 236731 760000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2786 . 2787) (#("
" 0 1 (fontified nil)) . -2793) (2786 . 2794) 2767) nil (26513 17375 236730 981000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2816 . 2817) (#("
" 0 1 (fontified nil)) . -2823) (2816 . 2824) 2794) nil (26513 17375 236725 787000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2458 . 2459) (#("
" 0 1 (fontified nil)) . -2584) (2458 . 2585) (t 26513 17375 258047 804000)) nil (26513 17448 293931 196000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2999 . 3000) (#("
" 0 1 (fontified nil)) . -3126) (2999 . 3127)) nil (26513 17448 293926 437000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3127 . 3128) (#("
" 0 1 (fontified nil)) . -3333) (3127 . 3334) (t 26513 17448 316485 238000)) nil (26513 17461 129649 256000) 0 nil])
([nil nil ((#("
" 0 1 (rear-nonsticky t fontified t)) . 3127) (undo-tree-id3242 . -1) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (t 26513 17461 152382 735000)) nil (26513 17471 576256 665000) 0 nil])
([nil nil ((2590 . 2592) (2586 . 2590) (#("section*" 0 8 (face font-lock-keyword-face fontified t)) . 2586) (undo-tree-id3233 . -7) (undo-tree-id3234 . -7) (undo-tree-id3235 . -7) (undo-tree-id3236 . -7) (undo-tree-id3237 . -7) (undo-tree-id3238 . -7) (undo-tree-id3239 . -8) (undo-tree-id3240 . -8) (undo-tree-id3241 . -8) 2593) nil (26513 17471 576079 965000) 0 nil])
([nil nil ((2523 . 2524) (t 26513 17471 597298 615000) 2523) nil (26513 17497 828145 72000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3331 . 3332) (#("
" 0 1 (fontified nil)) . -3448) (3331 . 3449) (t 26513 17497 849084 551000)) nil (26513 17550 494057 539000) 0 nil])
([nil nil ((3353 . 3362) (3348 . 3353) (#("T" 0 1 (fontified t)) . -3348) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) 3349 (3348 . 3349) (#("What value" 0 10 (fontified t)) . 3348) (undo-tree-id3282 . -9) (undo-tree-id3283 . -9) (undo-tree-id3284 . -9) (undo-tree-id3285 . -9) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (undo-tree-id3293 . -9) (undo-tree-id3294 . -9) (undo-tree-id3295 . -10) (undo-tree-id3296 . -10) (undo-tree-id3297 . -10) 3357 (t 26513 17550 516644 924000)) nil (26513 17581 371697 729000) 0 nil])
([nil nil ((3362 . 3365)) nil (26513 17581 371515 473000) 0 nil])
([nil nil ((#("approaches " 0 11 (fontified t)) . 3402) (undo-tree-id3269 . -10) (undo-tree-id3270 . -11)) nil (26513 17581 371515 51000) 0 nil])
([nil nil ((#("to" 0 2 (fontified t)) . 3402) (undo-tree-id3267 . -1) (undo-tree-id3268 . -2)) nil (26513 17581 371513 784000) 0 nil])
([nil nil ((#(", " 0 2 (fontified t)) . 3402) (undo-tree-id3265 . -1) (undo-tree-id3266 . -2)) nil (26513 17581 371511 936000) 0 nil])
([nil nil ((3353 . 3367)) nil (26513 17581 371498 411000) 0 nil])
([nil nil ((#("approaches to" 0 10 (fontified t) 10 13 (fontified t)) . 3423) (undo-tree-id3305 . -12) (undo-tree-id3306 . -12) (undo-tree-id3307 . -12) (undo-tree-id3308 . -12) (undo-tree-id3309 . -12) (undo-tree-id3310 . -12) (undo-tree-id3311 . -13) (undo-tree-id3312 . -13) (undo-tree-id3313 . -13) 3435 (t 26513 17581 393381 728000)) nil (26513 17601 942872 101000) 0 nil])
([nil nil ((3421 . 3423)) nil (26513 17601 942866 810000) 0 nil])
([nil nil ((#("$" 0 1 (fontified t)) . 3422) (undo-tree-id3302 . 1) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1)) nil (26513 17601 942862 798000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3427 . 3428) (nil fontified nil 3427 . 3428) (3427 . 3428) 3426) nil (26513 17601 942860 972000) 0 nil])
([nil nil ((3425 . 3427) (3424 . 3425) (3423 . 3424)) nil (26513 17601 942860 300000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . 3430) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1)) nil (26513 17601 942857 64000) 0 nil])
([nil nil ((3435 . 3437) (#("  " 0 2 (fontified nil)) . 3434) (undo-tree-id3314 . -2) (undo-tree-id3315 . -2) (undo-tree-id3316 . -2) (undo-tree-id3317 . -2) (undo-tree-id3318 . -2) (undo-tree-id3319 . -2) (undo-tree-id3320 . -2) (undo-tree-id3321 . -2) (undo-tree-id3322 . -2) (undo-tree-id3323 . -2) (undo-tree-id3324 . -2) (undo-tree-id3325 . -2) (undo-tree-id3326 . -2) (undo-tree-id3327 . -2) (undo-tree-id3328 . -2) (undo-tree-id3329 . -2) (undo-tree-id3330 . -2) (3434 . 3437) (3348 . 3350) (3431 . 3432) (t 26513 17601 963204 435000)) nil (26513 17620 358626 190000) 0 nil])
([nil nil ((3453 . 3454) (t 26513 17620 379044 499000) 3453) nil (26513 17688 802734 280000) 0 nil])
([nil nil ((3454 . 3455) (3453 . 3454) 3453) nil (26513 17688 802733 523000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4201 . 4202) (nil fontified nil 3454 . 4202) (3454 . 4202)) nil (26513 17688 802728 892000) 0 nil])
([nil nil ((3462 . 3470) (3461 . 3463) (3455 . 3461) (3454 . 3455) (#("g" 0 1 (fontified t)) . -3454) (undo-tree-id3331 . -1) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) (undo-tree-id3334 . -1) (undo-tree-id3335 . -1) (undo-tree-id3336 . -1) (undo-tree-id3337 . -1) (undo-tree-id3338 . -1) (undo-tree-id3339 . -1) (undo-tree-id3340 . -1) (undo-tree-id3341 . -1) 3455 (3454 . 3455) (3453 . 3454) (t 26513 17688 824441 343000) 3453) nil (26513 17707 693899 424000) 0 nil])
([nil nil ((#("The left-hand limit of \\( f(x) = \\frac{x^3 - 2x^2}{x - 2} \\) as \\( x \\to 2 \\) is defined as:
\\[
\\lim_{x \\to 2^-} \\frac{x^3 - 2x^2}{x - 2}
\\]

The right-hand limit of \\( f(x) = \\frac{x^3 - 2x^2}{x - 2} \\) as \\( x \\to 2 \\) is defined as:
\\[
\\lim_{x \\to 2^+} \\frac{x^3 - 2x^2}{x - 2}
" 0 23 (fontified t) 23 25 (face font-lock-keyword-face fontified t) 25 33 (fontified t) 33 38 (face font-lock-keyword-face fontified t) 38 58 (fontified t) 58 60 (face font-lock-keyword-face fontified t) 60 64 (fontified t) 64 66 (face font-lock-keyword-face fontified t) 66 69 (fontified t) 69 72 (face font-lock-keyword-face fontified t) 72 75 (fontified t) 75 77 (face font-lock-keyword-face fontified t) 77 93 (fontified t) 93 95 (face font-lock-keyword-face fontified t) 95 96 (fontified t) 96 100 (face font-lock-keyword-face fontified t) 100 104 (fontified t) 104 107 (face font-lock-keyword-face fontified t) 107 113 (fontified t) 113 118 (face font-lock-keyword-face fontified t) 118 138 (fontified t) 138 140 (face font-lock-keyword-face fontified t) 140 166 (fontified t) 166 168 (face font-lock-keyword-face fontified t) 168 176 (fontified t) 176 181 (face font-lock-keyword-face fontified t) 181 201 (fontified t) 201 203 (face font-lock-keyword-face fontified t) 203 207 (fontified t) 207 209 (face font-lock-keyword-face fontified t) 209 212 (fontified t) 212 215 (face font-lock-keyword-face fontified t) 215 218 (fontified t) 218 220 (face font-lock-keyword-face fontified t) 220 236 (fontified t) 236 238 (face font-lock-keyword-face fontified t) 238 239 (fontified t) 239 243 (face font-lock-keyword-face fontified t) 243 247 (fontified t) 247 250 (face font-lock-keyword-face fontified t) 250 256 (fontified t) 256 261 (face font-lock-keyword-face fontified t) 261 281 (fontified t)) . 3473) (undo-tree-id3356 . -239) (undo-tree-id3357 . -239) (undo-tree-id3358 . -280) (undo-tree-id3359 . -239) (undo-tree-id3360 . -78) (undo-tree-id3361 . -78) (undo-tree-id3362 . -78) (undo-tree-id3363 . -78) (undo-tree-id3364 . -78) (undo-tree-id3365 . -78) (undo-tree-id3366 . -78) (undo-tree-id3367 . -78) (undo-tree-id3368 . -78) (undo-tree-id3369 . -78) (undo-tree-id3370 . -78) (undo-tree-id3371 . -78) (undo-tree-id3372 . -78) (undo-tree-id3373 . -78) (undo-tree-id3374 . -78) (undo-tree-id3375 . -78) (undo-tree-id3376 . -78) (undo-tree-id3377 . -78) (undo-tree-id3378 . -78) (undo-tree-id3379 . -78) (undo-tree-id3380 . -78) (undo-tree-id3381 . -78) (undo-tree-id3382 . -78) (undo-tree-id3383 . -78) (undo-tree-id3384 . -78) (undo-tree-id3385 . -78) (undo-tree-id3386 . -78) (undo-tree-id3387 . -78) (undo-tree-id3388 . -78) (undo-tree-id3389 . -78) (undo-tree-id3390 . -78) (undo-tree-id3391 . -78) (undo-tree-id3392 . -78) (undo-tree-id3393 . -78) (undo-tree-id3394 . -78) (undo-tree-id3395 . -78) (undo-tree-id3396 . -78) (undo-tree-id3397 . -78) (undo-tree-id3398 . -78) (undo-tree-id3399 . -78) (undo-tree-id3400 . -93) (undo-tree-id3401 . -93) (undo-tree-id3402 . -93) (undo-tree-id3403 . -93) (undo-tree-id3404 . -93) (undo-tree-id3405 . -93) (undo-tree-id3406 . -93) (undo-tree-id3407 . -78) (undo-tree-id3408 . -78) (undo-tree-id3409 . -78) (undo-tree-id3410 . -78) (undo-tree-id3411 . -78) (undo-tree-id3412 . -239) (undo-tree-id3413 . -78) (undo-tree-id3414 . -78) (undo-tree-id3415 . -78) (undo-tree-id3416 . -239) (undo-tree-id3417 . -239) (undo-tree-id3418 . -281) 3712 (t 26513 17707 717272 746000)) nil (26513 17746 756991 342000) 0 nil])
([nil nil ((3481 . 3483) (3477 . 3481) (#("To" 0 2 (fontified t)) . 3477) (undo-tree-id3420 . -1) (undo-tree-id3421 . -1) (undo-tree-id3422 . -1) (undo-tree-id3423 . -1) (undo-tree-id3424 . -1) (undo-tree-id3425 . -1) (undo-tree-id3426 . -2) (undo-tree-id3427 . -2) (undo-tree-id3428 . -2) 3478) nil (26513 17752 1280 653000) 0 nil] [nil nil ((#("\\]
" 0 2 (face font-lock-keyword-face fontified t) 2 3 (fontified t)) . 3473) (undo-tree-id3351 . 3) (undo-tree-id3352 . -2) (undo-tree-id3353 . -2) (undo-tree-id3354 . -2) (undo-tree-id3355 . -3)) ((3473 . 3476)) (26513 17746 702899 350000) 0 nil])
([nil nil ((3524 . 3525) (#(" " 0 1 (fontified nil)) . -3524) (3523 . 3524) (t 26513 17752 21874 366000)) nil (26513 17756 979816 663000) 0 nil])
([nil nil ((3474 . 3480) (#("To simplify" 0 11 (fontified t)) . 3474) (undo-tree-id3342 . -10) (undo-tree-id3343 . -10) (undo-tree-id3344 . -10) (undo-tree-id3345 . -10) (undo-tree-id3346 . -10) (undo-tree-id3347 . -10) (undo-tree-id3348 . -11) (undo-tree-id3349 . -11) (undo-tree-id3350 . -11) 3484) ((3474 . 3485) (#("We can" 0 6 (fontified t)) . 3474) (undo-tree-id3419 . -6)) (26513 17746 702724 24000) 0 nil])
([nil nil ((#("we " 0 3 (fontified t)) . 3525) (undo-tree-id3432 . -2) (undo-tree-id3433 . 3) (undo-tree-id3434 . -3)) nil (26513 17756 979814 832000) 0 nil])
nil
([nil nil ((#("can " 0 4 (fontified t)) . 3525) (undo-tree-id3429 . -3) (undo-tree-id3430 . 4) (undo-tree-id3431 . -4)) nil (26513 17756 979805 150000) 0 nil])
([nil nil ((3525 . 3528) (t 26513 17756 999829 363000)) nil (26513 17762 507 819000) 0 nil])
([nil nil ((3534 . 3537)) nil (26513 17762 507 299000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3524) (undo-tree-id3435 . -1) (undo-tree-id3436 . -1) (undo-tree-id3437 . -1) (undo-tree-id3438 . -1) (undo-tree-id3439 . -1) (undo-tree-id3440 . -1) (undo-tree-id3441 . -1) (undo-tree-id3442 . -1) (undo-tree-id3443 . -1) (undo-tree-id3444 . -1) (undo-tree-id3445 . -1) (undo-tree-id3446 . -1) (undo-tree-id3447 . -1) (undo-tree-id3448 . -1) (undo-tree-id3449 . -1) (undo-tree-id3450 . -1) (undo-tree-id3451 . -1) (undo-tree-id3452 . -1) (undo-tree-id3453 . -1) (undo-tree-id3454 . -1) (undo-tree-id3455 . -1) (undo-tree-id3456 . -1) (undo-tree-id3457 . -1) (undo-tree-id3458 . -1)) nil (26513 17762 503 762000) 0 nil])
([nil nil ((3640 . 3641) (3639 . 3640) (t 26513 17762 21783 917000) 3590) nil (26513 17810 563543 314000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3641 . 3642) (#("
" 0 1 (fontified nil)) . 3679) (3641 . 3680)) ((#("
\\[
f(x) = \\frac{x^2(x - 2)}{x - 2}
\\]
" 0 1 (rear-nonsticky nil fontified nil) 1 3 (face font-lock-keyword-face fontified nil) 3 4 (fontified nil) 4 11 (fontified t) 11 16 (face font-lock-keyword-face fontified t) 16 36 (fontified t) 36 38 (face font-lock-keyword-face fontified nil) 38 39 (fontified nil)) . 3641) (undo-tree-id3459 . -1) (undo-tree-id3460 . -1) (undo-tree-id3461 . -38) (undo-tree-id3462 . -1) (undo-tree-id3463 . -1) (undo-tree-id3464 . -1) (undo-tree-id3465 . -1) (undo-tree-id3466 . -1) (undo-tree-id3467 . -1) (undo-tree-id3468 . -1) (undo-tree-id3469 . -1) (undo-tree-id3470 . -1) (undo-tree-id3471 . -1) (undo-tree-id3472 . -1) (undo-tree-id3473 . -1) (undo-tree-id3474 . -1) (undo-tree-id3475 . -1) (undo-tree-id3476 . -1) (undo-tree-id3477 . -1) (undo-tree-id3478 . -1) (undo-tree-id3479 . -1) (undo-tree-id3480 . -1) (undo-tree-id3481 . -1) (undo-tree-id3482 . -1) (undo-tree-id3483 . -1) (undo-tree-id3484 . -1) (undo-tree-id3485 . -1) (undo-tree-id3486 . -1) (undo-tree-id3487 . -1) (undo-tree-id3488 . -1) (undo-tree-id3489 . -1) (undo-tree-id3490 . -1) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (undo-tree-id3493 . -1) (undo-tree-id3494 . -1) (undo-tree-id3495 . -1) (undo-tree-id3496 . -1) (undo-tree-id3497 . -1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3508 . -1) (undo-tree-id3509 . -1) (undo-tree-id3510 . -1) (undo-tree-id3511 . -1) (undo-tree-id3512 . -1) (undo-tree-id3513 . -1) (undo-tree-id3514 . -1) (undo-tree-id3515 . -1) (undo-tree-id3516 . -1) (undo-tree-id3517 . -1) (undo-tree-id3518 . -1) (undo-tree-id3519 . -1) (undo-tree-id3520 . -1) (undo-tree-id3521 . -1) (undo-tree-id3522 . -1) (undo-tree-id3523 . -1) (undo-tree-id3524 . -1) (undo-tree-id3525 . -1) (undo-tree-id3526 . -1) (undo-tree-id3527 . -1) (undo-tree-id3528 . -1) (undo-tree-id3529 . -1) (undo-tree-id3530 . -1) (undo-tree-id3531 . -1) (undo-tree-id3532 . -1) (undo-tree-id3533 . -1) (undo-tree-id3534 . -1) (undo-tree-id3535 . -1) (undo-tree-id3536 . -1) (undo-tree-id3537 . -1) (undo-tree-id3538 . -1) (undo-tree-id3539 . -1) (undo-tree-id3540 . -1) (undo-tree-id3541 . -1) (undo-tree-id3542 . -1) (undo-tree-id3543 . -1) (undo-tree-id3544 . -1) (undo-tree-id3545 . -1) (undo-tree-id3546 . -1) (undo-tree-id3547 . -1) (undo-tree-id3548 . -1) (undo-tree-id3549 . -1) (undo-tree-id3550 . -1) (undo-tree-id3551 . -1) (undo-tree-id3552 . -1) (undo-tree-id3553 . -1) (undo-tree-id3554 . -1) (undo-tree-id3555 . -1) (undo-tree-id3556 . -1) (undo-tree-id3557 . -1) (undo-tree-id3558 . -1) (undo-tree-id3559 . -1) (undo-tree-id3560 . -1) (undo-tree-id3561 . -1) (undo-tree-id3562 . -1) (undo-tree-id3563 . -1) (undo-tree-id3564 . -1) (undo-tree-id3565 . -1) (undo-tree-id3566 . -1) (undo-tree-id3567 . -1) (undo-tree-id3568 . -1) (undo-tree-id3569 . -1) (undo-tree-id3570 . -1) (undo-tree-id3571 . -1) (undo-tree-id3572 . -1) (undo-tree-id3573 . -1) (undo-tree-id3574 . -1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3577 . -1) (undo-tree-id3578 . -1) (undo-tree-id3579 . -1) (undo-tree-id3580 . -1) (undo-tree-id3581 . -1) (undo-tree-id3582 . -1) (undo-tree-id3583 . -1) (undo-tree-id3584 . -1) (undo-tree-id3585 . -1) (undo-tree-id3586 . -1) (undo-tree-id3587 . -1) (undo-tree-id3588 . -1) (undo-tree-id3589 . -1) (undo-tree-id3590 . -1) (undo-tree-id3591 . -1) (undo-tree-id3592 . -1) (undo-tree-id3593 . -1) (undo-tree-id3594 . -1) (undo-tree-id3595 . -1) (undo-tree-id3596 . -1) (undo-tree-id3597 . -1) (undo-tree-id3598 . -1) (undo-tree-id3599 . -1) (undo-tree-id3600 . -1) (undo-tree-id3601 . -1) (undo-tree-id3602 . -1) (undo-tree-id3603 . -1) (undo-tree-id3604 . -1) (undo-tree-id3605 . -1) (undo-tree-id3606 . -1) (undo-tree-id3607 . -1) (undo-tree-id3608 . -1) (undo-tree-id3609 . -1) (undo-tree-id3610 . -1) (undo-tree-id3611 . -1) (undo-tree-id3612 . -1) (undo-tree-id3613 . -1) (undo-tree-id3614 . -1) (undo-tree-id3615 . -1) (undo-tree-id3616 . -1) (undo-tree-id3617 . -1) (undo-tree-id3618 . -1) (undo-tree-id3619 . -1) (undo-tree-id3620 . -1) (undo-tree-id3621 . -1) (undo-tree-id3622 . -1) (undo-tree-id3623 . -1) (undo-tree-id3624 . -1) (undo-tree-id3625 . -1) (undo-tree-id3626 . -1) (undo-tree-id3627 . -1) (undo-tree-id3628 . -1) (undo-tree-id3629 . -1) (undo-tree-id3630 . -1) (undo-tree-id3631 . -1) (undo-tree-id3632 . -1) (undo-tree-id3633 . -1) (undo-tree-id3634 . -1) (undo-tree-id3635 . -1) (undo-tree-id3636 . -1) (undo-tree-id3637 . -1) (undo-tree-id3638 . -1) (undo-tree-id3639 . -1) (undo-tree-id3640 . -1) (undo-tree-id3641 . -1) (undo-tree-id3642 . -1) (undo-tree-id3643 . -1) (undo-tree-id3644 . -1) (undo-tree-id3645 . -1) (undo-tree-id3646 . -1) (undo-tree-id3647 . -1) (undo-tree-id3648 . -1) (undo-tree-id3649 . -1) (undo-tree-id3650 . -1) (undo-tree-id3651 . -1) (undo-tree-id3652 . -1) (undo-tree-id3653 . -1) (undo-tree-id3654 . -1) (undo-tree-id3655 . -1) (undo-tree-id3656 . -1) (undo-tree-id3657 . -1) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1) (undo-tree-id3662 . -1) (undo-tree-id3663 . -1) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1) (3679 . 3680) (nil rear-nonsticky t 3641 . 3642) (t 26513 17786 959557 590000)) (26513 17850 345502 577000) 0 nil])
([nil nil ((#("]" 0 1 (face font-lock-keyword-face fontified t)) . 3474) (undo-tree-id3771 . -1) (undo-tree-id3772 . -1) (t 26513 17851 476967 578000)) nil (26513 17857 520282 48000) 0 nil] [nil nil ((3663 . 3669) (3662 . 3663) (3661 . 3662) (t 26513 17786 959557 590000)) ((#(" " 0 1 (fontified nil)) . 3661) (undo-tree-id3730 . -1) (undo-tree-id3731 . -1) (undo-tree-id3732 . -1) (undo-tree-id3733 . -1) (undo-tree-id3734 . -1) (undo-tree-id3735 . -1) (undo-tree-id3736 . -1) (undo-tree-id3737 . -1) (undo-tree-id3738 . -1) (undo-tree-id3739 . -1) (#("\\" 0 1 (face font-lock-keyword-face fontified nil)) . 3662) (undo-tree-id3740 . -1) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) (undo-tree-id3743 . -1) (undo-tree-id3744 . -1) (undo-tree-id3745 . -1) (undo-tree-id3746 . -1) (undo-tree-id3747 . -1) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (#("cancel" 0 4 (face font-lock-keyword-face fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t)) . 3663) (undo-tree-id3750 . -6) (undo-tree-id3751 . -6) (undo-tree-id3752 . -4) (undo-tree-id3753 . -4) (undo-tree-id3754 . -6) (undo-tree-id3755 . -6) (undo-tree-id3756 . -6) (undo-tree-id3757 . -6) (undo-tree-id3758 . -6) (undo-tree-id3759 . -6)) (26513 17849 906701 283000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . 3473) (undo-tree-id3760 . -1) (undo-tree-id3761 . -1) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1) (undo-tree-id3770 . -1)) nil (26513 17857 520278 380000) 0 nil])
([nil nil ((3669 . 3671)) ((#("{}" 0 1 (face (shadow) fontified t) 1 2 (face (shadow) fontified t)) . 3669) (undo-tree-id3724 . -1) (undo-tree-id3725 . -1) (undo-tree-id3726 . 1) (undo-tree-id3727 . -1) (undo-tree-id3728 . -1) (undo-tree-id3729 . -1)) (26513 17849 481929 87000) 0 nil] [nil nil ((3667 . 3668) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . 3667) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1) (undo-tree-id3699 . -1) (undo-tree-id3700 . -1) (undo-tree-id3701 . -1) (undo-tree-id3702 . -1) (undo-tree-id3703 . -1) (undo-tree-id3704 . -1) (undo-tree-id3705 . -1) (undo-tree-id3706 . -1) (undo-tree-id3707 . -1) (undo-tree-id3708 . -1) (undo-tree-id3709 . -1) (undo-tree-id3710 . -1) (undo-tree-id3711 . -1) (undo-tree-id3712 . -1) (undo-tree-id3713 . -1) (undo-tree-id3714 . -1) (undo-tree-id3715 . -1) (undo-tree-id3716 . -1) (undo-tree-id3717 . -1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -1) (undo-tree-id3720 . -1) (t 26513 17826 618195 614000)) ((3667 . 3668) (#("a" 0 1 (face font-lock-keyword-face fontified t)) . 3667) (t 26513 17830 802157 292000)) (26513 17830 780175 290000) 0 nil])
([nil nil ((3667 . 3669) (3662 . 3667) (3661 . 3662) (3660 . 3661) (3659 . 3660) (t 26513 17857 541911 821000)) nil (26513 17871 525602 895000) 0 nil])
([nil nil ((#("}" 0 1 (face (shadow) fontified t)) . 3670) (undo-tree-id3721 . 1) (undo-tree-id3722 . -1) (undo-tree-id3723 . -1)) ((3670 . 3671)) (26513 17849 61277 800000) 0 nil])
nil
([nil nil ((#("}" 0 1 (face (shadow) fontified t)) . 3668) (undo-tree-id3773 . 1) (undo-tree-id3774 . -1) (undo-tree-id3775 . -1)) nil (26513 17871 525601 900000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3677 . 3678) (nil fontified nil 3677 . 3678) (3677 . 3678) 3676) ((#("}" 0 1 (rear-nonsticky nil fontified nil)) . 3677) (nil rear-nonsticky t 3677 . 3678) (t 26513 17845 926018 569000)) (26513 17845 904354 301000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3675 . 3676) (nil fontified nil 3675 . 3676) (3675 . 3676) 3674) nil (26513 17871 525587 641000) 0 nil])
nil
([nil nil ((3686 . 3688) (3680 . 3686) (3679 . 3680) (3678 . 3679) (t 26513 17871 548782 879000)) nil (26513 17885 485042 721000) 0 nil])
([nil nil ((#("}" 0 1 (face (shadow) fontified t)) . 3687) (undo-tree-id3776 . 1) (undo-tree-id3777 . -1) (undo-tree-id3778 . -1)) nil (26513 17885 485041 246000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3693 . 3694) (nil fontified nil 3693 . 3694) (3693 . 3694) 3692) nil (26513 17885 485028 814000) 0 nil])
([nil nil ((3714 . 3715) (t 26513 17885 508654 143000) 3713) nil (26513 17940 942370 959000) 0 nil])
([nil nil ((3697 . 3698) (t 26513 17940 954140 810000) 3695) nil (26513 17948 899155 69000) 0 nil])
([nil nil ((3716 . 3717) (t 26513 17948 919066 829000)) nil (26513 17974 859830 707000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3716 . 3717) (#("
" 0 1 (fontified nil)) . -3823) (3716 . 3824)) nil (26513 17974 859829 598000) 0 nil])
([nil nil ((3728 . 3744) (#("the left-hand and right-hand limits as \\( x \\to 2 \\) are:" 0 39 (fontified t) 39 41 (face font-lock-keyword-face fontified t) 41 44 (fontified t) 44 47 (face font-lock-keyword-face fontified t) 47 50 (fontified t) 50 52 (face font-lock-keyword-face fontified t) 52 57 (fontified t)) . 3728) (undo-tree-id3779 . -56) (undo-tree-id3780 . -56) (undo-tree-id3781 . -56) (undo-tree-id3782 . -56) (undo-tree-id3783 . -56) (undo-tree-id3784 . -56) (undo-tree-id3785 . -56) (undo-tree-id3786 . -56) (undo-tree-id3787 . -56) (undo-tree-id3788 . -56) (undo-tree-id3789 . -56) (undo-tree-id3790 . -56) (undo-tree-id3791 . -56) (undo-tree-id3792 . -57) (undo-tree-id3793 . -57) (undo-tree-id3794 . -57) (undo-tree-id3795 . -57)) nil (26513 17974 859826 349000) 0 nil])
([nil nil ((3744 . 3745) (t 26513 17974 880825 317000)) nil (26513 17988 771490 605000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . 3744) (undo-tree-id3813 . -1) (undo-tree-id3814 . -1) (undo-tree-id3815 . -1) (undo-tree-id3816 . -1) (undo-tree-id3817 . -1) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (undo-tree-id3820 . -1) (undo-tree-id3821 . -1) (undo-tree-id3822 . -1) (undo-tree-id3823 . -1) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . -1) (undo-tree-id3828 . -1)) nil (26513 17988 771489 291000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . 3762) (undo-tree-id3811 . -1) (undo-tree-id3812 . -1)) nil (26513 17988 771476 111000) 0 nil])
([nil nil ((#("^" 0 1 (fontified t)) . 3761) (undo-tree-id3796 . -1) (undo-tree-id3797 . -1) (undo-tree-id3798 . -1) (undo-tree-id3799 . -1) (undo-tree-id3800 . -1) (undo-tree-id3801 . -1) (undo-tree-id3802 . -1) (undo-tree-id3803 . -1) (undo-tree-id3804 . -1) (undo-tree-id3805 . -1) (undo-tree-id3806 . -1) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) (undo-tree-id3809 . -1) (undo-tree-id3810 . -1)) nil (26513 17988 771470 444000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 3781) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (undo-tree-id3861 . -1) (t 26513 17988 792695 678000)) nil (26513 18023 379635 658000) 0 nil])
([nil nil ((3780 . 3781) 3778) nil (26513 18023 379632 410000) 0 nil])
([nil nil ((574 . 577) (573 . 574) (572 . 573) (#("$" 0 1 (face font-lock-constant-face fontified nil)) . -572) (undo-tree-id3831 . -1) (undo-tree-id3832 . -1) (undo-tree-id3833 . -1) (undo-tree-id3834 . -1) (undo-tree-id3835 . -1) (undo-tree-id3836 . -1) (undo-tree-id3837 . -1) (undo-tree-id3838 . -1) (undo-tree-id3839 . -1) (#("$" 0 1 (face font-lock-constant-face fontified t)) . 573) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -573) (undo-tree-id3840 . -1) (undo-tree-id3841 . -1) (undo-tree-id3842 . -1) (undo-tree-id3843 . -1) (undo-tree-id3844 . -1) (undo-tree-id3845 . -1) (undo-tree-id3846 . -1) (undo-tree-id3847 . -1) (undo-tree-id3848 . -1) 574 (#("{" 0 1 (face (font-lock-constant-face shadow) fontified nil)) . -574) (undo-tree-id3849 . -1) (undo-tree-id3850 . -1) (undo-tree-id3851 . -1) (undo-tree-id3852 . -1) (undo-tree-id3853 . -1) (undo-tree-id3854 . -1) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (#("}" 0 1 (face (font-lock-constant-face shadow) fontified t)) . 575) (573 . 576) (572 . 574) (566 . 572) (565 . 567) (560 . 565) (559 . 560) (556 . 559)) nil (26513 18023 379630 649000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-constant-face fontified t)) . 572) (undo-tree-id3829 . -1) (undo-tree-id3830 . -1)) nil (26513 18023 379616 242000) 0 nil])
([nil nil ((#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 3801) (undo-tree-id3862 . -3) (undo-tree-id3863 . -2) (undo-tree-id3864 . -2) (undo-tree-id3865 . -2) (undo-tree-id3866 . -2) (undo-tree-id3867 . -2) (undo-tree-id3868 . -2) (undo-tree-id3869 . -2) (undo-tree-id3870 . -2) (undo-tree-id3871 . -2) (undo-tree-id3872 . -2) (undo-tree-id3873 . -2) (undo-tree-id3874 . -2) (undo-tree-id3875 . -2) (undo-tree-id3876 . -2) (undo-tree-id3877 . 1) (undo-tree-id3878 . -3) (undo-tree-id3879 . -3) (undo-tree-id3880 . -3) (undo-tree-id3881 . -3) (undo-tree-id3882 . -3) (undo-tree-id3883 . -3) (undo-tree-id3884 . -3) (undo-tree-id3885 . -3) (undo-tree-id3886 . -3) (undo-tree-id3887 . -3) (undo-tree-id3888 . -3) (undo-tree-id3889 . -3) (undo-tree-id3890 . -3) (undo-tree-id3891 . -3) (undo-tree-id3892 . -3) (undo-tree-id3893 . -3) (undo-tree-id3894 . -3) (undo-tree-id3895 . -3) (undo-tree-id3896 . -3) (undo-tree-id3897 . -3) (undo-tree-id3898 . -3) (undo-tree-id3899 . -3) (undo-tree-id3900 . -3) (undo-tree-id3901 . -3) (undo-tree-id3902 . -3) (undo-tree-id3903 . -3) (undo-tree-id3904 . -3) (undo-tree-id3905 . -3) (undo-tree-id3906 . -3) (undo-tree-id3907 . -3) (undo-tree-id3908 . -3) (undo-tree-id3909 . -3) (undo-tree-id3910 . -3) (undo-tree-id3911 . -3) (undo-tree-id3912 . -3) (undo-tree-id3913 . -3) (undo-tree-id3914 . -3) (undo-tree-id3915 . -3) (undo-tree-id3916 . -3) (undo-tree-id3917 . -3) (undo-tree-id3918 . -3) (undo-tree-id3919 . -3) (undo-tree-id3920 . -3) (undo-tree-id3921 . -3) (undo-tree-id3922 . -3) (undo-tree-id3923 . -3) (undo-tree-id3924 . -3) (undo-tree-id3925 . -3) (undo-tree-id3926 . -3) (undo-tree-id3927 . -3) (undo-tree-id3928 . -3) (undo-tree-id3929 . -3) (undo-tree-id3930 . -3) (undo-tree-id3931 . -3) (undo-tree-id3932 . -3) (undo-tree-id3933 . -3) (undo-tree-id3934 . -3) (undo-tree-id3935 . -3) (undo-tree-id3936 . -3) (undo-tree-id3937 . -3) (undo-tree-id3938 . -3) (undo-tree-id3939 . -3) (undo-tree-id3940 . -3) (undo-tree-id3941 . -3) (undo-tree-id3942 . -3) (undo-tree-id3943 . -3) (undo-tree-id3944 . -3) (undo-tree-id3945 . -3) (undo-tree-id3946 . -3) (undo-tree-id3947 . -3) (undo-tree-id3948 . -3) (undo-tree-id3949 . -3) (undo-tree-id3950 . -3) (undo-tree-id3951 . -3) (undo-tree-id3952 . -3) (undo-tree-id3953 . -3) (undo-tree-id3954 . -3) (undo-tree-id3955 . -3) (undo-tree-id3956 . -3) (undo-tree-id3957 . -3) (undo-tree-id3958 . -3) (undo-tree-id3959 . -3) (undo-tree-id3960 . -3) (undo-tree-id3961 . -3) (undo-tree-id3962 . -3) (undo-tree-id3963 . -3) (undo-tree-id3964 . -3) (undo-tree-id3965 . -3) (undo-tree-id3966 . -3) (undo-tree-id3967 . -3) (undo-tree-id3968 . -3) (undo-tree-id3969 . -3) (undo-tree-id3970 . -3) (undo-tree-id3971 . -3) (undo-tree-id3972 . -3) (undo-tree-id3973 . -3) (undo-tree-id3974 . -3) (undo-tree-id3975 . -3) (undo-tree-id3976 . -3) (undo-tree-id3977 . -3) (undo-tree-id3978 . -3) (undo-tree-id3979 . -3) (undo-tree-id3980 . -3) (undo-tree-id3981 . -3) (undo-tree-id3982 . -3) (undo-tree-id3983 . -3) (undo-tree-id3984 . -3) (undo-tree-id3985 . -3) (undo-tree-id3986 . -3) (undo-tree-id3987 . -3) (undo-tree-id3988 . -3) (undo-tree-id3989 . -3) (undo-tree-id3990 . -3) (undo-tree-id3991 . -3) (undo-tree-id3992 . -3) (undo-tree-id3993 . -3) 3804 (#("T" 0 1 (fontified t)) . -3804) (undo-tree-id3994 . -1) (undo-tree-id3995 . -1) (undo-tree-id3996 . -1) (undo-tree-id3997 . -1) (undo-tree-id3998 . -1) (undo-tree-id3999 . -1) (undo-tree-id4000 . -1) (undo-tree-id4001 . -1) (undo-tree-id4002 . -1) (undo-tree-id4003 . -1) (undo-tree-id4004 . -1) (undo-tree-id4005 . -1) (undo-tree-id4006 . -1) (undo-tree-id4007 . -1) (undo-tree-id4008 . -1) (undo-tree-id4009 . -1) (undo-tree-id4010 . -1) (undo-tree-id4011 . -1) (undo-tree-id4012 . -1) (undo-tree-id4013 . -1) (undo-tree-id4014 . -1) (undo-tree-id4015 . -1) (undo-tree-id4016 . -1) (undo-tree-id4017 . -1) (undo-tree-id4018 . -1) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (undo-tree-id4030 . -1) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) (undo-tree-id4034 . -1) (undo-tree-id4035 . -1) (undo-tree-id4036 . -1) (undo-tree-id4037 . -1) (undo-tree-id4038 . -1) (undo-tree-id4039 . -1) (undo-tree-id4040 . -1) (undo-tree-id4041 . -1) (undo-tree-id4042 . -1) (undo-tree-id4043 . -1) (undo-tree-id4044 . -1) (undo-tree-id4045 . -1) (undo-tree-id4046 . -1) (undo-tree-id4047 . -1) (undo-tree-id4048 . -1) (undo-tree-id4049 . -1) (undo-tree-id4050 . -1) (undo-tree-id4051 . -1) (undo-tree-id4052 . -1) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (undo-tree-id4055 . -1) (undo-tree-id4056 . -1) (undo-tree-id4057 . -1) (undo-tree-id4058 . -1) (undo-tree-id4059 . -1) (undo-tree-id4060 . -1) (undo-tree-id4061 . -1) (undo-tree-id4062 . -1) (undo-tree-id4063 . -1) (undo-tree-id4064 . -1) (undo-tree-id4065 . -1) (undo-tree-id4066 . -1) (undo-tree-id4067 . -1) (undo-tree-id4068 . -1) (undo-tree-id4069 . -1) (undo-tree-id4070 . -1) (undo-tree-id4071 . -1) (undo-tree-id4072 . -1) (undo-tree-id4073 . -1) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -1) (undo-tree-id4077 . -1) (undo-tree-id4078 . -1) (undo-tree-id4079 . -1) (undo-tree-id4080 . -1) (undo-tree-id4081 . -1) (undo-tree-id4082 . -1) (undo-tree-id4083 . -1) (undo-tree-id4084 . -1) (undo-tree-id4085 . -1) (undo-tree-id4086 . -1) (undo-tree-id4087 . -1) (undo-tree-id4088 . -1) (#("h" 0 1 (fontified t)) . -3805) (undo-tree-id4089 . -1) (undo-tree-id4090 . -1) (undo-tree-id4091 . -1) (undo-tree-id4092 . -1) (undo-tree-id4093 . -1) (undo-tree-id4094 . -1) (undo-tree-id4095 . -1) (undo-tree-id4096 . -1) (undo-tree-id4097 . -1) (undo-tree-id4098 . -1) (undo-tree-id4099 . -1) (undo-tree-id4100 . -1) (undo-tree-id4101 . -1) (undo-tree-id4102 . -1) (undo-tree-id4103 . -1) (undo-tree-id4104 . -1) (undo-tree-id4105 . -1) (undo-tree-id4106 . -1) (undo-tree-id4107 . -1) (undo-tree-id4108 . -1) (undo-tree-id4109 . -1) (undo-tree-id4110 . -1) (undo-tree-id4111 . -1) (undo-tree-id4112 . -1) (undo-tree-id4113 . -1) (undo-tree-id4114 . -1) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (undo-tree-id4117 . -1) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (undo-tree-id4120 . -1) (undo-tree-id4121 . -1) (undo-tree-id4122 . -1) (undo-tree-id4123 . -1) (undo-tree-id4124 . -1) (undo-tree-id4125 . -1) (undo-tree-id4126 . -1) (undo-tree-id4127 . -1) (undo-tree-id4128 . -1) (undo-tree-id4129 . -1) (undo-tree-id4130 . -1) (undo-tree-id4131 . -1) (undo-tree-id4132 . -1) (undo-tree-id4133 . -1) (undo-tree-id4134 . -1) (undo-tree-id4135 . -1) (undo-tree-id4136 . -1) (undo-tree-id4137 . -1) (undo-tree-id4138 . -1) (undo-tree-id4139 . -1) (undo-tree-id4140 . -1) (undo-tree-id4141 . -1) (undo-tree-id4142 . -1) (undo-tree-id4143 . -1) (undo-tree-id4144 . -1) (undo-tree-id4145 . -1) (undo-tree-id4146 . -1) (undo-tree-id4147 . -1) (undo-tree-id4148 . -1) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (undo-tree-id4155 . -1) (undo-tree-id4156 . -1) (undo-tree-id4157 . -1) (undo-tree-id4158 . -1) (undo-tree-id4159 . -1) (undo-tree-id4160 . -1) (undo-tree-id4161 . -1) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) (undo-tree-id4164 . -1) (undo-tree-id4165 . -1) (undo-tree-id4166 . -1) (undo-tree-id4167 . -1) (undo-tree-id4168 . -1) (undo-tree-id4169 . -1) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (undo-tree-id4172 . -1) (undo-tree-id4173 . -1) (undo-tree-id4174 . -1) (undo-tree-id4175 . -1) (undo-tree-id4176 . -1) (#("e" 0 1 (fontified nil)) . -3806) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . -1) (undo-tree-id4181 . -1) (undo-tree-id4182 . -1) (undo-tree-id4183 . -1) (undo-tree-id4184 . -1) (undo-tree-id4185 . -1) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -1) (undo-tree-id4190 . -1) (undo-tree-id4191 . -1) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1) (undo-tree-id4224 . -1) (undo-tree-id4225 . -1) (undo-tree-id4226 . -1) (undo-tree-id4227 . -1) (undo-tree-id4228 . -1) (undo-tree-id4229 . -1) (undo-tree-id4230 . -1) (undo-tree-id4231 . -1) (undo-tree-id4232 . -1) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (undo-tree-id4235 . -1) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -1) (undo-tree-id4240 . -1) (undo-tree-id4241 . -1) (undo-tree-id4242 . -1) (undo-tree-id4243 . -1) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (undo-tree-id4253 . -1) (undo-tree-id4254 . -1) (undo-tree-id4255 . -1) (undo-tree-id4256 . -1) (undo-tree-id4257 . -1) 3807 (#(" " 0 1 (fontified t)) . 3807) (undo-tree-id4258 . -1) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) (undo-tree-id4297 . -1) (undo-tree-id4298 . -1) (undo-tree-id4299 . -1) (undo-tree-id4300 . -1) (undo-tree-id4301 . -1) (undo-tree-id4302 . -1) (undo-tree-id4303 . -1) (undo-tree-id4304 . -1) (undo-tree-id4305 . -1) (undo-tree-id4306 . -1) (undo-tree-id4307 . -1) (undo-tree-id4308 . -1) (undo-tree-id4309 . -1) (undo-tree-id4310 . -1) (undo-tree-id4311 . -1) (undo-tree-id4312 . -1) (undo-tree-id4313 . -1) (undo-tree-id4314 . -1) (undo-tree-id4315 . -1) (undo-tree-id4316 . -1) (undo-tree-id4317 . -1) (undo-tree-id4318 . -1) (undo-tree-id4319 . -1) (undo-tree-id4320 . -1) (undo-tree-id4321 . -1) (undo-tree-id4322 . -1) (undo-tree-id4323 . -1) (undo-tree-id4324 . -1) (undo-tree-id4325 . -1) (undo-tree-id4326 . -1) (undo-tree-id4327 . -1) (undo-tree-id4328 . -1) (undo-tree-id4329 . -1) (undo-tree-id4330 . -1) (undo-tree-id4331 . -1) 3808 (#("a" 0 1 (fontified t)) . -3808) (undo-tree-id4332 . -1) (undo-tree-id4333 . -1) (undo-tree-id4334 . -1) (undo-tree-id4335 . -1) (undo-tree-id4336 . -1) (undo-tree-id4337 . -1) (undo-tree-id4338 . -1) (undo-tree-id4339 . -1) (undo-tree-id4340 . -1) (undo-tree-id4341 . -1) (undo-tree-id4342 . -1) (undo-tree-id4343 . -1) (undo-tree-id4344 . -1) (undo-tree-id4345 . -1) (undo-tree-id4346 . -1) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1) (undo-tree-id4351 . -1) (undo-tree-id4352 . -1) (undo-tree-id4353 . -1) (undo-tree-id4354 . -1) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (undo-tree-id4391 . -1) (#("b" 0 1 (fontified t)) . -3809) (undo-tree-id4392 . -1) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) (undo-tree-id4405 . -1) (undo-tree-id4406 . -1) (undo-tree-id4407 . -1) (undo-tree-id4408 . -1) (undo-tree-id4409 . -1) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1) (undo-tree-id4414 . -1) (undo-tree-id4415 . -1) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (#("o" 0 1 (fontified t)) . -3810) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (#("v" 0 1 (fontified t)) . -3811) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . -1) (undo-tree-id4523 . -1) (undo-tree-id4524 . -1) (undo-tree-id4525 . -1) (undo-tree-id4526 . -1) (undo-tree-id4527 . -1) (undo-tree-id4528 . -1) (undo-tree-id4529 . -1) (#("e" 0 1 (fontified t)) . -3812) (undo-tree-id4530 . -1) (undo-tree-id4531 . -1) (undo-tree-id4532 . -1) (undo-tree-id4533 . -1) (undo-tree-id4534 . -1) (undo-tree-id4535 . -1) (undo-tree-id4536 . -1) (undo-tree-id4537 . -1) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) (undo-tree-id4551 . -1) (undo-tree-id4552 . -1) (undo-tree-id4553 . -1) (undo-tree-id4554 . -1) (undo-tree-id4555 . -1) (undo-tree-id4556 . -1) (undo-tree-id4557 . -1) (undo-tree-id4558 . -1) (undo-tree-id4559 . -1) (undo-tree-id4560 . -1) (undo-tree-id4561 . -1) 3813 (#(" " 0 1 (fontified t)) . 3813) (undo-tree-id4562 . -1) (undo-tree-id4563 . -1) (undo-tree-id4564 . -1) (undo-tree-id4565 . -1) (undo-tree-id4566 . -1) (undo-tree-id4567 . -1) (undo-tree-id4568 . -1) (undo-tree-id4569 . -1) (undo-tree-id4570 . -1) (undo-tree-id4571 . -1) (undo-tree-id4572 . -1) (undo-tree-id4573 . -1) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (undo-tree-id4586 . -1) 3814 (#("e" 0 1 (fontified t)) . -3814) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (undo-tree-id4604 . -1) (#("x" 0 1 (fontified t)) . -3815) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1) (undo-tree-id4615 . -1) 3816 (3808 . 3816) (#("f" 0 1 (fontified t)) . -3808) (undo-tree-id4616 . -1) (undo-tree-id4617 . -1) (undo-tree-id4618 . -1) (undo-tree-id4619 . -1) (undo-tree-id4620 . -1) (undo-tree-id4621 . -1) (undo-tree-id4622 . -1) (undo-tree-id4623 . -1) (undo-tree-id4624 . -1) (undo-tree-id4625 . -1) (undo-tree-id4626 . -1) 3809 (3804 . 3809) (#("W" 0 1 (fontified t)) . -3804) (undo-tree-id4627 . -1) (undo-tree-id4628 . -1) (undo-tree-id4629 . -1) (undo-tree-id4630 . -1) (undo-tree-id4631 . -1) (undo-tree-id4632 . -1) (undo-tree-id4633 . -1) (undo-tree-id4634 . -1) (undo-tree-id4635 . -1) (undo-tree-id4636 . -1) (undo-tree-id4637 . -1) 3805 (3804 . 3805) (3803 . 3804) (3802 . 3803) (t 26513 18023 401372 570000) 3802) nil (26513 18053 303085 168000) 0 nil])
([nil nil ((3801 . 3802) 3800) nil (26513 18053 301986 182000) 0 nil])
([nil nil ((apply yas--snippet-revive 3770 3778 #s(yas--snippet nil nil #s(yas--exit 3777 nil) 5 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 3777 nil) 5 nil nil nil nil)) (3770 . 3778) (#("erf" 0 3 (fontified t)) . 3770) (undo-tree-id4671 . -3) (undo-tree-id4672 . -1) (undo-tree-id4673 . -1) (undo-tree-id4674 . -1) (undo-tree-id4675 . -1) (undo-tree-id4676 . -1) (undo-tree-id4677 . -1) (undo-tree-id4678 . -1) (undo-tree-id4679 . -2) (undo-tree-id4680 . -2) (undo-tree-id4681 . -2) (undo-tree-id4682 . -2) (undo-tree-id4683 . -2) (undo-tree-id4684 . -2) (undo-tree-id4685 . -2) (undo-tree-id4686 . -3) (undo-tree-id4687 . -3) (undo-tree-id4688 . -3) (undo-tree-id4689 . -3) (undo-tree-id4690 . -3) (undo-tree-id4691 . -3) (undo-tree-id4692 . -3) (undo-tree-id4693 . -3) (undo-tree-id4694 . -3) (undo-tree-id4695 . -3) 3773 (3769 . 3773) (#("s" 0 1 (fontified t)) . -3769) (undo-tree-id4696 . -1) (undo-tree-id4697 . -1) (undo-tree-id4698 . -1) (undo-tree-id4699 . -1) (undo-tree-id4700 . -1) (undo-tree-id4701 . -1) (undo-tree-id4702 . -1) (undo-tree-id4703 . -1) (undo-tree-id4704 . -1) (undo-tree-id4705 . -1) (undo-tree-id4706 . -1) (undo-tree-id4707 . -1) (undo-tree-id4708 . -1) (undo-tree-id4709 . -1) (undo-tree-id4710 . -1) (undo-tree-id4711 . -1) (undo-tree-id4712 . -1) (undo-tree-id4713 . -1) 3770 (#(" " 0 1 (fontified t)) . 3770) (undo-tree-id4714 . -1) (undo-tree-id4715 . -1) (undo-tree-id4716 . -1) (undo-tree-id4717 . -1) (undo-tree-id4718 . -1) (undo-tree-id4719 . -1) (undo-tree-id4720 . -1) (undo-tree-id4721 . -1) (undo-tree-id4722 . -1) (undo-tree-id4723 . -1) (undo-tree-id4724 . -1) 3771 (3755 . 3771) (3752 . 3755) (#("e" 0 1 (fontified t)) . -3752) (undo-tree-id4725 . -1) (undo-tree-id4726 . -1) (undo-tree-id4727 . -1) (undo-tree-id4728 . -1) (undo-tree-id4729 . -1) (undo-tree-id4730 . -1) (undo-tree-id4731 . -1) (undo-tree-id4732 . -1) (undo-tree-id4733 . -1) (undo-tree-id4734 . -1) (undo-tree-id4735 . -1) (undo-tree-id4736 . -1) (undo-tree-id4737 . -1) (undo-tree-id4738 . -1) (undo-tree-id4739 . -1) (undo-tree-id4740 . -1) (undo-tree-id4741 . -1) (undo-tree-id4742 . -1) 3753 (#(" " 0 1 (fontified t)) . 3753) (undo-tree-id4743 . -1) (undo-tree-id4744 . -1) (undo-tree-id4745 . -1) (undo-tree-id4746 . -1) (undo-tree-id4747 . -1) (undo-tree-id4748 . -1) (undo-tree-id4749 . -1) (undo-tree-id4750 . -1) (undo-tree-id4751 . -1) (undo-tree-id4752 . -1) (undo-tree-id4753 . -1) 3754 (3743 . 3754) (#("simple" 0 6 (fontified t)) . -3743) (undo-tree-id4754 . -6) (undo-tree-id4755 . -1) (undo-tree-id4756 . -1) (undo-tree-id4757 . -1) (undo-tree-id4758 . -1) (undo-tree-id4759 . -1) (undo-tree-id4760 . -1) (undo-tree-id4761 . -1) (undo-tree-id4762 . -2) (undo-tree-id4763 . -2) (undo-tree-id4764 . -2) (undo-tree-id4765 . -2) (undo-tree-id4766 . -2) (undo-tree-id4767 . -2) (undo-tree-id4768 . -2) (undo-tree-id4769 . -3) (undo-tree-id4770 . -3) (undo-tree-id4771 . -3) (undo-tree-id4772 . -3) (undo-tree-id4773 . -3) (undo-tree-id4774 . -3) (undo-tree-id4775 . -3) (undo-tree-id4776 . -4) (undo-tree-id4777 . -4) (undo-tree-id4778 . -4) (undo-tree-id4779 . -4) (undo-tree-id4780 . -4) (undo-tree-id4781 . -4) (undo-tree-id4782 . -4) (undo-tree-id4783 . -5) (undo-tree-id4784 . -5) (undo-tree-id4785 . -5) (undo-tree-id4786 . -5) (undo-tree-id4787 . -5) (undo-tree-id4788 . -5) (undo-tree-id4789 . -5) (undo-tree-id4790 . -6) (undo-tree-id4791 . -6) (undo-tree-id4792 . -6) (undo-tree-id4793 . -6) (undo-tree-id4794 . -6) (undo-tree-id4795 . -6) (undo-tree-id4796 . -6) (undo-tree-id4797 . -6) (undo-tree-id4798 . -6) (undo-tree-id4799 . -6) 3749 (3737 . 3749) (3736 . 3737) (t 26513 18053 323092 591000) 3734) nil (26513 18093 13481 823000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3782 . 3783) (nil fontified nil 3777 . 3783) (3777 . 3783) 3776) nil (26513 18093 13217 965000) 0 nil])
([nil nil ((#("simple" 0 5 (face font-lock-constant-face fontified t) 5 6 (face font-lock-constant-face rear-nonsticky t fontified t)) . 3777) (undo-tree-id4656 . -5) (undo-tree-id4657 . -5) (undo-tree-id4658 . -6) (undo-tree-id4659 . -6) (undo-tree-id4660 . -5) (undo-tree-id4661 . -5) (undo-tree-id4662 . -5) (undo-tree-id4663 . -5) (undo-tree-id4664 . -5) (undo-tree-id4665 . -5) (undo-tree-id4666 . -5) (undo-tree-id4667 . -5) (undo-tree-id4668 . -5) (undo-tree-id4669 . -6) (undo-tree-id4670 . -6) 3782) nil (26513 18093 13216 963000) 0 nil])
([nil nil ((#("n" 0 1 (face font-lock-constant-face fontified t)) . -3777) (undo-tree-id4638 . -1) (undo-tree-id4639 . -1) (undo-tree-id4640 . -1) (#("u" 0 1 (face font-lock-constant-face fontified t)) . -3778) (undo-tree-id4641 . -1) (undo-tree-id4642 . -1) (undo-tree-id4643 . -1) (#("m" 0 1 (face font-lock-constant-face fontified t)) . -3779) (undo-tree-id4644 . -1) (undo-tree-id4645 . -1) (undo-tree-id4646 . -1) 3780 (3777 . 3780) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -3777) (undo-tree-id4647 . -1) (undo-tree-id4648 . -1) (undo-tree-id4649 . -1) 3778 (3777 . 3778) (#("e" 0 1 (face font-lock-constant-face fontified t)) . -3777) (undo-tree-id4650 . -1) (undo-tree-id4651 . -1) (undo-tree-id4652 . -1) (#("q" 0 1 (face font-lock-constant-face fontified t)) . -3778) (undo-tree-id4653 . -1) (undo-tree-id4654 . -1) (undo-tree-id4655 . -1) 3779 (3777 . 3779)) nil (26513 18093 13204 39000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3786 . 3787) (nil fontified nil 3777 . 3787) (3777 . 3787) (t 26513 18093 35720 210000)) nil (26513 18101 762586 837000) 0 nil])
([nil nil ((#("Therefore, the left-hand and right-hand limits as \\( x \\to 2 \\) are:
\\[
\\lim_{x \\to 2^-} f(x) = 2^2 = 4
\\]
and
\\[
\\lim_{x \\to 2^+} f(x) = 2^2 = 4
\\]

Thus, both the left-hand and right-hand limits as \\( x \\to 2 \\) for the function \\( f(x) = \\frac{x^3 - 2x^2}{x - 2} \\) are equal to 4.
" 0 50 (fontified t) 50 52 (face font-lock-keyword-face fontified t) 52 55 (fontified t) 55 58 (face font-lock-keyword-face fontified t) 58 61 (fontified t) 61 63 (face font-lock-keyword-face fontified t) 63 68 (fontified t) 68 69 (fontified t) 69 71 (face font-lock-keyword-face fontified t) 71 72 (fontified t) 72 76 (face font-lock-keyword-face fontified t) 76 80 (fontified t) 80 83 (face font-lock-keyword-face fontified t) 83 104 (fontified t) 104 106 (face font-lock-keyword-face fontified t) 106 107 (fontified t) 107 111 (fontified t) 111 113 (face font-lock-keyword-face fontified t) 113 114 (fontified t) 114 118 (face font-lock-keyword-face fontified t) 118 122 (fontified t) 122 125 (face font-lock-keyword-face fontified t) 125 146 (fontified t) 146 148 (face font-lock-keyword-face fontified t) 148 200 (fontified t) 200 202 (face font-lock-keyword-face fontified t) 202 205 (fontified t) 205 208 (face font-lock-keyword-face fontified t) 208 211 (fontified t) 211 213 (face font-lock-keyword-face fontified t) 213 231 (fontified t) 231 233 (face font-lock-keyword-face fontified t) 233 241 (fontified t) 241 246 (face font-lock-keyword-face fontified t) 246 266 (fontified t) 266 268 (face font-lock-keyword-face fontified t) 268 284 (fontified t) 284 285 (fontified t rear-nonsticky t)) . 3855) (undo-tree-id4800 . -222) (undo-tree-id4801 . -222) (undo-tree-id4802 . -284) (undo-tree-id4803 . -222) (undo-tree-id4804 . -104) (undo-tree-id4805 . -69) (undo-tree-id4806 . -69) (undo-tree-id4807 . -69) (undo-tree-id4808 . -69) (undo-tree-id4809 . -69) (undo-tree-id4810 . -69) (undo-tree-id4811 . -69) (undo-tree-id4812 . -222) (undo-tree-id4813 . -150) (undo-tree-id4814 . -222) (undo-tree-id4815 . -285) 4077 (t 26513 18101 784638 65000)) nil (26513 18128 532267 227000) 0 nil])
([nil nil ((3884 . 3890) (#("a" 0 1 (fontified t)) . -3884) (undo-tree-id4816 . -1) (undo-tree-id4817 . -1) (undo-tree-id4818 . -1) (undo-tree-id4819 . -1) (undo-tree-id4820 . -1) (undo-tree-id4821 . -1) (undo-tree-id4822 . -1) (undo-tree-id4823 . -1) (undo-tree-id4824 . -1) (undo-tree-id4825 . -1) (undo-tree-id4826 . -1) (undo-tree-id4827 . -1) (undo-tree-id4828 . -1) (undo-tree-id4829 . -1) (undo-tree-id4830 . -1) (undo-tree-id4831 . -1) (undo-tree-id4832 . -1) (undo-tree-id4833 . -1) (undo-tree-id4834 . -1) (undo-tree-id4835 . -1) (undo-tree-id4836 . -1) (undo-tree-id4837 . -1) (undo-tree-id4838 . -1) (undo-tree-id4839 . -1) (undo-tree-id4840 . -1) (undo-tree-id4841 . -1) (undo-tree-id4842 . -1) (undo-tree-id4843 . -1) (undo-tree-id4844 . -1) (undo-tree-id4845 . -1) (undo-tree-id4846 . -1) (undo-tree-id4847 . -1) (#("m" 0 1 (fontified t)) . -3885) (undo-tree-id4848 . -1) (undo-tree-id4849 . -1) (undo-tree-id4850 . -1) (undo-tree-id4851 . -1) (undo-tree-id4852 . -1) (undo-tree-id4853 . -1) (undo-tree-id4854 . -1) (undo-tree-id4855 . -1) (undo-tree-id4856 . -1) (undo-tree-id4857 . -1) (undo-tree-id4858 . -1) (undo-tree-id4859 . -1) (undo-tree-id4860 . -1) (undo-tree-id4861 . -1) (undo-tree-id4862 . -1) (undo-tree-id4863 . -1) (undo-tree-id4864 . -1) (undo-tree-id4865 . -1) (undo-tree-id4866 . -1) (undo-tree-id4867 . -1) (undo-tree-id4868 . -1) (undo-tree-id4869 . -1) (undo-tree-id4870 . -1) (undo-tree-id4871 . -1) (undo-tree-id4872 . -1) (#("l" 0 1 (fontified t)) . -3886) (undo-tree-id4873 . -1) (undo-tree-id4874 . -1) (undo-tree-id4875 . -1) (undo-tree-id4876 . -1) (undo-tree-id4877 . -1) (undo-tree-id4878 . -1) (undo-tree-id4879 . -1) (undo-tree-id4880 . -1) (undo-tree-id4881 . -1) (undo-tree-id4882 . -1) (undo-tree-id4883 . -1) 3887 (3886 . 3887) (#("m" 0 1 (fontified t)) . -3886) (undo-tree-id4884 . -1) (undo-tree-id4885 . -1) (undo-tree-id4886 . -1) (undo-tree-id4887 . -1) (undo-tree-id4888 . -1) (undo-tree-id4889 . -1) (undo-tree-id4890 . -1) (undo-tree-id4891 . -1) (undo-tree-id4892 . -1) (undo-tree-id4893 . -1) (undo-tree-id4894 . -1) 3887 (3870 . 3887) (3867 . 3870) (#("t" 0 1 (fontified t)) . -3867) (undo-tree-id4895 . -1) (undo-tree-id4896 . -1) (undo-tree-id4897 . -1) (undo-tree-id4898 . -1) (undo-tree-id4899 . -1) (undo-tree-id4900 . -1) (undo-tree-id4901 . -1) (undo-tree-id4902 . -1) (undo-tree-id4903 . -1) (undo-tree-id4904 . -1) (undo-tree-id4905 . -1) 3868 (3867 . 3868) (#("prov" 0 4 (fontified t)) . -3867) (undo-tree-id4906 . -4) (undo-tree-id4907 . -1) (undo-tree-id4908 . -1) (undo-tree-id4909 . -1) (undo-tree-id4910 . -1) (undo-tree-id4911 . -1) (undo-tree-id4912 . -1) (undo-tree-id4913 . -1) (undo-tree-id4914 . -2) (undo-tree-id4915 . -2) (undo-tree-id4916 . -2) (undo-tree-id4917 . -2) (undo-tree-id4918 . -2) (undo-tree-id4919 . -2) (undo-tree-id4920 . -2) (undo-tree-id4921 . -3) (undo-tree-id4922 . -3) (undo-tree-id4923 . -3) (undo-tree-id4924 . -3) (undo-tree-id4925 . -3) (undo-tree-id4926 . -3) (undo-tree-id4927 . -3) (undo-tree-id4928 . -4) (undo-tree-id4929 . -4) (undo-tree-id4930 . -4) (undo-tree-id4931 . -4) (undo-tree-id4932 . -4) (undo-tree-id4933 . -4) (undo-tree-id4934 . -4) (undo-tree-id4935 . -4) (undo-tree-id4936 . -4) (undo-tree-id4937 . -4) 3871 (3867 . 3871) (#("give " 0 5 (fontified t)) . -3867) (undo-tree-id4938 . -5) (undo-tree-id4939 . -1) (undo-tree-id4940 . -1) (undo-tree-id4941 . -1) (undo-tree-id4942 . -1) (undo-tree-id4943 . -1) (undo-tree-id4944 . -1) (undo-tree-id4945 . -1) (undo-tree-id4946 . -2) (undo-tree-id4947 . -2) (undo-tree-id4948 . -2) (undo-tree-id4949 . -2) (undo-tree-id4950 . -2) (undo-tree-id4951 . -2) (undo-tree-id4952 . -2) (undo-tree-id4953 . -3) (undo-tree-id4954 . -3) (undo-tree-id4955 . -3) (undo-tree-id4956 . -3) (undo-tree-id4957 . -3) (undo-tree-id4958 . -3) (undo-tree-id4959 . -3) (undo-tree-id4960 . -5) (undo-tree-id4961 . -5) (undo-tree-id4962 . -5) (undo-tree-id4963 . -5) (undo-tree-id4964 . -5) (undo-tree-id4965 . -5) (undo-tree-id4966 . -5) (undo-tree-id4967 . -5) (undo-tree-id4968 . -5) (undo-tree-id4969 . -5) (undo-tree-id4970 . -5) (undo-tree-id4971 . -5) (undo-tree-id4972 . -5) (undo-tree-id4973 . -5) (undo-tree-id4974 . -5) (undo-tree-id4975 . -5) (undo-tree-id4976 . -5) (undo-tree-id4977 . -5) (undo-tree-id4978 . -5) (undo-tree-id4979 . -5) (undo-tree-id4980 . -5) (undo-tree-id4981 . -5) (undo-tree-id4982 . -5) (undo-tree-id4983 . -5) 3872 (#("f" 0 1 (fontified t)) . -3872) (undo-tree-id4984 . -1) (undo-tree-id4985 . -1) (undo-tree-id4986 . -1) (undo-tree-id4987 . -1) (undo-tree-id4988 . -1) (undo-tree-id4989 . -1) (undo-tree-id4990 . -1) (undo-tree-id4991 . -1) (undo-tree-id4992 . -1) (undo-tree-id4993 . -1) (undo-tree-id4994 . -1) 3873 (3862 . 3873) (#("g" 0 1 (fontified t)) . -3862) (undo-tree-id4995 . -1) (undo-tree-id4996 . -1) (undo-tree-id4997 . -1) (undo-tree-id4998 . -1) (undo-tree-id4999 . -1) (undo-tree-id5000 . -1) (undo-tree-id5001 . -1) (undo-tree-id5002 . -1) (undo-tree-id5003 . -1) (undo-tree-id5004 . -1) (undo-tree-id5005 . -1) 3863 (3856 . 3863) (t 26513 18128 553044 811000)) nil (26513 18158 264223 18000) 0 nil])
([nil nil ((3875 . 3881) (#("t" 0 1 (fontified t)) . -3875) (undo-tree-id5006 . -1) (undo-tree-id5007 . -1) (undo-tree-id5008 . -1) (undo-tree-id5009 . -1) (undo-tree-id5010 . -1) (undo-tree-id5011 . -1) (undo-tree-id5012 . -1) (undo-tree-id5013 . -1) (undo-tree-id5014 . -1) (undo-tree-id5015 . -1) (undo-tree-id5016 . -1) 3876 (3862 . 3876) (#("r" 0 1 (fontified t)) . -3862) (undo-tree-id5017 . -1) (undo-tree-id5018 . -1) (undo-tree-id5019 . -1) (undo-tree-id5020 . -1) (undo-tree-id5021 . -1) (undo-tree-id5022 . -1) (undo-tree-id5023 . -1) (undo-tree-id5024 . -1) (undo-tree-id5025 . -1) (undo-tree-id5026 . -1) (undo-tree-id5027 . -1) (undo-tree-id5028 . -1) (undo-tree-id5029 . -1) (undo-tree-id5030 . -1) (undo-tree-id5031 . -1) (undo-tree-id5032 . -1) (undo-tree-id5033 . -1) (undo-tree-id5034 . -1) (#("e" 0 1 (fontified t)) . -3863) (undo-tree-id5035 . -1) (undo-tree-id5036 . -1) (undo-tree-id5037 . -1) (undo-tree-id5038 . -1) (undo-tree-id5039 . -1) (undo-tree-id5040 . -1) (undo-tree-id5041 . -1) (undo-tree-id5042 . -1) (undo-tree-id5043 . -1) (undo-tree-id5044 . -1) (undo-tree-id5045 . -1) 3864 (3862 . 3864) (#("will define" 0 11 (fontified t)) . 3862) (undo-tree-id5046 . -10) (undo-tree-id5047 . -10) (undo-tree-id5048 . -10) (undo-tree-id5049 . -10) (undo-tree-id5050 . -5) (undo-tree-id5051 . -5) (undo-tree-id5052 . -5) (undo-tree-id5053 . -5) (undo-tree-id5054 . -5) (undo-tree-id5055 . -5) (undo-tree-id5056 . -5) (undo-tree-id5057 . -5) (undo-tree-id5058 . -5) (undo-tree-id5059 . -5) (undo-tree-id5060 . -5) (undo-tree-id5061 . -5) (undo-tree-id5062 . -5) (undo-tree-id5063 . -5) (undo-tree-id5064 . -5) (undo-tree-id5065 . -5) (undo-tree-id5066 . -5) (undo-tree-id5067 . -5) (undo-tree-id5068 . -5) (undo-tree-id5069 . -5) (undo-tree-id5070 . -5) (undo-tree-id5071 . -5) (undo-tree-id5072 . -5) (undo-tree-id5073 . -5) (undo-tree-id5074 . -5) (undo-tree-id5075 . -5) (undo-tree-id5076 . -5) (undo-tree-id5077 . -5) (undo-tree-id5078 . -5) (undo-tree-id5079 . -5) (undo-tree-id5080 . -5) (undo-tree-id5081 . -5) (undo-tree-id5082 . -5) (undo-tree-id5083 . -5) (undo-tree-id5084 . -5) (undo-tree-id5085 . -5) (undo-tree-id5086 . -5) (undo-tree-id5087 . -5) (undo-tree-id5088 . -5) (undo-tree-id5089 . -5) (undo-tree-id5090 . -5) (undo-tree-id5091 . -5) (undo-tree-id5092 . -5) (undo-tree-id5093 . -5) (undo-tree-id5094 . -5) (undo-tree-id5095 . -5) (undo-tree-id5096 . -5) (undo-tree-id5097 . -5) (undo-tree-id5098 . -5) (undo-tree-id5099 . -5) (undo-tree-id5100 . -5) (undo-tree-id5101 . -5) (undo-tree-id5102 . -5) (undo-tree-id5103 . -5) (undo-tree-id5104 . -5) (undo-tree-id5105 . -5) (undo-tree-id5106 . -5) (undo-tree-id5107 . -5) (undo-tree-id5108 . -5) (undo-tree-id5109 . -5) (undo-tree-id5110 . -5) (undo-tree-id5111 . -5) (undo-tree-id5112 . -5) (undo-tree-id5113 . -5) (undo-tree-id5114 . -5) (undo-tree-id5115 . -5) (undo-tree-id5116 . -5) (undo-tree-id5117 . -5) (undo-tree-id5118 . -5) (undo-tree-id5119 . -5) (undo-tree-id5120 . -5) (undo-tree-id5121 . -5) (undo-tree-id5122 . -5) (undo-tree-id5123 . -5) (undo-tree-id5124 . -5) (undo-tree-id5125 . -5) (undo-tree-id5126 . -5) (undo-tree-id5127 . -10) (undo-tree-id5128 . -10) (undo-tree-id5129 . -11) (undo-tree-id5130 . -11) (undo-tree-id5131 . -11) 3872 (t 26513 18158 287261 989000)) nil (26513 18167 398361 112000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t rear-nonsticky t)) . 4720) (undo-tree-id5132 . 1) (undo-tree-id5133 . -1) (t 26513 18167 420620 636000)) nil (26513 18187 639716 799000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field nil 4757 4764 nil nil nil nil nil)) nil 6 nil #s(yas--field nil 4757 4764 nil nil nil nil nil) nil nil)) (4755 . 4757) (4739 . 4777) (#("exm" 0 3 (fontified t)) . 4739) (undo-tree-id5158 . -3) (undo-tree-id5159 . -1) (undo-tree-id5160 . -1) (undo-tree-id5161 . -1) (undo-tree-id5162 . -1) (undo-tree-id5163 . -1) (undo-tree-id5164 . -1) (undo-tree-id5165 . -1) (undo-tree-id5166 . -2) (undo-tree-id5167 . -2) (undo-tree-id5168 . -2) (undo-tree-id5169 . -2) (undo-tree-id5170 . -2) (undo-tree-id5171 . -2) (undo-tree-id5172 . -2) (undo-tree-id5173 . -3) (undo-tree-id5174 . -3) (undo-tree-id5175 . -3) (undo-tree-id5176 . -3) (undo-tree-id5177 . -3) (undo-tree-id5178 . -3) (undo-tree-id5179 . -3) (undo-tree-id5180 . -3) (undo-tree-id5181 . -3) (undo-tree-id5182 . -3) 4742 (4739 . 4742) (4738 . 4739) (4737 . 4738) (t 26513 18187 661390 911000) 4721) nil (26513 18195 95169 568000) 0 nil])
([nil nil ((apply yas--snippet-revive 4739 4779 #s(yas--snippet nil (#s(yas--field nil 4757 4764 nil nil nil nil nil)) nil 6 nil #s(yas--field nil 4757 4764 nil nil nil nil nil) nil nil))) nil (26513 18195 95156 878000) 0 nil])
([nil nil ((#(" example" 0 8 (fontified t)) . 4756) (undo-tree-id5134 . -7) (undo-tree-id5135 . -7) (undo-tree-id5136 . -7) (undo-tree-id5137 . -7) (undo-tree-id5138 . 7) (undo-tree-id5139 . -1) (undo-tree-id5140 . -1) (undo-tree-id5141 . -1) (undo-tree-id5142 . -1) (undo-tree-id5143 . -1) (undo-tree-id5144 . -1) (undo-tree-id5145 . -1) (undo-tree-id5146 . -1) (undo-tree-id5147 . -1) (undo-tree-id5148 . -1) (undo-tree-id5149 . -1) (undo-tree-id5150 . -1) (undo-tree-id5151 . -1) (undo-tree-id5152 . -1) (undo-tree-id5153 . -7) (undo-tree-id5154 . -7) (undo-tree-id5155 . -8) (undo-tree-id5156 . -8) (undo-tree-id5157 . -8) 4763) nil (26513 18195 95153 334000) 0 nil])
([nil nil ((4818 . 4819) (#(")" 0 1 (fontified nil)) . -4818) (4818 . 4819) (4817 . 4818) (4816 . 4817) (4815 . 4816) (4814 . 4815) (apply yas--snippet-revive 4790 4831 #s(yas--snippet nil nil #s(yas--exit 4814 nil) 7 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 4814 nil) 7 nil nil nil nil)) (4815 . 4817) (4806 . 4808) (4790 . 4827) (#("item" 0 4 (fontified t)) . 4790) (undo-tree-id5250 . -4) (undo-tree-id5251 . -1) (undo-tree-id5252 . -1) (undo-tree-id5253 . -1) (undo-tree-id5254 . -1) (undo-tree-id5255 . -1) (undo-tree-id5256 . -1) (undo-tree-id5257 . -1) (undo-tree-id5258 . -2) (undo-tree-id5259 . -2) (undo-tree-id5260 . -2) (undo-tree-id5261 . -2) (undo-tree-id5262 . -2) (undo-tree-id5263 . -2) (undo-tree-id5264 . -2) (undo-tree-id5265 . -3) (undo-tree-id5266 . -3) (undo-tree-id5267 . -3) (undo-tree-id5268 . -3) (undo-tree-id5269 . -3) (undo-tree-id5270 . -3) (undo-tree-id5271 . -3) (undo-tree-id5272 . -4) (undo-tree-id5273 . -4) (undo-tree-id5274 . -4) (undo-tree-id5275 . -4) (undo-tree-id5276 . -4) (undo-tree-id5277 . -4) (undo-tree-id5278 . -4) (undo-tree-id5279 . -4) (undo-tree-id5280 . -4) (undo-tree-id5281 . -4) 4794 (4790 . 4794) (4788 . 4790) (#(" " 0 1 (fontified nil)) . -4788) (undo-tree-id5282 . -1) (undo-tree-id5283 . -1) (undo-tree-id5284 . -1) (undo-tree-id5285 . -1) (undo-tree-id5286 . -1) (undo-tree-id5287 . -1) (undo-tree-id5288 . -1) (undo-tree-id5289 . -1) (undo-tree-id5290 . -1) (undo-tree-id5291 . -1) (undo-tree-id5292 . -1) (undo-tree-id5293 . -1) (undo-tree-id5294 . -1) (undo-tree-id5295 . -1) (undo-tree-id5296 . -1) (undo-tree-id5297 . -1) (undo-tree-id5298 . -1) (undo-tree-id5299 . -1) (undo-tree-id5300 . -1) (undo-tree-id5301 . -1) (4755 . 4757) (4785 . 4786) (4776 . 4785) (4755 . 4776) (#("F" 0 1 (fontified t)) . -4755) (undo-tree-id5302 . -1) (undo-tree-id5303 . -1) (undo-tree-id5304 . -1) (undo-tree-id5305 . -1) (undo-tree-id5306 . -1) (undo-tree-id5307 . -1) (undo-tree-id5308 . -1) (undo-tree-id5309 . -1) (undo-tree-id5310 . -1) (undo-tree-id5311 . -1) (undo-tree-id5312 . -1) (undo-tree-id5313 . -1) (undo-tree-id5314 . -1) (undo-tree-id5315 . -1) (undo-tree-id5316 . -1) (undo-tree-id5317 . -1) (undo-tree-id5318 . -1) 4756 (4755 . 4756) (t 26513 18195 117666 348000)) nil (26513 18306 22544 607000) 0 nil])
([nil nil ((4839 . 4841) (#("}" 0 1 (fontified nil)) . -4838) (4838 . 4839) (#("}" 0 1 (face (shadow) fontified nil)) . -4838) (4838 . 4839) (4837 . 4839) (4833 . 4837) (4832 . 4833) (4831 . 4832) (#("}" 0 1 (fontified nil)) . -4830) (4830 . 4831) (#("}" 0 1 (fontified nil)) . -4830) (4826 . 4831) (4825 . 4826) (4824 . 4825) (#("^" 0 1 (fontified t)) . -4824) (undo-tree-id5203 . -1) (undo-tree-id5204 . -1) (undo-tree-id5205 . -1) (undo-tree-id5206 . -1) (undo-tree-id5207 . -1) (undo-tree-id5208 . -1) (undo-tree-id5209 . -1) (undo-tree-id5210 . -1) (undo-tree-id5211 . -1) 4825 (#("{" 0 1 (face (shadow) fontified nil)) . -4825) (undo-tree-id5212 . -1) (undo-tree-id5213 . -1) (undo-tree-id5214 . -1) (undo-tree-id5215 . -1) (undo-tree-id5216 . -1) (undo-tree-id5217 . -1) (undo-tree-id5218 . -1) (undo-tree-id5219 . -1) (undo-tree-id5220 . -1) (#("}" 0 1 (face (shadow) fontified t)) . 4826) (4824 . 4827) (4823 . 4824) (4821 . 4824) (4818 . 4821) (4817 . 4818) (#("l" 0 1 (fontified t)) . -4817) (undo-tree-id5221 . -1) (undo-tree-id5222 . -1) (undo-tree-id5223 . -1) (undo-tree-id5224 . -1) (undo-tree-id5225 . -1) (undo-tree-id5226 . -1) (undo-tree-id5227 . -1) (undo-tree-id5228 . -1) (undo-tree-id5229 . -1) (undo-tree-id5230 . -1) (undo-tree-id5231 . -1) (undo-tree-id5232 . -1) (undo-tree-id5233 . -1) (undo-tree-id5234 . -1) (undo-tree-id5235 . -1) (undo-tree-id5236 . -1) (undo-tree-id5237 . -1) (undo-tree-id5238 . -1) (#("i" 0 1 (fontified t)) . -4818) (undo-tree-id5239 . -1) (undo-tree-id5240 . -1) (undo-tree-id5241 . -1) (undo-tree-id5242 . -1) (undo-tree-id5243 . -1) (undo-tree-id5244 . -1) (undo-tree-id5245 . -1) (undo-tree-id5246 . -1) (undo-tree-id5247 . -1) (undo-tree-id5248 . -1) (undo-tree-id5249 . -1) 4819 (4816 . 4819)) nil (26513 18306 22515 181000) 0 nil])
([nil nil ((4845 . 4846) (#("t" 0 1 (fontified t)) . -4845) (undo-tree-id5192 . -1) (undo-tree-id5193 . -1) (undo-tree-id5194 . -1) (undo-tree-id5195 . -1) (undo-tree-id5196 . -1) (undo-tree-id5197 . -1) (undo-tree-id5198 . -1) (undo-tree-id5199 . -1) (undo-tree-id5200 . -1) (undo-tree-id5201 . -1) (undo-tree-id5202 . -1) 4846 (4845 . 4846) (4844 . 4845) (4843 . 4844) (#("}" 0 1 (fontified nil)) . -4842) (4842 . 4843) (#("}" 0 1 (fontified nil)) . -4842) (4841 . 4843) (4839 . 4842) (4838 . 4839)) nil (26513 18306 22494 346000) 0 nil])
([nil nil ((4850 . 4851) (4849 . 4850) (4848 . 4849)) nil (26513 18306 22486 880000) 0 nil])
([nil nil ((4850 . 4851) (#("r" 0 1 (fontified t)) . 4850) (undo-tree-id5183 . -1) (undo-tree-id5184 . -1) (undo-tree-id5185 . -1) (undo-tree-id5186 . -1) (undo-tree-id5187 . -1) (undo-tree-id5188 . -1) (undo-tree-id5189 . -1) (undo-tree-id5190 . -1) (undo-tree-id5191 . -1)) nil (26513 18306 22483 324000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4857 . 4858) (#("
" 0 1 (fontified nil)) . -4905) (4855 . 4906) 4850 (t 26513 18306 44279 884000)) nil (26513 18315 912910 914000) 0 nil])
([nil nil ((#("{x^{2} -4}" 0 2 (fontified t) 2 3 (fontified t) 3 5 (fontified t) 5 9 (fontified t) 9 10 (fontified t)) . 4887) (undo-tree-id5319 . -9) (undo-tree-id5320 . -9) (undo-tree-id5321 . -9) (undo-tree-id5322 . -9) (undo-tree-id5323 . -9) (undo-tree-id5324 . -9) (undo-tree-id5325 . -9) (undo-tree-id5326 . -9) (undo-tree-id5327 . -9) (undo-tree-id5328 . -9) (undo-tree-id5329 . -9) (undo-tree-id5330 . -9) (undo-tree-id5331 . -9) (undo-tree-id5332 . -10) 4896) nil (26513 18315 912909 782000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4901 . 4902) (nil fontified nil 4892 . 4902) (4892 . 4902) 4891) nil (26513 18315 912890 328000) 0 nil])
([nil nil ((4812 . 4825) (4808 . 4812) (#(" " 0 1 (fontified t)) . 4808) (undo-tree-id5333 . -1) (undo-tree-id5334 . -1) (undo-tree-id5335 . -1) (undo-tree-id5336 . -1) (undo-tree-id5337 . -1) (undo-tree-id5338 . -1) (undo-tree-id5339 . -1) (undo-tree-id5340 . -1) (undo-tree-id5341 . -1) (undo-tree-id5342 . -1) (undo-tree-id5343 . -1) 4809 (4800 . 4809) (#("each " 0 5 (fontified t)) . -4800) (undo-tree-id5344 . -5) (undo-tree-id5345 . -1) (undo-tree-id5346 . -1) (undo-tree-id5347 . -1) (undo-tree-id5348 . -1) (undo-tree-id5349 . -1) (undo-tree-id5350 . -1) (undo-tree-id5351 . -1) (undo-tree-id5352 . -2) (undo-tree-id5353 . -2) (undo-tree-id5354 . -2) (undo-tree-id5355 . -2) (undo-tree-id5356 . -2) (undo-tree-id5357 . -2) (undo-tree-id5358 . -2) (undo-tree-id5359 . -3) (undo-tree-id5360 . -3) (undo-tree-id5361 . -3) (undo-tree-id5362 . -3) (undo-tree-id5363 . -3) (undo-tree-id5364 . -3) (undo-tree-id5365 . -3) (undo-tree-id5366 . -4) (undo-tree-id5367 . -4) (undo-tree-id5368 . -4) (undo-tree-id5369 . -4) (undo-tree-id5370 . -4) (undo-tree-id5371 . -4) (undo-tree-id5372 . -4) (undo-tree-id5373 . -5) (undo-tree-id5374 . -5) (undo-tree-id5375 . -5) (undo-tree-id5376 . -5) (undo-tree-id5377 . -5) (undo-tree-id5378 . -5) (undo-tree-id5379 . -5) (undo-tree-id5380 . -5) (undo-tree-id5381 . -5) (undo-tree-id5382 . -5) 4805 (4786 . 4805) (#(":" 0 1 (fontified t)) . -4786) (undo-tree-id5383 . -1) (undo-tree-id5384 . -1) (undo-tree-id5385 . -1) (undo-tree-id5386 . -1) (undo-tree-id5387 . -1) (undo-tree-id5388 . -1) (undo-tree-id5389 . -1) (undo-tree-id5390 . -1) (undo-tree-id5391 . -1) (undo-tree-id5392 . -1) (undo-tree-id5393 . -1) (undo-tree-id5394 . -1) (undo-tree-id5395 . -1) (undo-tree-id5396 . -1) (undo-tree-id5397 . -1) (undo-tree-id5398 . -1) (undo-tree-id5399 . -1) (undo-tree-id5400 . -1) (undo-tree-id5401 . -1) (undo-tree-id5402 . -1) (undo-tree-id5403 . -1) (undo-tree-id5404 . -1) (undo-tree-id5405 . -1) (undo-tree-id5406 . -1) 4787 (#(" " 0 1 (fontified t)) . 4787) (undo-tree-id5407 . -1) (undo-tree-id5408 . -1) (undo-tree-id5409 . -1) (undo-tree-id5410 . -1) (undo-tree-id5411 . -1) (undo-tree-id5412 . -1) (undo-tree-id5413 . -1) (undo-tree-id5414 . -1) (undo-tree-id5415 . -1) (undo-tree-id5416 . -1) (undo-tree-id5417 . -1) (undo-tree-id5418 . -1) (undo-tree-id5419 . -1) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) 4788 (4787 . 4788) (t 26513 18315 941561 750000)) nil (26513 18355 45725 88000) 0 nil])
([nil nil ((4737 . 4738) (t 26513 18355 75617 707000) 4736) nil (26513 18380 780559 817000) 0 nil])
([nil nil ((1950 . 1951) (1949 . 1950) (t 26513 18380 810263 579000)) nil (26513 18516 658585 428000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 1949) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1) (undo-tree-id5705 . -1) (undo-tree-id5706 . -1) (undo-tree-id5707 . -1) (undo-tree-id5708 . -1) (undo-tree-id5709 . -1) (undo-tree-id5710 . -1) (undo-tree-id5711 . -1) (undo-tree-id5712 . -1) (undo-tree-id5713 . -1) (undo-tree-id5714 . -1) (undo-tree-id5715 . -1) (undo-tree-id5716 . -1) (undo-tree-id5717 . -1) (undo-tree-id5718 . -1) (undo-tree-id5719 . -1) (undo-tree-id5720 . -1) (undo-tree-id5721 . -1) (undo-tree-id5722 . -1) (undo-tree-id5723 . -1)) nil (26513 18516 658584 436000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field nil 2007 2010 nil nil nil nil #s(yas--field nil 2019 2028 nil nil nil nil #s(yas--field nil 2053 2062 nil nil nil nil #s(yas--field nil 2064 2075 nil nil nil nil nil)))) #s(yas--field nil 2019 2028 nil nil nil nil #s(yas--field nil 2053 2062 nil nil nil nil #s(yas--field nil 2064 2075 nil nil nil nil nil))) #s(yas--field nil 2053 2062 nil nil nil nil #s(yas--field nil 2064 2075 nil nil nil nil nil)) #s(yas--field nil 2064 2075 nil nil nil nil nil)) nil 8 nil #s(yas--field nil 2007 2010 nil nil nil nil #s(yas--field nil 2019 2028 nil nil nil nil #s(yas--field nil 2053 2062 nil nil nil nil #s(yas--field nil 2064 2075 nil nil nil nil nil)))) nil nil)) (2031 . 2033) (1951 . 2089) (#("fig" 0 3 (fontified t)) . 1951) (undo-tree-id5635 . -3) (undo-tree-id5636 . -1) (undo-tree-id5637 . -1) (undo-tree-id5638 . -1) (undo-tree-id5639 . -1) (undo-tree-id5640 . -1) (undo-tree-id5641 . -1) (undo-tree-id5642 . -1) (undo-tree-id5643 . -1) (undo-tree-id5644 . -1) (undo-tree-id5645 . -1) (undo-tree-id5646 . -1) (undo-tree-id5647 . -1) (undo-tree-id5648 . -1) (undo-tree-id5649 . -1) (undo-tree-id5650 . -2) (undo-tree-id5651 . -2) (undo-tree-id5652 . -2) (undo-tree-id5653 . -2) (undo-tree-id5654 . -2) (undo-tree-id5655 . -2) (undo-tree-id5656 . -2) (undo-tree-id5657 . -2) (undo-tree-id5658 . -2) (undo-tree-id5659 . -2) (undo-tree-id5660 . -2) (undo-tree-id5661 . -2) (undo-tree-id5662 . -2) (undo-tree-id5663 . -2) (undo-tree-id5664 . -2) (undo-tree-id5665 . -2) (undo-tree-id5666 . -2) (undo-tree-id5667 . -2) (undo-tree-id5668 . -2) (undo-tree-id5669 . -2) (undo-tree-id5670 . -3) (undo-tree-id5671 . -3) (undo-tree-id5672 . -3) (undo-tree-id5673 . -3) (undo-tree-id5674 . -3) (undo-tree-id5675 . -3) (undo-tree-id5676 . -3) (undo-tree-id5677 . -3) (undo-tree-id5678 . -3) (undo-tree-id5679 . -3) (undo-tree-id5680 . -3) (undo-tree-id5681 . -3) (undo-tree-id5682 . -3) (undo-tree-id5683 . -3) (undo-tree-id5684 . -3) (undo-tree-id5685 . -3) (undo-tree-id5686 . -3) (undo-tree-id5687 . -3) (undo-tree-id5688 . -3) (undo-tree-id5689 . -3) (undo-tree-id5690 . -3) (undo-tree-id5691 . -3) (undo-tree-id5692 . -3) (undo-tree-id5693 . -3) (undo-tree-id5694 . -3) (undo-tree-id5695 . -3) (undo-tree-id5696 . -3) (undo-tree-id5697 . -3) (undo-tree-id5698 . -3) (undo-tree-id5699 . -3) (undo-tree-id5700 . -3) (undo-tree-id5701 . -3) (1951 . 1954) (1950 . 1951) (1949 . 1950) 1949) nil (26513 18516 658573 614000) 0 nil])
([nil nil ((apply yas--snippet-revive 1951 2091 #s(yas--snippet nil (#s(yas--field nil 2007 2010 nil nil nil nil #s(yas--field nil 2019 2028 nil nil nil nil #s(yas--field nil 2053 2062 nil nil nil nil #s(yas--field nil 2064 2075 nil nil nil nil nil)))) #s(yas--field nil 2019 2028 nil nil nil nil #s(yas--field nil 2053 2062 nil nil nil nil #s(yas--field nil 2064 2075 nil nil nil nil nil))) #s(yas--field nil 2053 2062 nil nil nil nil #s(yas--field nil 2064 2075 nil nil nil nil nil)) #s(yas--field nil 2064 2075 nil nil nil nil nil)) nil 8 nil #s(yas--field nil 2007 2010 nil nil nil nil #s(yas--field nil 2019 2028 nil nil nil nil #s(yas--field nil 2053 2062 nil nil nil nil #s(yas--field nil 2064 2075 nil nil nil nil nil)))) nil nil))) nil (26513 18516 658264 779000) 0 nil])
([nil nil ((2023 . 2024) (2022 . 2023) (2021 . 2022) (#("m" 0 1 (face font-lock-constant-face fontified t)) . -2021) (undo-tree-id5468 . -1) (undo-tree-id5469 . -1) (undo-tree-id5470 . -1) (undo-tree-id5471 . -1) (undo-tree-id5472 . -1) (undo-tree-id5473 . -1) (undo-tree-id5474 . -1) (undo-tree-id5475 . -1) (undo-tree-id5476 . -1) (undo-tree-id5477 . -1) (undo-tree-id5478 . -1) (undo-tree-id5479 . -1) (undo-tree-id5480 . -1) (undo-tree-id5481 . -1) (undo-tree-id5482 . -1) (undo-tree-id5483 . -1) (undo-tree-id5484 . -1) (undo-tree-id5485 . -1) (undo-tree-id5486 . -1) (undo-tree-id5487 . -1) (undo-tree-id5488 . -1) (undo-tree-id5489 . -1) (undo-tree-id5490 . -1) (undo-tree-id5491 . -1) (undo-tree-id5492 . -1) (undo-tree-id5493 . -1) (undo-tree-id5494 . -1) (undo-tree-id5495 . -1) (undo-tree-id5496 . -1) (undo-tree-id5497 . -1) (undo-tree-id5498 . -1) (undo-tree-id5499 . -1) (undo-tree-id5500 . -1) (undo-tree-id5501 . -1) (undo-tree-id5502 . -1) (undo-tree-id5503 . -1) (undo-tree-id5504 . -1) (undo-tree-id5505 . -1) (undo-tree-id5506 . -1) (undo-tree-id5507 . -1) (undo-tree-id5508 . -1) (undo-tree-id5509 . -1) (undo-tree-id5510 . -1) (undo-tree-id5511 . -1) (undo-tree-id5512 . -1) (undo-tree-id5513 . -1) (undo-tree-id5514 . -1) (undo-tree-id5515 . -1) (undo-tree-id5516 . -1) (undo-tree-id5517 . -1) 2022 (#("$" 0 1 (face font-lock-constant-face fontified nil)) . -2022) (undo-tree-id5518 . -1) (undo-tree-id5519 . -1) (undo-tree-id5520 . -1) (undo-tree-id5521 . -1) (undo-tree-id5522 . -1) (undo-tree-id5523 . -1) (undo-tree-id5524 . -1) (undo-tree-id5525 . -1) (undo-tree-id5526 . -1) (undo-tree-id5527 . -1) (undo-tree-id5528 . -1) (undo-tree-id5529 . -1) (undo-tree-id5530 . -1) (undo-tree-id5531 . -1) (undo-tree-id5532 . -1) (undo-tree-id5533 . -1) (undo-tree-id5534 . -1) (undo-tree-id5535 . -1) (undo-tree-id5536 . -1) (undo-tree-id5537 . -1) (undo-tree-id5538 . -1) (undo-tree-id5539 . -1) (undo-tree-id5540 . -1) (undo-tree-id5541 . -1) (undo-tree-id5542 . -1) (undo-tree-id5543 . -1) (undo-tree-id5544 . -1) (undo-tree-id5545 . -1) (undo-tree-id5546 . -1) (undo-tree-id5547 . -1) (#("$" 0 1 (face font-lock-constant-face fontified t)) . 2023) (#("_" 0 1 (face font-lock-constant-face fontified t)) . -2023) (undo-tree-id5548 . -1) (undo-tree-id5549 . -1) (undo-tree-id5550 . -1) (undo-tree-id5551 . -1) (undo-tree-id5552 . -1) (undo-tree-id5553 . -1) (undo-tree-id5554 . -1) (undo-tree-id5555 . -1) (undo-tree-id5556 . -1) (undo-tree-id5557 . -1) (undo-tree-id5558 . -1) (undo-tree-id5559 . -1) (undo-tree-id5560 . -1) (undo-tree-id5561 . -1) (undo-tree-id5562 . -1) (undo-tree-id5563 . -1) (undo-tree-id5564 . -1) (undo-tree-id5565 . -1) (undo-tree-id5566 . -1) (undo-tree-id5567 . -1) (undo-tree-id5568 . -1) (undo-tree-id5569 . -1) (undo-tree-id5570 . -1) (undo-tree-id5571 . -1) (undo-tree-id5572 . -1) (undo-tree-id5573 . -1) (undo-tree-id5574 . -1) (undo-tree-id5575 . -1) (undo-tree-id5576 . -1) (undo-tree-id5577 . -1) 2024 (#("{" 0 1 (face (font-lock-constant-face shadow) fontified nil)) . -2024) (undo-tree-id5578 . -1) (undo-tree-id5579 . -1) (undo-tree-id5580 . -1) (undo-tree-id5581 . -1) (undo-tree-id5582 . -1) (undo-tree-id5583 . -1) (undo-tree-id5584 . -1) (undo-tree-id5585 . -1) (undo-tree-id5586 . -1) (undo-tree-id5587 . -1) (undo-tree-id5588 . -1) (undo-tree-id5589 . -1) (undo-tree-id5590 . -1) (undo-tree-id5591 . -1) (undo-tree-id5592 . -1) (undo-tree-id5593 . -1) (undo-tree-id5594 . -1) (undo-tree-id5595 . -1) (undo-tree-id5596 . -1) (undo-tree-id5597 . -1) (undo-tree-id5598 . -1) (undo-tree-id5599 . -1) (undo-tree-id5600 . -1) (undo-tree-id5601 . -1) (undo-tree-id5602 . -1) (undo-tree-id5603 . -1) (undo-tree-id5604 . -1) (undo-tree-id5605 . -1) (undo-tree-id5606 . -1) (undo-tree-id5607 . -1) (#("}" 0 1 (face (font-lock-constant-face shadow) fontified t)) . 2025) (#("l" 0 1 (face font-lock-constant-face fontified t)) . -2025) (undo-tree-id5608 . -1) (undo-tree-id5609 . -1) (undo-tree-id5610 . -1) (undo-tree-id5611 . -1) (undo-tree-id5612 . -1) (undo-tree-id5613 . -1) (undo-tree-id5614 . -1) (undo-tree-id5615 . -1) (undo-tree-id5616 . -1) (undo-tree-id5617 . -1) (undo-tree-id5618 . -1) (undo-tree-id5619 . -1) (undo-tree-id5620 . -1) (undo-tree-id5621 . -1) (undo-tree-id5622 . -1) (undo-tree-id5623 . -1) (undo-tree-id5624 . -1) (undo-tree-id5625 . -1) 2026 (2025 . 2026) (2023 . 2026) (2022 . 2024) (2019 . 2022) (#("fig_title" 0 9 (face font-lock-constant-face fontified t)) . 2019) (undo-tree-id5626 . -8) (undo-tree-id5627 . -8) (undo-tree-id5628 . -8) (undo-tree-id5629 . -8) (undo-tree-id5630 . -8) (undo-tree-id5631 . -8) (undo-tree-id5632 . -9) (undo-tree-id5633 . -9) (undo-tree-id5634 . -9) 2027) nil (26513 18516 658260 281000) 0 nil])
([nil nil ((2035 . 2036) (2033 . 2036) (2032 . 2034) (2029 . 2032) (2028 . 2029) (2027 . 2028) (2024 . 2027)) nil (26513 18516 657903 278000) 0 nil])
([nil nil ((#("$" 0 1 (face font-lock-constant-face fontified t)) . 2032) (undo-tree-id5466 . -1) (undo-tree-id5467 . -1)) nil (26513 18516 657902 634000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-constant-face fontified t)) . 2022) (undo-tree-id5451 . -1) (undo-tree-id5452 . -1) (undo-tree-id5453 . -1) (undo-tree-id5454 . -1) (undo-tree-id5455 . -1) (undo-tree-id5456 . -1) (undo-tree-id5457 . -1) (undo-tree-id5458 . -1) (undo-tree-id5459 . -1) (undo-tree-id5460 . -1) (undo-tree-id5461 . -1) (undo-tree-id5462 . -1) (undo-tree-id5463 . -1) (undo-tree-id5464 . -1) (undo-tree-id5465 . -1)) nil (26513 18516 657901 371000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-constant-face fontified t)) . 2026) (undo-tree-id5443 . -1) (undo-tree-id5444 . -1) (undo-tree-id5445 . -1) (undo-tree-id5446 . -1) (undo-tree-id5447 . -1) (undo-tree-id5448 . -1) (undo-tree-id5449 . -1) (undo-tree-id5450 . -1)) nil (26513 18516 657894 855000) 0 nil])
([nil nil ((#("{" 0 1 (face font-lock-constant-face fontified t)) . 2031) (undo-tree-id5427 . -1) (undo-tree-id5428 . -1) (undo-tree-id5429 . -1) (undo-tree-id5430 . -1) (undo-tree-id5431 . -1) (undo-tree-id5432 . -1) (undo-tree-id5433 . -1) (undo-tree-id5434 . -1) (undo-tree-id5435 . -1) (undo-tree-id5436 . -1) (undo-tree-id5437 . -1) (undo-tree-id5438 . -1) (undo-tree-id5439 . -1) (undo-tree-id5440 . -1) (undo-tree-id5441 . -1) (undo-tree-id5442 . -1)) nil (26513 18516 657890 966000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . 2032) (undo-tree-id5424 . 1) (undo-tree-id5425 . -1) (undo-tree-id5426 . -1)) nil (26513 18573 93207 537000) 0 nil])
([nil nil ((#("$" 0 1 (face font-lock-constant-face fontified t)) . 2032) (undo-tree-id5763 . -1) (undo-tree-id5764 . -1)) nil (26513 18578 809617 992000) 0 nil] [nil nil ((2032 . 2036)) ((#(".png" 0 4 (face font-lock-constant-face fontified t)) . 2032) (undo-tree-id5753 . -4) (undo-tree-id5754 . -4) (undo-tree-id5755 . -4) (undo-tree-id5756 . -4) (undo-tree-id5757 . -4) (undo-tree-id5758 . -4) (undo-tree-id5759 . -4) (undo-tree-id5760 . -4) (undo-tree-id5761 . -4) (undo-tree-id5762 . -4)) (26513 18572 260326 249000) 0 nil])
([nil nil ((2033 . 2036) (2032 . 2033)) nil (26513 18578 809608 321000) 0 nil])
([nil nil ((#("  \\caption{\\label{fig:fig_label} fig_caption  }
" 0 2 (fontified t) 2 10 (face font-lock-keyword-face fontified t) 10 11 (fontified t) 11 17 (face font-lock-keyword-face fontified t) 17 18 (fontified t) 18 31 (face font-lock-constant-face fontified t) 31 48 (fontified t)) . 2040) (undo-tree-id5724 . -47) (undo-tree-id5725 . -46) (undo-tree-id5727 . -46) (undo-tree-id5729 . -46) (undo-tree-id5731 . -46) (undo-tree-id5733 . -46) (undo-tree-id5735 . -46) (undo-tree-id5737 . -46) (undo-tree-id5739 . -46) (undo-tree-id5741 . -46) (undo-tree-id5743 . -46) (undo-tree-id5745 . -46) (undo-tree-id5747 . -46) (undo-tree-id5749 . -48) 2086 (t 26513 18516 681112 509000)) ((2040 . 2088)) (26513 18571 910533 673000) 0 nil])
([nil nil ((apply -2 2039 2089 undo--wrap-and-run-primitive-undo 2039 2089 ((2041 . 2043) 2085))) nil (26513 18583 995977 617000) 0 nil])
([nil nil ((#("$" 0 1 (face font-lock-constant-face fontified t)) . 2036) (undo-tree-id5750 . 1) (undo-tree-id5752 . -1) (t 26513 18521 695201 455000)) ((2036 . 2037) (t 26513 18556 448789 760000)) (26513 18571 843099 864000) 0 nil])
([nil nil ((apply 2 2039 2086 undo--wrap-and-run-primitive-undo 2039 2086 ((#("% " 0 2 (face font-lock-comment-face fontified t)) . -2041) 2084))) nil (26513 18623 228462 462000) 0 nil])
([nil nil ((2155 . 2156) (t 26513 18556 448789 760000) 2154) ((#("
" 0 1 (fontified t)) . 2155)) (26513 18571 842930 226000) 0 nil])
([nil nil ((2113 . 2114) (#("m" 0 1 (face font-lock-constant-face fontified nil)) . 2113) (2111 . 2114) (#("ex" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil)) . 2111) (2111 . 2113) (2104 . 2112) (#("erf" 0 3 (fontified nil)) . 2104) (undo-tree-id6753 . -1) (undo-tree-id6754 . -1) (undo-tree-id6755 . -1) (undo-tree-id6756 . -1) (undo-tree-id6757 . -1) (undo-tree-id6758 . -1) (undo-tree-id6759 . -1) (undo-tree-id6760 . -1) (undo-tree-id6761 . -1) (undo-tree-id6762 . -1) (undo-tree-id6763 . -1) (undo-tree-id6764 . -1) (undo-tree-id6765 . -1) (undo-tree-id6766 . -1) (undo-tree-id6767 . -1) (undo-tree-id6768 . -1) (undo-tree-id6769 . -1) (undo-tree-id6770 . -1) (undo-tree-id6771 . -1) (undo-tree-id6772 . -1) (undo-tree-id6773 . -2) (undo-tree-id6774 . -2) (undo-tree-id6775 . -2) (undo-tree-id6776 . -2) (undo-tree-id6777 . -2) (undo-tree-id6778 . -2) (undo-tree-id6779 . -2) (undo-tree-id6780 . -2) (undo-tree-id6781 . -2) (undo-tree-id6782 . -2) (undo-tree-id6783 . -2) (undo-tree-id6784 . -2) (undo-tree-id6785 . -2) (undo-tree-id6786 . -2) (undo-tree-id6787 . -2) (undo-tree-id6788 . -2) (undo-tree-id6789 . -2) (undo-tree-id6790 . -2) (undo-tree-id6791 . -2) (undo-tree-id6792 . -2) (undo-tree-id6793 . -3) (undo-tree-id6794 . -3) (undo-tree-id6795 . -3) (undo-tree-id6796 . -3) (undo-tree-id6797 . -3) (undo-tree-id6798 . -3) (undo-tree-id6799 . -3) (undo-tree-id6800 . -3) (undo-tree-id6801 . -3) (undo-tree-id6802 . -3) (undo-tree-id6803 . -3) (undo-tree-id6804 . -3) (undo-tree-id6805 . -3) (undo-tree-id6806 . -3) (undo-tree-id6807 . -3) (undo-tree-id6808 . -3) (undo-tree-id6809 . -3) (undo-tree-id6810 . -3) (undo-tree-id6811 . -3) (undo-tree-id6812 . -3) (undo-tree-id6813 . -3) (2079 . 2107) (#("take" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 2079) (undo-tree-id6814 . -1) (undo-tree-id6815 . -1) (undo-tree-id6816 . -1) (undo-tree-id6817 . -1) (undo-tree-id6818 . -1) (undo-tree-id6819 . -1) (undo-tree-id6820 . -1) (undo-tree-id6821 . -1) (undo-tree-id6822 . -1) (undo-tree-id6823 . -1) (undo-tree-id6824 . -1) (undo-tree-id6825 . -1) (undo-tree-id6826 . -1) (undo-tree-id6827 . -1) (undo-tree-id6828 . -1) (undo-tree-id6829 . -1) (undo-tree-id6830 . -1) (undo-tree-id6831 . -1) (undo-tree-id6832 . -1) (undo-tree-id6833 . -1) (undo-tree-id6834 . -2) (undo-tree-id6835 . -2) (undo-tree-id6836 . -2) (undo-tree-id6837 . -2) (undo-tree-id6838 . -2) (undo-tree-id6839 . -2) (undo-tree-id6840 . -2) (undo-tree-id6841 . -2) (undo-tree-id6842 . -2) (undo-tree-id6843 . -2) (undo-tree-id6844 . -2) (undo-tree-id6845 . -2) (undo-tree-id6846 . -2) (undo-tree-id6847 . -2) (undo-tree-id6848 . -2) (undo-tree-id6849 . -2) (undo-tree-id6850 . -2) (undo-tree-id6851 . -2) (undo-tree-id6852 . -2) (undo-tree-id6853 . -2) (undo-tree-id6854 . -3) (undo-tree-id6855 . -3) (undo-tree-id6856 . -3) (undo-tree-id6857 . -3) (undo-tree-id6858 . -3) (undo-tree-id6859 . -3) (undo-tree-id6860 . -3) (undo-tree-id6861 . -3) (undo-tree-id6862 . -3) (undo-tree-id6863 . -3) (undo-tree-id6864 . -3) (undo-tree-id6865 . -3) (undo-tree-id6866 . -3) (undo-tree-id6867 . -3) (undo-tree-id6868 . -3) (undo-tree-id6869 . -3) (undo-tree-id6870 . -3) (undo-tree-id6871 . -3) (undo-tree-id6872 . -3) (undo-tree-id6873 . -3) (undo-tree-id6874 . -4) (undo-tree-id6875 . -4) (undo-tree-id6876 . -4) (undo-tree-id6877 . -4) (undo-tree-id6878 . -4) (undo-tree-id6879 . -4) (undo-tree-id6880 . -4) (undo-tree-id6881 . -4) (undo-tree-id6882 . -4) (undo-tree-id6883 . -4) (undo-tree-id6884 . -4) (undo-tree-id6885 . -4) (undo-tree-id6886 . -4) (undo-tree-id6887 . -4) (undo-tree-id6888 . -4) (undo-tree-id6889 . -4) (undo-tree-id6890 . -4) (undo-tree-id6891 . -4) (undo-tree-id6892 . -4) (undo-tree-id6893 . -4) (undo-tree-id6894 . -3) (undo-tree-id6895 . -3) (undo-tree-id6896 . -3) (undo-tree-id6897 . -3) (undo-tree-id6898 . -3) (undo-tree-id6899 . -3) (undo-tree-id6900 . -3) (undo-tree-id6901 . -4) (2073 . 2083) (#("Igu" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 2073) (undo-tree-id6902 . -1) (undo-tree-id6903 . -1) (undo-tree-id6904 . -1) (undo-tree-id6905 . -1) (undo-tree-id6906 . -1) (undo-tree-id6907 . -1) (undo-tree-id6908 . -1) (undo-tree-id6909 . -1) (undo-tree-id6910 . -1) (undo-tree-id6911 . -1) (undo-tree-id6912 . -1) (undo-tree-id6913 . -1) (undo-tree-id6914 . -1) (undo-tree-id6915 . -1) (undo-tree-id6916 . -1) (undo-tree-id6917 . -1) (undo-tree-id6918 . -1) (undo-tree-id6919 . -1) (undo-tree-id6920 . -1) (undo-tree-id6921 . -1) (undo-tree-id6922 . -2) (undo-tree-id6923 . -2) (undo-tree-id6924 . -2) (undo-tree-id6925 . -2) (undo-tree-id6926 . -2) (undo-tree-id6927 . -2) (undo-tree-id6928 . -2) (undo-tree-id6929 . -2) (undo-tree-id6930 . -2) (undo-tree-id6931 . -2) (undo-tree-id6932 . -2) (undo-tree-id6933 . -2) (undo-tree-id6934 . -2) (undo-tree-id6935 . -2) (undo-tree-id6936 . -2) (undo-tree-id6937 . -2) (undo-tree-id6938 . -2) (undo-tree-id6939 . -2) (undo-tree-id6940 . -2) (undo-tree-id6941 . -2) (undo-tree-id6942 . -3) (undo-tree-id6943 . -3) (undo-tree-id6944 . -3) (undo-tree-id6945 . -3) (undo-tree-id6946 . -3) (undo-tree-id6947 . -3) (undo-tree-id6948 . -3) (undo-tree-id6949 . -3) (undo-tree-id6950 . -3) (undo-tree-id6951 . -3) (undo-tree-id6952 . -3) (undo-tree-id6953 . -3) (undo-tree-id6954 . -3) (undo-tree-id6955 . -3) (undo-tree-id6956 . -3) (undo-tree-id6957 . -3) (undo-tree-id6958 . -3) (undo-tree-id6959 . -3) (undo-tree-id6960 . -3) (undo-tree-id6961 . -3) (undo-tree-id6962 . -2) (undo-tree-id6963 . -2) (undo-tree-id6964 . -2) (undo-tree-id6965 . -2) (undo-tree-id6966 . -2) (undo-tree-id6967 . -2) (undo-tree-id6968 . -3) (2072 . 2076) (#("fig_caption" 0 10 (fontified t) 10 11 (fontified t)) . 2072) (undo-tree-id6969 . -10) (undo-tree-id6970 . -10) (undo-tree-id6971 . -10) (undo-tree-id6972 . -10) (undo-tree-id6973 . -10) (undo-tree-id6974 . -10) (undo-tree-id6975 . -10) (undo-tree-id6976 . -10) (undo-tree-id6977 . -10) (undo-tree-id6978 . -10) (undo-tree-id6979 . -10) (undo-tree-id6980 . -10) (undo-tree-id6981 . -10) (undo-tree-id6982 . -10) (undo-tree-id6983 . -10) (undo-tree-id6984 . -10) (undo-tree-id6985 . -10) (undo-tree-id6986 . -10) (undo-tree-id6987 . -10) (undo-tree-id6988 . -10) (undo-tree-id6989 . -10) (undo-tree-id6990 . -10) (undo-tree-id6991 . -10) (undo-tree-id6992 . -10) (undo-tree-id6993 . -10) (undo-tree-id6994 . -10) (undo-tree-id6995 . -10) (undo-tree-id6996 . -10) (undo-tree-id6997 . -10) (undo-tree-id6998 . -10) (undo-tree-id6999 . -10) (undo-tree-id7000 . -10) (undo-tree-id7001 . -10) (undo-tree-id7002 . -10) (undo-tree-id7003 . -10) (undo-tree-id7004 . -10) (undo-tree-id7005 . -10) (undo-tree-id7006 . -10) (undo-tree-id7007 . -10)) ((2072 . 2083) (#("FIgu" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 2072) (undo-tree-id6256 . -2) (undo-tree-id6257 . -2) (undo-tree-id6258 . -2) (undo-tree-id6259 . -2) (undo-tree-id6260 . -2) (undo-tree-id6261 . -2) (undo-tree-id6262 . -2) (undo-tree-id6263 . -2) (undo-tree-id6264 . -2) (undo-tree-id6265 . -2) (undo-tree-id6266 . -2) (undo-tree-id6267 . -2) (undo-tree-id6268 . -2) (undo-tree-id6269 . -2) (undo-tree-id6270 . -2) (undo-tree-id6271 . -2) (undo-tree-id6272 . -2) (undo-tree-id6273 . -2) (undo-tree-id6274 . -2) (undo-tree-id6275 . -2) (undo-tree-id6276 . -3) (undo-tree-id6277 . -3) (undo-tree-id6278 . -3) (undo-tree-id6279 . -3) (undo-tree-id6280 . -3) (undo-tree-id6281 . -3) (undo-tree-id6282 . -3) (undo-tree-id6283 . -3) (undo-tree-id6284 . -3) (undo-tree-id6285 . -3) (undo-tree-id6286 . -3) (undo-tree-id6287 . -3) (undo-tree-id6288 . -3) (undo-tree-id6289 . -3) (undo-tree-id6290 . -3) (undo-tree-id6291 . -3) (undo-tree-id6292 . -3) (undo-tree-id6293 . -3) (undo-tree-id6294 . -3) (undo-tree-id6295 . -3) (undo-tree-id6296 . -4) (undo-tree-id6297 . -4) (undo-tree-id6298 . -4) (undo-tree-id6299 . -4) (undo-tree-id6300 . -4) (undo-tree-id6301 . -4) (undo-tree-id6302 . -4) (undo-tree-id6303 . -4) (undo-tree-id6304 . -4) (undo-tree-id6305 . -4) (undo-tree-id6306 . -4) (undo-tree-id6307 . -4) (undo-tree-id6308 . -4) (undo-tree-id6309 . -4) (undo-tree-id6310 . -4) (undo-tree-id6311 . -4) (undo-tree-id6312 . -4) (undo-tree-id6313 . -4) (undo-tree-id6314 . -4) (undo-tree-id6315 . -4) (undo-tree-id6316 . -3) (undo-tree-id6317 . -3) (undo-tree-id6318 . -3) (undo-tree-id6319 . -3) (undo-tree-id6320 . -3) (undo-tree-id6321 . -3) (undo-tree-id6322 . -1) (undo-tree-id6323 . -1) (undo-tree-id6324 . -1) (undo-tree-id6325 . -1) (undo-tree-id6326 . -1) (undo-tree-id6327 . -1) (undo-tree-id6328 . -1) (undo-tree-id6329 . -1) (undo-tree-id6330 . -1) (undo-tree-id6331 . -1) (undo-tree-id6332 . -1) (undo-tree-id6333 . -1) (undo-tree-id6334 . -1) (undo-tree-id6335 . -1) (undo-tree-id6336 . -1) (undo-tree-id6337 . -1) (undo-tree-id6338 . -1) (undo-tree-id6339 . -1) (undo-tree-id6340 . -1) (undo-tree-id6341 . -1) (undo-tree-id6342 . -1) (undo-tree-id6343 . -1) (undo-tree-id6344 . -1) (undo-tree-id6345 . -1) (undo-tree-id6346 . -1) (undo-tree-id6347 . -1) (undo-tree-id6348 . -1) (undo-tree-id6349 . -1) (undo-tree-id6350 . -1) (undo-tree-id6351 . -1) (undo-tree-id6352 . -1) (undo-tree-id6353 . -1) (undo-tree-id6354 . -1) (undo-tree-id6355 . -1) (undo-tree-id6356 . -1) (undo-tree-id6357 . -1) (undo-tree-id6358 . -1) (undo-tree-id6359 . -1) (undo-tree-id6360 . -1) (undo-tree-id6361 . -1) (undo-tree-id6362 . -1) (undo-tree-id6363 . -1) (undo-tree-id6364 . -1) (undo-tree-id6365 . -1) (undo-tree-id6366 . -1) (undo-tree-id6367 . -1) (undo-tree-id6368 . -1) (undo-tree-id6369 . -1) (undo-tree-id6370 . -1) (undo-tree-id6371 . -1) (undo-tree-id6372 . -1) (undo-tree-id6373 . -1) (undo-tree-id6374 . -1) (undo-tree-id6375 . -1) (undo-tree-id6376 . -1) (undo-tree-id6377 . -1) (undo-tree-id6378 . -1) (undo-tree-id6379 . -1) (undo-tree-id6380 . -1) (undo-tree-id6381 . -1) (undo-tree-id6382 . -1) (undo-tree-id6383 . -1) (undo-tree-id6384 . -1) (undo-tree-id6385 . -1) (undo-tree-id6386 . -1) (undo-tree-id6387 . -1) (undo-tree-id6388 . -1) (undo-tree-id6389 . -1) (undo-tree-id6390 . -1) (undo-tree-id6391 . -1) (undo-tree-id6392 . -1) (undo-tree-id6393 . -1) (undo-tree-id6394 . -1) (undo-tree-id6395 . -1) (undo-tree-id6396 . -1) (undo-tree-id6397 . -1) (undo-tree-id6398 . -1) (undo-tree-id6399 . -1) (undo-tree-id6400 . -1) (undo-tree-id6401 . -1) (undo-tree-id6402 . -1) (undo-tree-id6403 . -1) (undo-tree-id6404 . -1) (undo-tree-id6405 . -1) (undo-tree-id6406 . -1) (undo-tree-id6407 . -1) (undo-tree-id6408 . -1) (undo-tree-id6409 . -1) (undo-tree-id6410 . -1) (undo-tree-id6411 . -1) (undo-tree-id6412 . -1) (undo-tree-id6413 . -1) (undo-tree-id6414 . -1) (undo-tree-id6415 . -1) (undo-tree-id6416 . -1) (undo-tree-id6417 . -1) (undo-tree-id6418 . -1) (undo-tree-id6419 . -1) (undo-tree-id6420 . -1) (undo-tree-id6421 . -1) (undo-tree-id6422 . -1) (undo-tree-id6423 . -1) (undo-tree-id6424 . -1) (undo-tree-id6425 . -1) (undo-tree-id6426 . -1) (undo-tree-id6427 . -1) (undo-tree-id6428 . -1) (undo-tree-id6429 . -1) (undo-tree-id6430 . -1) (undo-tree-id6431 . -1) (undo-tree-id6432 . -1) (undo-tree-id6433 . -1) (undo-tree-id6434 . -1) (undo-tree-id6435 . -1) (undo-tree-id6436 . -1) (undo-tree-id6437 . -1) (undo-tree-id6438 . -1) (undo-tree-id6439 . -1) (undo-tree-id6440 . -1) (undo-tree-id6441 . -1) (undo-tree-id6442 . -1) (undo-tree-id6443 . -1) (undo-tree-id6444 . -1) (undo-tree-id6445 . -1) (undo-tree-id6446 . -1) (undo-tree-id6447 . -1) (undo-tree-id6448 . -1) (undo-tree-id6449 . -1) (undo-tree-id6450 . -1) (undo-tree-id6451 . -1) (undo-tree-id6452 . -1) (undo-tree-id6453 . -1) (undo-tree-id6454 . -1) (undo-tree-id6455 . -1) (undo-tree-id6456 . -1) (undo-tree-id6457 . -1) (undo-tree-id6458 . -1) (undo-tree-id6459 . -1) (undo-tree-id6460 . -1) (undo-tree-id6461 . -1) (undo-tree-id6462 . -1) (undo-tree-id6463 . -1) (undo-tree-id6464 . -1) (undo-tree-id6465 . -1) (undo-tree-id6466 . -1) (undo-tree-id6467 . -1) (undo-tree-id6468 . -1) (undo-tree-id6469 . -1) (undo-tree-id6470 . -4) (undo-tree-id6471 . -1) (2073 . 2076) (#("igure take" 0 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil)) . 2073) (undo-tree-id6472 . -7) (undo-tree-id6473 . -7) (undo-tree-id6474 . -7) (undo-tree-id6475 . -7) (undo-tree-id6476 . -7) (undo-tree-id6477 . -7) (undo-tree-id6478 . -7) (undo-tree-id6479 . -7) (undo-tree-id6480 . -7) (undo-tree-id6481 . -7) (undo-tree-id6482 . -7) (undo-tree-id6483 . -7) (undo-tree-id6484 . -7) (undo-tree-id6485 . -7) (undo-tree-id6486 . -7) (undo-tree-id6487 . -7) (undo-tree-id6488 . -7) (undo-tree-id6489 . -7) (undo-tree-id6490 . -7) (undo-tree-id6491 . -7) (undo-tree-id6492 . -8) (undo-tree-id6493 . -8) (undo-tree-id6494 . -8) (undo-tree-id6495 . -8) (undo-tree-id6496 . -8) (undo-tree-id6497 . -8) (undo-tree-id6498 . -8) (undo-tree-id6499 . -8) (undo-tree-id6500 . -8) (undo-tree-id6501 . -8) (undo-tree-id6502 . -8) (undo-tree-id6503 . -8) (undo-tree-id6504 . -8) (undo-tree-id6505 . -8) (undo-tree-id6506 . -8) (undo-tree-id6507 . -8) (undo-tree-id6508 . -8) (undo-tree-id6509 . -8) (undo-tree-id6510 . -8) (undo-tree-id6511 . -8) (undo-tree-id6512 . -9) (undo-tree-id6513 . -9) (undo-tree-id6514 . -9) (undo-tree-id6515 . -9) (undo-tree-id6516 . -9) (undo-tree-id6517 . -9) (undo-tree-id6518 . -9) (undo-tree-id6519 . -9) (undo-tree-id6520 . -9) (undo-tree-id6521 . -9) (undo-tree-id6522 . -9) (undo-tree-id6523 . -9) (undo-tree-id6524 . -9) (undo-tree-id6525 . -9) (undo-tree-id6526 . -9) (undo-tree-id6527 . -9) (undo-tree-id6528 . -9) (undo-tree-id6529 . -9) (undo-tree-id6530 . -9) (undo-tree-id6531 . -9) (undo-tree-id6532 . -10) (undo-tree-id6533 . -10) (undo-tree-id6534 . -10) (undo-tree-id6535 . -10) (undo-tree-id6536 . -10) (undo-tree-id6537 . -10) (undo-tree-id6538 . -10) (undo-tree-id6539 . -10) (undo-tree-id6540 . -10) (undo-tree-id6541 . -10) (undo-tree-id6542 . -10) (undo-tree-id6543 . -10) (undo-tree-id6544 . -10) (undo-tree-id6545 . -10) (undo-tree-id6546 . -10) (undo-tree-id6547 . -10) (undo-tree-id6548 . -10) (undo-tree-id6549 . -10) (undo-tree-id6550 . -10) (undo-tree-id6551 . -10) (undo-tree-id6552 . -9) (undo-tree-id6553 . -9) (undo-tree-id6554 . -9) (undo-tree-id6555 . -9) (undo-tree-id6556 . -9) (undo-tree-id6557 . -9) (undo-tree-id6558 . -9) (undo-tree-id6559 . -6) (undo-tree-id6560 . -6) (undo-tree-id6561 . -6) (undo-tree-id6562 . -6) (undo-tree-id6563 . -6) (undo-tree-id6564 . -6) (undo-tree-id6565 . -6) (undo-tree-id6566 . -6) (undo-tree-id6567 . -6) (undo-tree-id6568 . -6) (undo-tree-id6569 . -6) (undo-tree-id6570 . -6) (undo-tree-id6571 . -6) (undo-tree-id6572 . -6) (undo-tree-id6573 . -6) (undo-tree-id6574 . -6) (undo-tree-id6575 . -6) (undo-tree-id6576 . -6) (undo-tree-id6577 . -6) (undo-tree-id6578 . -6) (undo-tree-id6579 . -6) (undo-tree-id6580 . -6) (undo-tree-id6581 . -6) (undo-tree-id6582 . -6) (undo-tree-id6583 . -6) (undo-tree-id6584 . -6) (undo-tree-id6585 . -6) (undo-tree-id6586 . -6) (undo-tree-id6587 . -6) (undo-tree-id6588 . -6) (undo-tree-id6589 . -6) (undo-tree-id6590 . -6) (undo-tree-id6591 . -6) (undo-tree-id6592 . -6) (undo-tree-id6593 . -6) (undo-tree-id6594 . -6) (undo-tree-id6595 . -6) (undo-tree-id6596 . -6) (undo-tree-id6597 . -6) (undo-tree-id6598 . -6) (undo-tree-id6599 . -6) (undo-tree-id6600 . -6) (undo-tree-id6601 . -6) (undo-tree-id6602 . -6) (undo-tree-id6603 . -6) (undo-tree-id6604 . -6) (undo-tree-id6605 . -6) (undo-tree-id6606 . -6) (undo-tree-id6607 . -6) (undo-tree-id6608 . -6) (undo-tree-id6609 . -6) (undo-tree-id6610 . -6) (undo-tree-id6611 . -6) (undo-tree-id6612 . -6) (undo-tree-id6613 . -6) (undo-tree-id6614 . -6) (undo-tree-id6615 . -6) (undo-tree-id6616 . -6) (undo-tree-id6617 . -6) (undo-tree-id6618 . -6) (undo-tree-id6619 . -6) (undo-tree-id6620 . -10) (undo-tree-id6621 . -6) (2079 . 2083) (#("corresp" 0 7 (fontified nil)) . 2079) (undo-tree-id6622 . -7) (undo-tree-id6623 . -7) (undo-tree-id6624 . -7) (undo-tree-id6625 . -7) (undo-tree-id6626 . -7) (undo-tree-id6627 . -7) (undo-tree-id6628 . -7) (undo-tree-id6629 . -7) (undo-tree-id6630 . -7) (undo-tree-id6631 . -7) (undo-tree-id6632 . -7) (undo-tree-id6633 . -7) (undo-tree-id6634 . -7) (undo-tree-id6635 . -7) (undo-tree-id6636 . -7) (undo-tree-id6637 . -7) (undo-tree-id6638 . -7) (undo-tree-id6639 . -7) (undo-tree-id6640 . -7) (undo-tree-id6641 . -7) (undo-tree-id6642 . -7) (undo-tree-id6643 . -7) (undo-tree-id6644 . -7) (undo-tree-id6645 . -7) (undo-tree-id6646 . -7) (undo-tree-id6647 . -7) (undo-tree-id6648 . -7) (undo-tree-id6649 . -7) (undo-tree-id6650 . -7) (undo-tree-id6651 . -7) (undo-tree-id6652 . -7) (undo-tree-id6653 . -7) (undo-tree-id6654 . -7) (undo-tree-id6655 . -7) (undo-tree-id6656 . -7) (undo-tree-id6657 . -7) (undo-tree-id6658 . -7) (undo-tree-id6659 . -7) (undo-tree-id6660 . -7) (undo-tree-id6661 . -7) (undo-tree-id6662 . -7) (undo-tree-id6663 . -7) (undo-tree-id6664 . -7) (undo-tree-id6665 . -7) (undo-tree-id6666 . -7) (undo-tree-id6667 . -7) (undo-tree-id6668 . -7) (undo-tree-id6669 . -7) (undo-tree-id6670 . -7) (undo-tree-id6671 . -7) (undo-tree-id6672 . -7) (undo-tree-id6673 . -7) (undo-tree-id6674 . -7) (undo-tree-id6675 . -7) (undo-tree-id6676 . -7) (undo-tree-id6677 . -7) (undo-tree-id6678 . -7) (undo-tree-id6679 . -7) (undo-tree-id6680 . -7) (undo-tree-id6681 . -7) (undo-tree-id6682 . -7) (undo-tree-id6683 . -7) (undo-tree-id6684 . -7) (#("onding to example erf" 0 18 (fontified nil) 18 21 (fontified nil)) . 2086) (undo-tree-id6685 . -19) (undo-tree-id6686 . -19) (undo-tree-id6687 . -19) (undo-tree-id6688 . -19) (undo-tree-id6689 . -19) (undo-tree-id6690 . -19) (undo-tree-id6691 . -19) (undo-tree-id6692 . -19) (undo-tree-id6693 . -19) (undo-tree-id6694 . -19) (undo-tree-id6695 . -19) (undo-tree-id6696 . -19) (undo-tree-id6697 . -19) (undo-tree-id6698 . -19) (undo-tree-id6699 . -19) (undo-tree-id6700 . -19) (undo-tree-id6701 . -19) (undo-tree-id6702 . -19) (undo-tree-id6703 . -19) (undo-tree-id6704 . -19) (undo-tree-id6705 . -20) (undo-tree-id6706 . -20) (undo-tree-id6707 . -20) (undo-tree-id6708 . -20) (undo-tree-id6709 . -20) (undo-tree-id6710 . -20) (undo-tree-id6711 . -20) (undo-tree-id6712 . -20) (undo-tree-id6713 . -20) (undo-tree-id6714 . -20) (undo-tree-id6715 . -20) (undo-tree-id6716 . -20) (undo-tree-id6717 . -20) (undo-tree-id6718 . -20) (undo-tree-id6719 . -20) (undo-tree-id6720 . -20) (undo-tree-id6721 . -20) (undo-tree-id6722 . -20) (undo-tree-id6723 . -20) (undo-tree-id6724 . -20) (undo-tree-id6725 . -21) (undo-tree-id6726 . -21) (undo-tree-id6727 . -21) (undo-tree-id6728 . -21) (undo-tree-id6729 . -21) (undo-tree-id6730 . -21) (undo-tree-id6731 . -21) (undo-tree-id6732 . -21) (undo-tree-id6733 . -21) (undo-tree-id6734 . -21) (undo-tree-id6735 . -21) (undo-tree-id6736 . -21) (undo-tree-id6737 . -21) (undo-tree-id6738 . -21) (undo-tree-id6739 . -21) (undo-tree-id6740 . -21) (undo-tree-id6741 . -21) (undo-tree-id6742 . -21) (undo-tree-id6743 . -21) (undo-tree-id6744 . -21) (undo-tree-id6745 . -18) (undo-tree-id6746 . -21) (undo-tree-id6747 . -18) (2104 . 2107) (#("\\eqref{}" 0 6 (face font-lock-keyword-face fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 2104) (undo-tree-id6748 . 1) (undo-tree-id6749 . -7) (undo-tree-id6750 . -7) (undo-tree-id6751 . -7) (#("ex" 0 1 (face font-lock-constant-face fontified nil) 1 2 (face font-lock-constant-face fontified nil)) . 2111) (2111 . 2113) (#("exm" 0 2 (face font-lock-constant-face fontified nil) 2 3 (face font-lock-constant-face fontified nil)) . 2111) (undo-tree-id6752 . -2) (2113 . 2114) (#("m" 0 1 (face font-lock-constant-face fontified t)) . 2113)) (26513 18624 226590 152000) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 2120 . 2121) (nil fontified nil 2111 . 2121) (2111 . 2121) (#("exm" 0 2 (face font-lock-constant-face fontified t) 2 3 (face font-lock-constant-face fontified t)) . 2111) (undo-tree-id7008 . -3) (undo-tree-id7009 . -2) (undo-tree-id7010 . -2) (undo-tree-id7011 . -3) (undo-tree-id7012 . -2) (undo-tree-id7013 . -2) (undo-tree-id7014 . -2) (undo-tree-id7015 . -2) (undo-tree-id7016 . -2) (undo-tree-id7017 . -2) (undo-tree-id7018 . -2) (undo-tree-id7019 . -2) (undo-tree-id7020 . -2) (undo-tree-id7021 . -3) (undo-tree-id7022 . -3) 2114) nil (26513 18629 796175 50000) 0 nil])
([nil nil ((2122 . 2123) (t 26513 18629 817881 300000)) nil (26513 18638 823978 3000) 0 nil])
([nil nil ((#("book " 0 5 (fontified t)) . -2138) (undo-tree-id7029 . -5) (undo-tree-id7030 . -1) (undo-tree-id7031 . -1) (undo-tree-id7032 . -1) (undo-tree-id7033 . -1) (undo-tree-id7034 . -1) (undo-tree-id7035 . -1) (undo-tree-id7036 . -1) (undo-tree-id7037 . -1) (undo-tree-id7038 . -1) (undo-tree-id7039 . -1) (undo-tree-id7040 . -1) (undo-tree-id7041 . -1) (undo-tree-id7042 . -1) (undo-tree-id7043 . -1) (undo-tree-id7044 . -1) (undo-tree-id7045 . -1) (undo-tree-id7046 . -1) (undo-tree-id7047 . -1) (undo-tree-id7048 . -1) (undo-tree-id7049 . -1) (undo-tree-id7050 . -1) (undo-tree-id7051 . -2) (undo-tree-id7052 . -2) (undo-tree-id7053 . -2) (undo-tree-id7054 . -2) (undo-tree-id7055 . -2) (undo-tree-id7056 . -2) (undo-tree-id7057 . -2) (undo-tree-id7058 . -2) (undo-tree-id7059 . -2) (undo-tree-id7060 . -2) (undo-tree-id7061 . -2) (undo-tree-id7062 . -2) (undo-tree-id7063 . -2) (undo-tree-id7064 . -2) (undo-tree-id7065 . -2) (undo-tree-id7066 . -2) (undo-tree-id7067 . -2) (undo-tree-id7068 . -2) (undo-tree-id7069 . -2) (undo-tree-id7070 . -2) (undo-tree-id7071 . -3) (undo-tree-id7072 . -3) (undo-tree-id7073 . -3) (undo-tree-id7074 . -3) (undo-tree-id7075 . -3) (undo-tree-id7076 . -3) (undo-tree-id7077 . -3) (undo-tree-id7078 . -3) (undo-tree-id7079 . -3) (undo-tree-id7080 . -3) (undo-tree-id7081 . -3) (undo-tree-id7082 . -3) (undo-tree-id7083 . -3) (undo-tree-id7084 . -3) (undo-tree-id7085 . -3) (undo-tree-id7086 . -3) (undo-tree-id7087 . -3) (undo-tree-id7088 . -3) (undo-tree-id7089 . -3) (undo-tree-id7090 . -3) (undo-tree-id7091 . -4) (undo-tree-id7092 . -4) (undo-tree-id7093 . -4) (undo-tree-id7094 . -4) (undo-tree-id7095 . -4) (undo-tree-id7096 . -4) (undo-tree-id7097 . -4) (undo-tree-id7098 . -4) (undo-tree-id7099 . -4) (undo-tree-id7100 . -4) (undo-tree-id7101 . -4) (undo-tree-id7102 . -4) (undo-tree-id7103 . -4) (undo-tree-id7104 . -4) (undo-tree-id7105 . -4) (undo-tree-id7106 . -4) (undo-tree-id7107 . -4) (undo-tree-id7108 . -4) (undo-tree-id7109 . -4) (undo-tree-id7110 . -4) (undo-tree-id7111 . -5) (undo-tree-id7112 . -5) (undo-tree-id7113 . -5) (undo-tree-id7114 . -5) (undo-tree-id7115 . -5) (undo-tree-id7116 . -5) (undo-tree-id7117 . -5) (undo-tree-id7118 . -5) (undo-tree-id7119 . -5) (undo-tree-id7120 . -5) (undo-tree-id7121 . -5) (undo-tree-id7122 . -5) (undo-tree-id7123 . -5) (undo-tree-id7124 . -5) (undo-tree-id7125 . -5) (undo-tree-id7126 . -5) (undo-tree-id7127 . -5) (undo-tree-id7128 . -5) (undo-tree-id7129 . -5) (undo-tree-id7130 . -5) (undo-tree-id7131 . -5) (undo-tree-id7132 . -5) (undo-tree-id7133 . -5) (undo-tree-id7134 . -5) (undo-tree-id7135 . -5) (undo-tree-id7136 . -5) (undo-tree-id7137 . -5) (undo-tree-id7138 . -5) (undo-tree-id7139 . -5) (undo-tree-id7140 . -5) (undo-tree-id7141 . -5) (undo-tree-id7142 . -5) (undo-tree-id7143 . -5) (undo-tree-id7144 . -5) (undo-tree-id7145 . -5) (undo-tree-id7146 . -5) (undo-tree-id7147 . -5) 2143 (2125 . 2143) (2123 . 2125) (#("T" 0 1 (fontified t)) . -2123) (undo-tree-id7148 . -1) (undo-tree-id7149 . -1) (undo-tree-id7150 . -1) (undo-tree-id7151 . -1) (undo-tree-id7152 . -1) (undo-tree-id7153 . -1) (undo-tree-id7154 . -1) (undo-tree-id7155 . -1) (undo-tree-id7156 . -1) (undo-tree-id7157 . -1) (undo-tree-id7158 . -1) (undo-tree-id7159 . -1) (undo-tree-id7160 . -1) (undo-tree-id7161 . -1) (undo-tree-id7162 . -1) (undo-tree-id7163 . -1) (undo-tree-id7164 . -1) (undo-tree-id7165 . -1) 2124 (2123 . 2124) (#("Taken " 0 6 (fontified t)) . -2123) (undo-tree-id7166 . -6) (undo-tree-id7167 . -1) (undo-tree-id7168 . -1) (undo-tree-id7169 . -1) (undo-tree-id7170 . -1) (undo-tree-id7171 . -1) (undo-tree-id7172 . -1) (undo-tree-id7173 . -1) (undo-tree-id7174 . -1) (undo-tree-id7175 . -1) (undo-tree-id7176 . -1) (undo-tree-id7177 . -1) (undo-tree-id7178 . -1) (undo-tree-id7179 . -1) (undo-tree-id7180 . -1) (undo-tree-id7181 . -1) (undo-tree-id7182 . -1) (undo-tree-id7183 . -1) (undo-tree-id7184 . -1) (undo-tree-id7185 . -1) (undo-tree-id7186 . -1) (undo-tree-id7187 . -2) (undo-tree-id7188 . -2) (undo-tree-id7189 . -2) (undo-tree-id7190 . -2) (undo-tree-id7191 . -2) (undo-tree-id7192 . -2) (undo-tree-id7193 . -2) (undo-tree-id7194 . -2) (undo-tree-id7195 . -2) (undo-tree-id7196 . -2) (undo-tree-id7197 . -2) (undo-tree-id7198 . -2) (undo-tree-id7199 . -2) (undo-tree-id7200 . -2) (undo-tree-id7201 . -2) (undo-tree-id7202 . -2) (undo-tree-id7203 . -2) (undo-tree-id7204 . -2) (undo-tree-id7205 . -2) (undo-tree-id7206 . -2) (undo-tree-id7207 . -3) (undo-tree-id7208 . -3) (undo-tree-id7209 . -3) (undo-tree-id7210 . -3) (undo-tree-id7211 . -3) (undo-tree-id7212 . -3) (undo-tree-id7213 . -3) (undo-tree-id7214 . -3) (undo-tree-id7215 . -3) (undo-tree-id7216 . -3) (undo-tree-id7217 . -3) (undo-tree-id7218 . -3) (undo-tree-id7219 . -3) (undo-tree-id7220 . -3) (undo-tree-id7221 . -3) (undo-tree-id7222 . -3) (undo-tree-id7223 . -3) (undo-tree-id7224 . -3) (undo-tree-id7225 . -3) (undo-tree-id7226 . -3) (undo-tree-id7227 . -4) (undo-tree-id7228 . -4) (undo-tree-id7229 . -4) (undo-tree-id7230 . -4) (undo-tree-id7231 . -4) (undo-tree-id7232 . -4) (undo-tree-id7233 . -4) (undo-tree-id7234 . -4) (undo-tree-id7235 . -4) (undo-tree-id7236 . -4) (undo-tree-id7237 . -4) (undo-tree-id7238 . -4) (undo-tree-id7239 . -4) (undo-tree-id7240 . -4) (undo-tree-id7241 . -4) (undo-tree-id7242 . -4) (undo-tree-id7243 . -4) (undo-tree-id7244 . -4) (undo-tree-id7245 . -4) (undo-tree-id7246 . -4) (undo-tree-id7247 . -5) (undo-tree-id7248 . -5) (undo-tree-id7249 . -5) (undo-tree-id7250 . -5) (undo-tree-id7251 . -5) (undo-tree-id7252 . -5) (undo-tree-id7253 . -5) (undo-tree-id7254 . -5) (undo-tree-id7255 . -5) (undo-tree-id7256 . -5) (undo-tree-id7257 . -5) (undo-tree-id7258 . -5) (undo-tree-id7259 . -5) (undo-tree-id7260 . -5) (undo-tree-id7261 . -5) (undo-tree-id7262 . -5) (undo-tree-id7263 . -5) (undo-tree-id7264 . -5) (undo-tree-id7265 . -5) (undo-tree-id7266 . -5) (undo-tree-id7267 . -6) (undo-tree-id7268 . -6) (undo-tree-id7269 . -6) (undo-tree-id7270 . -6) (undo-tree-id7271 . -6) (undo-tree-id7272 . -6) (undo-tree-id7273 . -6) (undo-tree-id7274 . -6) (undo-tree-id7275 . -6) (undo-tree-id7276 . -6) (undo-tree-id7277 . -6) (undo-tree-id7278 . -6) (undo-tree-id7279 . -6) (undo-tree-id7280 . -6) (undo-tree-id7281 . -6) (undo-tree-id7282 . -6) (undo-tree-id7283 . -6) (undo-tree-id7284 . -6) (undo-tree-id7285 . -6) (undo-tree-id7286 . -6) (undo-tree-id7287 . -6) (undo-tree-id7288 . -6) (undo-tree-id7289 . -6) (undo-tree-id7290 . -6) (undo-tree-id7291 . -6) (undo-tree-id7292 . -6) (undo-tree-id7293 . -6) (undo-tree-id7294 . -6) (undo-tree-id7295 . -6) (undo-tree-id7296 . -6) (undo-tree-id7297 . -6) (undo-tree-id7298 . -6) (undo-tree-id7299 . -6) (undo-tree-id7300 . -6) (undo-tree-id7301 . -6) (undo-tree-id7302 . -6) (undo-tree-id7303 . -6) (undo-tree-id7304 . -6) (undo-tree-id7305 . -6) (undo-tree-id7306 . -6) (undo-tree-id7307 . -6) (undo-tree-id7308 . -6) (undo-tree-id7309 . -6) (undo-tree-id7310 . -6) (undo-tree-id7311 . -6) (undo-tree-id7312 . -6) (undo-tree-id7313 . -6) (undo-tree-id7314 . -6) (undo-tree-id7315 . -6) 2129 (#("f" 0 1 (fontified t)) . -2129) (undo-tree-id7316 . -1) (undo-tree-id7317 . -1) (undo-tree-id7318 . -1) (undo-tree-id7319 . -1) (undo-tree-id7320 . -1) (undo-tree-id7321 . -1) (undo-tree-id7322 . -1) (undo-tree-id7323 . -1) (undo-tree-id7324 . -1) (undo-tree-id7325 . -1) (undo-tree-id7326 . -1) (undo-tree-id7327 . -1) (undo-tree-id7328 . -1) (undo-tree-id7329 . -1) (undo-tree-id7330 . -1) (undo-tree-id7331 . -1) (undo-tree-id7332 . -1) (undo-tree-id7333 . -1) (undo-tree-id7334 . -1) (undo-tree-id7335 . -1) (undo-tree-id7336 . -1) (undo-tree-id7337 . -1) (undo-tree-id7338 . -1) (undo-tree-id7339 . -1) 2130 (2124 . 2130) (2122 . 2124) (t 26513 18638 846002 548000)) nil (26513 18706 58093 914000) 0 nil])
([nil nil ((2138 . 2147)) nil (26513 18706 57878 871000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2147) (undo-tree-id7026 . 1) (undo-tree-id7027 . -1) (undo-tree-id7028 . -1)) nil (26513 18706 57878 388000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2147) (undo-tree-id7023 . 1) (undo-tree-id7024 . -1) (undo-tree-id7025 . -1)) nil (26513 18706 57876 652000) 0 nil])
([nil nil ((2146 . 2147) (2137 . 2146)) nil (26513 18706 57866 136000) 0 nil])
([nil nil ((#("_" 0 1 (face font-lock-constant-face fontified t)) . -2209) (undo-tree-id7557 . -1) (undo-tree-id7558 . -1) (undo-tree-id7559 . -1) (undo-tree-id7560 . -1) (undo-tree-id7561 . -1) (undo-tree-id7562 . -1) (undo-tree-id7563 . -1) (undo-tree-id7564 . -1) (undo-tree-id7565 . -1) (undo-tree-id7566 . -1) 2210 (#("{" 0 1 (face (font-lock-constant-face shadow) fontified nil)) . -2210) (undo-tree-id7567 . -1) (undo-tree-id7568 . -1) (undo-tree-id7569 . -1) (undo-tree-id7570 . -1) (undo-tree-id7571 . -1) (undo-tree-id7572 . -1) (undo-tree-id7573 . -1) (undo-tree-id7574 . -1) (undo-tree-id7575 . -1) (undo-tree-id7576 . -1) (#("}" 0 1 (face (font-lock-constant-face shadow) fontified t)) . 2211) (2209 . 2212) (2208 . 2210) (2203 . 2208) (#("r" 0 1 (face font-lock-constant-face fontified t)) . -2203) (undo-tree-id7577 . -1) (undo-tree-id7578 . -1) (undo-tree-id7579 . -1) (undo-tree-id7580 . -1) (undo-tree-id7581 . -1) (undo-tree-id7582 . -1) (undo-tree-id7583 . -1) (undo-tree-id7584 . -1) (undo-tree-id7585 . -1) (undo-tree-id7586 . -1) (undo-tree-id7587 . -1) (undo-tree-id7588 . -1) (undo-tree-id7589 . -1) (undo-tree-id7590 . -1) (undo-tree-id7591 . -1) (undo-tree-id7592 . -1) (undo-tree-id7593 . -1) (undo-tree-id7594 . -1) 2204 (2203 . 2204) (#(":" 0 1 (face font-lock-constant-face fontified t)) . -2203) (undo-tree-id7595 . -1) (undo-tree-id7596 . -1) (undo-tree-id7597 . -1) (undo-tree-id7598 . -1) (undo-tree-id7599 . -1) (undo-tree-id7600 . -1) (undo-tree-id7601 . -1) (undo-tree-id7602 . -1) (undo-tree-id7603 . -1) (undo-tree-id7604 . -1) (undo-tree-id7605 . -1) (undo-tree-id7606 . -1) (undo-tree-id7607 . -1) (undo-tree-id7608 . -1) (undo-tree-id7609 . -1) (undo-tree-id7610 . -1) (undo-tree-id7611 . -1) (undo-tree-id7612 . -1) 2204 (2203 . 2204) (#("2" 0 1 (face font-lock-constant-face fontified t)) . -2203) (undo-tree-id7613 . -1) (undo-tree-id7614 . -1) (undo-tree-id7615 . -1) (undo-tree-id7616 . -1) (undo-tree-id7617 . -1) (undo-tree-id7618 . -1) (undo-tree-id7619 . -1) (undo-tree-id7620 . -1) (undo-tree-id7621 . -1) (undo-tree-id7622 . -1) (undo-tree-id7623 . -1) (undo-tree-id7624 . -1) (undo-tree-id7625 . -1) (undo-tree-id7626 . -1) (undo-tree-id7627 . -1) (undo-tree-id7628 . -1) (undo-tree-id7629 . -1) (undo-tree-id7630 . -1) (undo-tree-id7631 . -1) (undo-tree-id7632 . -1) (undo-tree-id7633 . -1) (undo-tree-id7634 . -1) (undo-tree-id7635 . -1) (undo-tree-id7636 . -1) 2204 (2200 . 2204) (2199 . 2201) (2196 . 2199) (#("f" 0 1 (face font-lock-keyword-face fontified t)) . -2196) (undo-tree-id7637 . -1) (undo-tree-id7638 . -1) (undo-tree-id7639 . -1) (undo-tree-id7640 . -1) (undo-tree-id7641 . -1) (undo-tree-id7642 . -1) (undo-tree-id7643 . -1) (undo-tree-id7644 . -1) (undo-tree-id7645 . -1) (undo-tree-id7646 . -1) (undo-tree-id7647 . -1) (#("b" 0 1 (face font-lock-keyword-face fontified t)) . -2197) (undo-tree-id7648 . -1) (undo-tree-id7649 . -1) (undo-tree-id7650 . -1) 2198 (2197 . 2198) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . -2197) (undo-tree-id7651 . -1) (undo-tree-id7652 . -1) (undo-tree-id7653 . -1) (#("l" 0 1 (face font-lock-keyword-face fontified t)) . -2198) (undo-tree-id7654 . -1) (undo-tree-id7655 . -1) (undo-tree-id7656 . -1) 2199 (2196 . 2199) (2194 . 2196) (2193 . 2194) (2190 . 2193) (t 26513 18706 78823 792000) 2189) nil (26513 18772 891087 294000) 0 nil])
([nil nil ((2209 . 2210) (2208 . 2209) (#("$" 0 1 (face font-lock-constant-face fontified t)) . -2208) (undo-tree-id7509 . -1) (undo-tree-id7510 . -1) (undo-tree-id7511 . -1) (undo-tree-id7512 . -1) (undo-tree-id7513 . -1) (undo-tree-id7514 . -1) (undo-tree-id7515 . -1) (undo-tree-id7516 . -1) (undo-tree-id7517 . -1) (undo-tree-id7518 . -1) (undo-tree-id7519 . -1) (undo-tree-id7520 . -1) (undo-tree-id7521 . -1) (undo-tree-id7522 . -1) (undo-tree-id7523 . -1) (undo-tree-id7524 . -1) (undo-tree-id7525 . -1) (undo-tree-id7526 . -1) (undo-tree-id7527 . -1) (undo-tree-id7528 . -1) (undo-tree-id7529 . -1) (undo-tree-id7530 . -1) (undo-tree-id7531 . -1) (undo-tree-id7532 . -1) (undo-tree-id7533 . -1) (undo-tree-id7534 . -1) (undo-tree-id7535 . -1) (undo-tree-id7536 . -1) (undo-tree-id7537 . -1) (undo-tree-id7538 . -1) (undo-tree-id7539 . -1) (#("$" 0 1 (face font-lock-constant-face fontified t)) . -2209) (undo-tree-id7540 . -1) (undo-tree-id7541 . -1) (undo-tree-id7542 . -1) (undo-tree-id7543 . -1) (undo-tree-id7544 . -1) (undo-tree-id7545 . -1) (undo-tree-id7546 . -1) (undo-tree-id7547 . -1) (undo-tree-id7548 . -1) (undo-tree-id7549 . -1) (undo-tree-id7550 . -1) (undo-tree-id7551 . -1) (undo-tree-id7552 . -1) (undo-tree-id7553 . -1) (undo-tree-id7554 . -1) (undo-tree-id7555 . -1) (undo-tree-id7556 . -1) 2210) nil (26513 18772 891053 409000) 0 nil])
([nil nil ((2211 . 2213) (2210 . 2211)) nil (26513 18772 890895 149000) 0 nil])
([nil nil ((#("m" 0 1 (face font-lock-constant-face fontified t)) . 2202) (undo-tree-id7421 . -1) (undo-tree-id7422 . -1) (undo-tree-id7423 . -1) (undo-tree-id7424 . -1) (undo-tree-id7425 . -1) (undo-tree-id7426 . -1) (undo-tree-id7427 . -1) (undo-tree-id7428 . -1) (undo-tree-id7429 . -1) (undo-tree-id7430 . -1) (undo-tree-id7431 . -1) (undo-tree-id7432 . -1) (undo-tree-id7433 . -1) (undo-tree-id7434 . -1) (undo-tree-id7435 . -1) (undo-tree-id7436 . -1) (undo-tree-id7437 . -1) (undo-tree-id7438 . -1) (undo-tree-id7439 . -1) (undo-tree-id7440 . -1) (undo-tree-id7441 . -1) (undo-tree-id7442 . -1) (undo-tree-id7443 . -1) (undo-tree-id7444 . -1) (undo-tree-id7445 . -1) (undo-tree-id7446 . -1) (undo-tree-id7447 . -1) (undo-tree-id7448 . -1) (undo-tree-id7449 . -1) (undo-tree-id7450 . -1) (undo-tree-id7451 . -1) (undo-tree-id7452 . -1) (undo-tree-id7453 . -1) (undo-tree-id7454 . -1) (undo-tree-id7455 . -1) (undo-tree-id7456 . -1) (undo-tree-id7457 . -1) (undo-tree-id7458 . -1) (undo-tree-id7459 . -1) (undo-tree-id7460 . -1) (undo-tree-id7461 . -1) (undo-tree-id7462 . -1) (undo-tree-id7463 . -1) (undo-tree-id7464 . -1) (undo-tree-id7465 . -1) (undo-tree-id7466 . -1) (undo-tree-id7467 . -1) (undo-tree-id7468 . -1) (undo-tree-id7469 . -1) (undo-tree-id7470 . -1) (undo-tree-id7471 . -1) (undo-tree-id7472 . -1) (undo-tree-id7473 . -1) (undo-tree-id7474 . -1) (undo-tree-id7475 . -1) (undo-tree-id7476 . -1) (undo-tree-id7477 . -1) (undo-tree-id7478 . -1) (undo-tree-id7479 . -1) (undo-tree-id7480 . -1) (undo-tree-id7481 . -1) (undo-tree-id7482 . -1) (undo-tree-id7483 . -1) (undo-tree-id7484 . -1) (undo-tree-id7485 . -1) (undo-tree-id7486 . -1) (undo-tree-id7487 . -1) (undo-tree-id7488 . -1) (undo-tree-id7489 . -1) (undo-tree-id7490 . -1) (undo-tree-id7491 . -1) (undo-tree-id7492 . -1) (undo-tree-id7493 . -1) (undo-tree-id7494 . -1) (undo-tree-id7495 . -1) (undo-tree-id7496 . -1) (undo-tree-id7497 . -1) (undo-tree-id7498 . -1) (undo-tree-id7499 . -1) (undo-tree-id7500 . -1) (undo-tree-id7501 . -1) (undo-tree-id7502 . -1) (undo-tree-id7503 . -1) (undo-tree-id7504 . -1) (undo-tree-id7505 . -1) (undo-tree-id7506 . -1) (undo-tree-id7507 . -1) (undo-tree-id7508 . -1)) nil (26513 18772 890893 515000) 0 nil])
([nil nil ((#("2" 0 1 (face font-lock-constant-face fontified t)) . 2202) (undo-tree-id7405 . -1) (undo-tree-id7406 . -1) (undo-tree-id7407 . -1) (undo-tree-id7408 . -1) (undo-tree-id7409 . -1) (undo-tree-id7410 . -1) (undo-tree-id7411 . -1) (undo-tree-id7412 . -1) (undo-tree-id7413 . -1) (undo-tree-id7414 . -1) (undo-tree-id7415 . -1) (undo-tree-id7416 . -1) (undo-tree-id7417 . -1) (undo-tree-id7418 . -1) (undo-tree-id7419 . -1) (undo-tree-id7420 . -1)) nil (26513 18772 890862 471000) 0 nil])
([nil nil ((#("\\" 0 1 (face font-lock-constant-face fontified t)) . 2206) (undo-tree-id7403 . -1) (undo-tree-id7404 . -1)) nil (26513 18772 890856 858000) 0 nil])
([nil nil ((2210 . 2211) (#("5" 0 1 (face font-lock-constant-face fontified t)) . -2210) (undo-tree-id7340 . -1) (undo-tree-id7341 . -1) (undo-tree-id7342 . -1) (undo-tree-id7343 . -1) (undo-tree-id7344 . -1) (undo-tree-id7345 . -1) (undo-tree-id7346 . -1) (undo-tree-id7347 . -1) (undo-tree-id7348 . -1) (undo-tree-id7349 . -1) (undo-tree-id7350 . -1) (undo-tree-id7351 . -1) (undo-tree-id7352 . -1) (undo-tree-id7353 . -1) (undo-tree-id7354 . -1) (undo-tree-id7355 . -1) (undo-tree-id7356 . -1) (undo-tree-id7357 . -1) (undo-tree-id7358 . -1) (undo-tree-id7359 . -1) (undo-tree-id7360 . -1) (undo-tree-id7361 . -1) (undo-tree-id7362 . -1) (undo-tree-id7363 . -1) (undo-tree-id7364 . -1) (undo-tree-id7365 . -1) (undo-tree-id7366 . -1) (undo-tree-id7367 . -1) (undo-tree-id7368 . -1) (undo-tree-id7369 . -1) (undo-tree-id7370 . -1) (undo-tree-id7371 . -1) (undo-tree-id7372 . -1) (undo-tree-id7373 . -1) (undo-tree-id7374 . -1) (undo-tree-id7375 . -1) (undo-tree-id7376 . -1) (undo-tree-id7377 . -1) (#("," 0 1 (face font-lock-constant-face fontified t)) . -2211) (undo-tree-id7378 . -1) (undo-tree-id7379 . -1) (undo-tree-id7380 . -1) (undo-tree-id7381 . -1) (undo-tree-id7382 . -1) (undo-tree-id7383 . -1) (undo-tree-id7384 . -1) (undo-tree-id7385 . -1) (undo-tree-id7386 . -1) (undo-tree-id7387 . -1) (undo-tree-id7388 . -1) (undo-tree-id7389 . -1) (undo-tree-id7390 . -1) (undo-tree-id7391 . -1) (undo-tree-id7392 . -1) (undo-tree-id7393 . -1) (undo-tree-id7394 . -1) (undo-tree-id7395 . -1) (undo-tree-id7396 . -1) (undo-tree-id7397 . -1) (undo-tree-id7398 . -1) (undo-tree-id7399 . -1) (undo-tree-id7400 . -1) (undo-tree-id7401 . -1) (undo-tree-id7402 . -1) 2212 (2210 . 2212)) nil (26513 18772 890851 391000) 0 nil])
([nil nil ((4100 . 4101) (t 26513 18772 914510 15000)) nil (26513 18884 530919 371000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4103 . 4104) (#("
" 0 1 (fontified nil)) . -4222) (4101 . 4223)) nil (26513 18884 530918 937000) 0 nil])
([nil nil ((apply -2 4102 4225 undo--wrap-and-run-primitive-undo 4102 4225 ((4104 . 4106)))) nil (26513 18884 530918 539000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . 1982) (undo-tree-id7686 . -1) (undo-tree-id7687 . -2)) nil (26513 18884 530917 974000) 0 nil])
([nil nil ((1981 . 1984) (#("
" 0 1 (fontified t)) . 1981) (undo-tree-id7657 . -1) (undo-tree-id7658 . -1) (undo-tree-id7659 . -1) (undo-tree-id7660 . -1) (undo-tree-id7661 . -1) (undo-tree-id7662 . -1) (undo-tree-id7663 . -1) (undo-tree-id7664 . -1) (undo-tree-id7665 . -1) (undo-tree-id7666 . -1) (undo-tree-id7667 . -1) (undo-tree-id7668 . -1) (undo-tree-id7669 . -1) (undo-tree-id7670 . -1) (undo-tree-id7671 . -1) (undo-tree-id7672 . -1) (undo-tree-id7673 . -1) (undo-tree-id7674 . -1) (undo-tree-id7675 . -1) (undo-tree-id7676 . -1) (undo-tree-id7677 . -1) (undo-tree-id7678 . -1) (undo-tree-id7679 . -1) (undo-tree-id7680 . -1) (undo-tree-id7681 . -1) (undo-tree-id7682 . -1) (undo-tree-id7683 . -1) (undo-tree-id7684 . -1) (undo-tree-id7685 . -1) 1982) nil (26513 18884 530913 681000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2790) (undo-tree-id7688 . -1) (t 26513 18884 555409 372000)) nil (26513 18909 776397 571000) 0 nil])
([nil nil ((#("  % \\caption{\\label{fig:fig_label} Figure corresponding to example \\eqref{ex:num_lim} Taken form the textbook, page 135. }
" 0 1 (fontified t) 1 2 (fontified t rear-nonsticky t) 2 4 (face font-lock-comment-face fontified t) 4 12 (face font-lock-comment-face fontified t) 12 13 (face font-lock-comment-face fontified t) 13 19 (face font-lock-comment-face fontified t) 19 20 (face font-lock-comment-face fontified t) 20 33 (face font-lock-comment-face fontified t) 33 35 (face font-lock-comment-face fontified t) 35 36 (face font-lock-comment-face fontified t) 36 42 (face font-lock-comment-face fontified t) 42 49 (face font-lock-comment-face fontified t) 49 67 (face font-lock-comment-face fontified t) 67 73 (face font-lock-comment-face fontified t) 73 74 (face font-lock-comment-face fontified t) 74 83 (face font-lock-comment-face fontified t) 83 84 (face font-lock-comment-face fontified t rear-nonsticky t) 84 120 (face font-lock-comment-face fontified t) 120 122 (face font-lock-comment-face fontified t) 122 123 (face font-lock-comment-face fontified t)) . 4101) (undo-tree-id7689 . -122) (undo-tree-id7690 . -2) (undo-tree-id7691 . -23) (undo-tree-id7692 . -23) (undo-tree-id7693 . -23) (undo-tree-id7694 . -23) (undo-tree-id7695 . -23) (undo-tree-id7696 . -23) (undo-tree-id7697 . -23) (undo-tree-id7698 . -23) (undo-tree-id7699 . -23) (undo-tree-id7700 . -23) (undo-tree-id7701 . -23) (undo-tree-id7702 . -23) (undo-tree-id7703 . -23) (undo-tree-id7704 . -23) (undo-tree-id7705 . -23) (undo-tree-id7706 . -23) (undo-tree-id7707 . -23) (undo-tree-id7708 . -2) (undo-tree-id7709 . -2) (undo-tree-id7710 . -2) (undo-tree-id7711 . -2) (undo-tree-id7712 . -2) (undo-tree-id7713 . -23) (undo-tree-id7714 . -2) (undo-tree-id7715 . -2) (undo-tree-id7716 . -2) (undo-tree-id7717 . -2) (undo-tree-id7718 . -123) 4103 (t 26513 18909 798575 263000)) nil (26513 18942 924103 645000) 0 nil])
([nil nil ((3597 . 3598) (3596 . 3597) 3537) nil (26513 18942 924074 606000) 0 nil])
([nil nil ((nil rear-nonsticky nil 3598 . 3599) (#("
" 0 1 (fontified nil)) . -3820) (3598 . 3821)) nil (26513 18942 924069 382000) 0 nil])
([nil nil ((3679 . 3680) (#("1" 0 1 (face font-lock-constant-face fontified t)) . 3679) (undo-tree-id7719 . -1) (t 26513 18942 948774 360000)) nil (26513 18970 369649 557000) 0 nil])
([nil nil ((3718 . 3719) (t 26513 18948 413805 219000)) nil (26513 18972 838616 832000) 0 nil] [nil nil ((3717 . 3718) (#("l" 0 1 (face font-lock-constant-face fontified nil)) . 3717) (undo-tree-id7720 . -1) (3716 . 3717) (#("e" 0 1 (face font-lock-constant-face fontified nil)) . 3716) (undo-tree-id7721 . -1) (undo-tree-id7722 . -1) (undo-tree-id7723 . -1) (undo-tree-id7724 . -1) (undo-tree-id7725 . -1) (undo-tree-id7726 . -1) (undo-tree-id7727 . -1) (undo-tree-id7728 . -1) (undo-tree-id7729 . -1) (undo-tree-id7730 . -1) (undo-tree-id7731 . -1) (undo-tree-id7732 . -1) (undo-tree-id7733 . -1) (undo-tree-id7734 . -1) (undo-tree-id7735 . -1) (undo-tree-id7736 . -1) (undo-tree-id7737 . -1) (undo-tree-id7738 . -1) (undo-tree-id7739 . -1) (undo-tree-id7740 . -1) (undo-tree-id7741 . -1) (undo-tree-id7742 . -1) (undo-tree-id7743 . -1) (undo-tree-id7744 . -1) (undo-tree-id7745 . -1) (3715 . 3716) (#("b" 0 1 (face font-lock-constant-face fontified nil)) . 3715) (3714 . 3715) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3714) (3713 . 3714) (#("l" 0 1 (face font-lock-constant-face fontified nil)) . 3713) (3712 . 3713) (#("_" 0 1 (face font-lock-constant-face fontified nil)) . 3712) (undo-tree-id7746 . -1) (undo-tree-id7747 . -1) (undo-tree-id7748 . -1) (undo-tree-id7749 . -1) (undo-tree-id7750 . -1) (undo-tree-id7751 . -1) (undo-tree-id7752 . -1) (undo-tree-id7753 . -1) (3711 . 3712) (#("g" 0 1 (face font-lock-constant-face fontified nil)) . 3711) (3710 . 3711) (#("i" 0 1 (face font-lock-constant-face fontified nil)) . 3710) (undo-tree-id7754 . -1) (undo-tree-id7755 . -1) (undo-tree-id7756 . -1) (undo-tree-id7757 . -1) (undo-tree-id7758 . -1) (undo-tree-id7759 . -1) (undo-tree-id7760 . -1) (undo-tree-id7761 . -1) (undo-tree-id7762 . -1) (undo-tree-id7763 . -1) (undo-tree-id7764 . -1) (undo-tree-id7765 . -1) (undo-tree-id7766 . -1) (undo-tree-id7767 . -1) (undo-tree-id7768 . -1) (undo-tree-id7769 . -1) (undo-tree-id7770 . -1) (undo-tree-id7771 . -1) (undo-tree-id7772 . -1) (undo-tree-id7773 . -1) (undo-tree-id7774 . -1) (undo-tree-id7775 . -1) (undo-tree-id7776 . -1) (undo-tree-id7777 . -1) (undo-tree-id7778 . -1) (undo-tree-id7779 . -1) (undo-tree-id7780 . -1) (undo-tree-id7781 . -1) (undo-tree-id7782 . -1) (undo-tree-id7783 . -1) (3709 . 3710) (#("f" 0 1 (face font-lock-constant-face fontified nil)) . 3709) (3708 . 3709) (#(":" 0 1 (face font-lock-constant-face fontified nil)) . 3708) (3707 . 3708) (#("g" 0 1 (face font-lock-constant-face fontified nil)) . 3707) (3706 . 3707) (#("i" 0 1 (face font-lock-constant-face fontified nil)) . 3706) (3705 . 3706) (#("f" 0 1 (face font-lock-constant-face fontified nil)) . 3705) (3704 . 3705) (#("{" 0 1 (fontified nil)) . 3704) (3703 . 3704) (#("l" 0 1 (face font-lock-keyword-face fontified nil)) . 3703) (3702 . 3703) (#("e" 0 1 (face font-lock-keyword-face fontified nil)) . 3702) (3701 . 3702) (#("b" 0 1 (face font-lock-keyword-face fontified nil)) . 3701) (3700 . 3701) (#("a" 0 1 (face font-lock-keyword-face fontified nil)) . 3700) (3699 . 3700) (#("l" 0 1 (face font-lock-keyword-face fontified nil)) . 3699) (3698 . 3699) (#("\\" 0 1 (face font-lock-keyword-face fontified nil)) . 3698) (3697 . 3698) (#("{" 0 1 (fontified nil)) . 3697) (3696 . 3697) (#("n" 0 1 (face font-lock-keyword-face fontified nil)) . 3696) (3695 . 3696) (#("o" 0 1 (face font-lock-keyword-face fontified nil)) . 3695) (3694 . 3695) (#("i" 0 1 (face font-lock-keyword-face fontified nil)) . 3694) (3693 . 3694) (#("t" 0 1 (face font-lock-keyword-face fontified nil)) . 3693) (3692 . 3693) (#("p" 0 1 (face font-lock-keyword-face fontified nil)) . 3692) (3691 . 3692) (#("a" 0 1 (face font-lock-keyword-face fontified nil)) . 3691) (3690 . 3691) (#("c" 0 1 (face font-lock-keyword-face fontified nil)) . 3690) (3689 . 3690) (#("\\" 0 1 (face font-lock-keyword-face fontified nil)) . 3689) (3688 . 3689) (#(" " 0 1 (fontified nil)) . 3688) (3687 . 3688) (#(" " 0 1 (fontified t)) . 3687) (3685 . 3686) (#("}" 0 1 (fontified nil)) . 3685) (3684 . 3685) (#("\"" 0 1 (face font-lock-constant-face fontified nil)) . 3684) (3683 . 3684) (#("g" 0 1 (face font-lock-constant-face fontified nil)) . 3683) (3682 . 3683) (#("n" 0 1 (face font-lock-constant-face fontified nil)) . 3682) (3681 . 3682) (#("p" 0 1 (face font-lock-constant-face fontified nil)) . 3681) (3680 . 3681) (#("." 0 1 (face font-lock-constant-face fontified nil)) . 3680) (3679 . 3680) (#("2" 0 1 (face font-lock-constant-face fontified nil)) . 3679) (3678 . 3679) (#("_" 0 1 (face font-lock-constant-face fontified nil)) . 3678) (undo-tree-id7784 . -1) (undo-tree-id7785 . -1) (undo-tree-id7786 . -1) (undo-tree-id7787 . -1) (undo-tree-id7788 . -1) (undo-tree-id7789 . -1) (undo-tree-id7790 . -1) (undo-tree-id7791 . -1) (undo-tree-id7792 . -1) (undo-tree-id7793 . -1) (undo-tree-id7794 . -1) (undo-tree-id7795 . -1) (undo-tree-id7796 . -1) (undo-tree-id7797 . -1) (undo-tree-id7798 . -1) (undo-tree-id7799 . -1) (undo-tree-id7800 . -1) (undo-tree-id7801 . -1) (undo-tree-id7802 . -1) (undo-tree-id7803 . -1) (undo-tree-id7804 . -1) (undo-tree-id7805 . -1) (undo-tree-id7806 . -1) (undo-tree-id7807 . -1) (undo-tree-id7808 . -1) (undo-tree-id7809 . -1) (undo-tree-id7810 . -1) (undo-tree-id7811 . -1) (undo-tree-id7812 . -1) (undo-tree-id7813 . -1) (undo-tree-id7814 . -1) (undo-tree-id7815 . -1) (undo-tree-id7816 . -1) (undo-tree-id7817 . -1) (undo-tree-id7818 . -1) (undo-tree-id7819 . -1) (undo-tree-id7820 . -1) (undo-tree-id7821 . -1) (undo-tree-id7822 . -1) (undo-tree-id7823 . -1) (undo-tree-id7824 . -1) (undo-tree-id7825 . -1) (undo-tree-id7826 . -1) (undo-tree-id7827 . -1) (undo-tree-id7828 . -1) (undo-tree-id7829 . -1) (undo-tree-id7830 . -1) (undo-tree-id7831 . -1) (undo-tree-id7832 . -1) (undo-tree-id7833 . -1) (undo-tree-id7834 . -1) (undo-tree-id7835 . -1) (undo-tree-id7836 . -1) (undo-tree-id7837 . -1) (undo-tree-id7838 . -1) (undo-tree-id7839 . -1) (undo-tree-id7840 . -1) (undo-tree-id7841 . -1) (undo-tree-id7842 . -1) (undo-tree-id7843 . -1) (undo-tree-id7844 . -1) (undo-tree-id7845 . -1) (undo-tree-id7846 . -1) (undo-tree-id7847 . -1) (undo-tree-id7848 . -1) (undo-tree-id7849 . -1) (undo-tree-id7850 . -1) (undo-tree-id7851 . -1) (undo-tree-id7852 . -1) (undo-tree-id7853 . -1) (undo-tree-id7854 . -1) (undo-tree-id7855 . -1) (undo-tree-id7856 . -1) (undo-tree-id7857 . -1) (undo-tree-id7858 . -1) (undo-tree-id7859 . -1) (3677 . 3678) (#("m" 0 1 (face font-lock-constant-face fontified nil)) . 3677) (3676 . 3677) (#("x" 0 1 (face font-lock-constant-face fontified nil)) . 3676) (3675 . 3676) (#("e" 0 1 (face font-lock-constant-face fontified nil)) . 3675) (3674 . 3675) (#("_" 0 1 (face font-lock-constant-face fontified t)) . 3674) 3717 (t 26513 18948 413805 219000)) ((3674 . 3675) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3674) (3675 . 3676) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3675) (3676 . 3677) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3676) (3677 . 3678) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3677) (3678 . 3679) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3678) (3679 . 3680) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3679) (3680 . 3681) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3680) (3681 . 3682) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3681) (3682 . 3683) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3682) (3683 . 3684) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3683) (3684 . 3685) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3684) (3685 . 3686) (#("a" 0 1 (face font-lock-constant-face fontified t)) . 3685) (3687 . 3688) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3687) (undo-tree-id7860 . -1) (undo-tree-id7861 . -1) (undo-tree-id7862 . -1) (undo-tree-id7863 . -1) (undo-tree-id7864 . -1) (3688 . 3689) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3688) (undo-tree-id7865 . -1) (undo-tree-id7866 . -1) (undo-tree-id7867 . -1) (undo-tree-id7868 . -1) (undo-tree-id7869 . -1) (3689 . 3690) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3689) (undo-tree-id7870 . -1) (undo-tree-id7871 . -1) (undo-tree-id7872 . -1) (undo-tree-id7873 . -1) (undo-tree-id7874 . -1) (3690 . 3691) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3690) (undo-tree-id7875 . -1) (undo-tree-id7876 . -1) (undo-tree-id7877 . -1) (undo-tree-id7878 . -1) (undo-tree-id7879 . -1) (3691 . 3692) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3691) (undo-tree-id7880 . -1) (undo-tree-id7881 . -1) (undo-tree-id7882 . -1) (undo-tree-id7883 . -1) (undo-tree-id7884 . -1) (3692 . 3693) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3692) (undo-tree-id7885 . -1) (undo-tree-id7886 . -1) (undo-tree-id7887 . -1) (undo-tree-id7888 . -1) (undo-tree-id7889 . -1) (3693 . 3694) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3693) (undo-tree-id7890 . -1) (undo-tree-id7891 . -1) (undo-tree-id7892 . -1) (undo-tree-id7893 . -1) (undo-tree-id7894 . -1) (3694 . 3695) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3694) (undo-tree-id7895 . -1) (undo-tree-id7896 . -1) (undo-tree-id7897 . -1) (undo-tree-id7898 . -1) (undo-tree-id7899 . -1) (3695 . 3696) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3695) (undo-tree-id7900 . -1) (undo-tree-id7901 . -1) (undo-tree-id7902 . -1) (undo-tree-id7903 . -1) (undo-tree-id7904 . -1) (3696 . 3697) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3696) (undo-tree-id7905 . -1) (undo-tree-id7906 . -1) (undo-tree-id7907 . -1) (undo-tree-id7908 . -1) (undo-tree-id7909 . -1) (3697 . 3698) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3697) (undo-tree-id7910 . -1) (undo-tree-id7911 . -1) (undo-tree-id7912 . -1) (undo-tree-id7913 . -1) (undo-tree-id7914 . -1) (3698 . 3699) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3698) (undo-tree-id7915 . -1) (undo-tree-id7916 . -1) (undo-tree-id7917 . -1) (undo-tree-id7918 . -1) (undo-tree-id7919 . -1) (3699 . 3700) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3699) (undo-tree-id7920 . -1) (undo-tree-id7921 . -1) (undo-tree-id7922 . -1) (undo-tree-id7923 . -1) (undo-tree-id7924 . -1) (3700 . 3701) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3700) (undo-tree-id7925 . -1) (undo-tree-id7926 . -1) (undo-tree-id7927 . -1) (undo-tree-id7928 . -1) (undo-tree-id7929 . -1) (3701 . 3702) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3701) (undo-tree-id7930 . -1) (undo-tree-id7931 . -1) (undo-tree-id7932 . -1) (undo-tree-id7933 . -1) (undo-tree-id7934 . -1) (3702 . 3703) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3702) (undo-tree-id7935 . -1) (undo-tree-id7936 . -1) (undo-tree-id7937 . -1) (undo-tree-id7938 . -1) (undo-tree-id7939 . -1) (3703 . 3704) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3703) (undo-tree-id7940 . -1) (undo-tree-id7941 . -1) (undo-tree-id7942 . -1) (undo-tree-id7943 . -1) (undo-tree-id7944 . -1) (3704 . 3705) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3704) (undo-tree-id7945 . -1) (undo-tree-id7946 . -1) (undo-tree-id7947 . -1) (undo-tree-id7948 . -1) (undo-tree-id7949 . -1) (3705 . 3706) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3705) (undo-tree-id7950 . -1) (undo-tree-id7951 . -1) (undo-tree-id7952 . -1) (undo-tree-id7953 . -1) (undo-tree-id7954 . -1) (3706 . 3707) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3706) (undo-tree-id7955 . -1) (undo-tree-id7956 . -1) (undo-tree-id7957 . -1) (undo-tree-id7958 . -1) (undo-tree-id7959 . -1) (3707 . 3708) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3707) (undo-tree-id7960 . -1) (undo-tree-id7961 . -1) (undo-tree-id7962 . -1) (undo-tree-id7963 . -1) (undo-tree-id7964 . -1) (3708 . 3709) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3708) (undo-tree-id7965 . -1) (undo-tree-id7966 . -1) (undo-tree-id7967 . -1) (undo-tree-id7968 . -1) (undo-tree-id7969 . -1) (3709 . 3710) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3709) (undo-tree-id7970 . -1) (undo-tree-id7971 . -1) (undo-tree-id7972 . -1) (undo-tree-id7973 . -1) (undo-tree-id7974 . -1) (3710 . 3711) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3710) (undo-tree-id7975 . -1) (undo-tree-id7976 . -1) (undo-tree-id7977 . -1) (undo-tree-id7978 . -1) (undo-tree-id7979 . -1) (3711 . 3712) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3711) (undo-tree-id7980 . -1) (undo-tree-id7981 . -1) (undo-tree-id7982 . -1) (undo-tree-id7983 . -1) (undo-tree-id7984 . -1) (3712 . 3713) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3712) (undo-tree-id7985 . -1) (undo-tree-id7986 . -1) (undo-tree-id7987 . -1) (undo-tree-id7988 . -1) (undo-tree-id7989 . -1) (3713 . 3714) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3713) (undo-tree-id7990 . -1) (undo-tree-id7991 . -1) (undo-tree-id7992 . -1) (undo-tree-id7993 . -1) (undo-tree-id7994 . -1) (3714 . 3715) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3714) (undo-tree-id7995 . -1) (undo-tree-id7996 . -1) (undo-tree-id7997 . -1) (undo-tree-id7998 . -1) (undo-tree-id7999 . -1) (3715 . 3716) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3715) (undo-tree-id8000 . -1) (undo-tree-id8001 . -1) (undo-tree-id8002 . -1) (undo-tree-id8003 . -1) (undo-tree-id8004 . -1) (3716 . 3717) (#("a" 0 1 (face font-lock-constant-face fontified nil)) . 3716) (undo-tree-id8005 . -1) (undo-tree-id8006 . -1) (undo-tree-id8007 . -1) (undo-tree-id8008 . -1) (undo-tree-id8009 . -1) (3717 . 3718) (#("a" 0 1 (face font-lock-constant-face fontified t)) . 3717)) (26513 18970 365834 674000) 0 nil])
([nil nil ((3770 . 3771) (t 26513 18972 861936 747000)) nil (26513 18980 452472 184000) 0 nil])
nil
([nil nil ((3805 . 3806) (#("5" 0 1 (fontified t)) . 3805) (undo-tree-id8010 . -1) (t 26513 18980 465975 536000)) nil (26513 18989 5558 791000) 0 nil])
([nil nil ((apply 2 461 478 undo--wrap-and-run-primitive-undo 461 478 ((#("% " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -461) 472))) nil (26513 19011 302517 14000) 0 nil])
([nil nil ((apply 2 479 496 undo--wrap-and-run-primitive-undo 479 496 ((#("% " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -479) 490))) nil (26513 19011 302512 821000) 0 nil])
([nil nil ((519 . 526) (518 . 519) (517 . 518) (t 26513 19011 326123 45000) 517) nil (26513 19031 160578 12000) 0 nil])
([nil nil ((478 . 479) (t 26513 19031 185209 865000) 468) nil (26513 19042 479291 589000) 0 nil])
([nil nil ((nil rear-nonsticky nil 479 . 480) (#("
" 0 1 (fontified nil)) . -488) (479 . 489)) nil (26513 19042 479290 673000) 0 nil])
([nil nil ((488 . 489) 480) nil (26513 19042 479286 772000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field nil 5472 5479 nil nil nil nil nil)) nil 0 nil #s(yas--field nil 5472 5479 nil nil nil nil nil) nil nil)) (5481 . 5483) (5468 . 5472) (5452 . 5490) (#("exm" 0 3 (fontified t)) . 5452) (undo-tree-id60 . -3) (undo-tree-id61 . -3) (undo-tree-id62 . -3) (undo-tree-id63 . -3) (undo-tree-id64 . -3) (undo-tree-id65 . -3) (undo-tree-id66 . -3) (undo-tree-id67 . -3) (undo-tree-id68 . -3) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (undo-tree-id71 . -3) (undo-tree-id72 . -3) (undo-tree-id73 . -3) (undo-tree-id74 . -3) (undo-tree-id75 . -3) (undo-tree-id76 . -3) 5455 (5454 . 5455) (5452 . 5454) (5450 . 5452) (#("  " 0 2 (fontified nil)) . 5449) (5449 . 5451) (5449 . 5450) (t 26513 19042 503256 619000)) nil (26513 30832 830137 740000) 0 nil])
([nil nil ((apply yas--snippet-revive 5452 5496 #s(yas--snippet nil (#s(yas--field nil 5472 5479 nil nil nil nil nil)) nil 0 nil #s(yas--field nil 5472 5479 nil nil nil nil nil) nil nil))) nil (26513 30832 830120 519000) 0 nil])
([nil nil ((#(" example" 0 8 (fontified t)) . 5471) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . 7) (undo-tree-id57 . -8) (undo-tree-id58 . -8) (undo-tree-id59 . -7)) nil (26513 30832 830119 183000) 0 nil])
([nil nil ((5488 . 5489) (5487 . 5489) (#("}" 0 1 (fontified nil)) . -5486) (5486 . 5487) (#("}" 0 1 (fontified nil)) . -5486) (5485 . 5487) (5484 . 5486) (5480 . 5484) (#("g" 0 1 (face font-lock-keyword-face fontified t)) . -5480) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 5481 (5480 . 5481) (5479 . 5480) (5475 . 5479) (#(")" 0 1 (fontified nil)) . -5475) (5474 . 5476) (5473 . 5474) (5472 . 5473) (#("e" 0 1 (fontified t)) . -5472) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 5473 (5472 . 5473) (5471 . 5473)) nil (26513 30832 830092 915000) 0 nil])
([nil nil ((5503 . 5504) (5500 . 5503) (5499 . 5500) (#("|" 0 1 (fontified t)) . -5499) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) 5500 (5499 . 5500) (5498 . 5499) (5497 . 5499) (5491 . 5497)) nil (26513 30832 830046 57000) 0 nil])
([nil nil ((5526 . 5528) (#("  " 0 2 (fontified nil)) . 5525) (undo-tree-id103 . -2) (undo-tree-id104 . -2) (undo-tree-id105 . -2) (undo-tree-id106 . -2) (undo-tree-id107 . -2) (undo-tree-id108 . -2) (undo-tree-id109 . -2) (undo-tree-id110 . -2) (undo-tree-id111 . -2) (undo-tree-id112 . -2) (undo-tree-id113 . -2) (undo-tree-id114 . -2) (undo-tree-id115 . -2) (undo-tree-id116 . -2) (undo-tree-id117 . -2) (undo-tree-id118 . -2) (undo-tree-id119 . -2) (5525 . 5528) (#("  " 0 2 (fontified nil)) . 5524) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) (undo-tree-id139 . -2) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (undo-tree-id142 . -2) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (5526 . 5527) (#("o" 0 1 (fontified t)) . -5526) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) 5527 (5526 . 5527) (5523 . 5526) (t 26513 30832 860979 581000) 5523) nil (26513 30894 734668 8000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5526 . 5527) (#("
" 0 1 (fontified nil)) . -5597) (5524 . 5598)) nil (26513 30894 734628 796000) 0 nil])
([nil nil ((#("\\frac{1}{x}$ when $x\\to 0$" 0 5 (face font-lock-keyword-face fontified t) 5 7 (fontified t) 7 8 (fontified t) 8 10 (fontified t) 10 11 (fontified t) 11 18 (fontified t) 18 20 (fontified t) 20 23 (face font-lock-keyword-face fontified t) 23 25 (fontified t) 25 26 (fontified t)) . 5554) (undo-tree-id96 . -25) (undo-tree-id97 . -25) (undo-tree-id98 . -25) (undo-tree-id99 . -25) (undo-tree-id100 . -25) (undo-tree-id101 . -25) (undo-tree-id102 . -26) 5579) nil (26513 30894 734627 583000) 0 nil])
([nil nil ((5554 . 5555)) nil (26513 30894 734621 217000) 0 nil])
([nil nil ((5554 . 5555)) nil (26513 30894 734620 690000) 0 nil])
([nil nil ((5565 . 5566) (5564 . 5565) (5563 . 5564) (5562 . 5564) (5556 . 5562)) nil (26513 30894 734619 687000) 0 nil])
([nil nil ((5569 . 5572) (#("   " 0 3 (fontified nil)) . 5568) (undo-tree-id79 . -3) (undo-tree-id80 . -3) (undo-tree-id81 . -3) (undo-tree-id82 . -3) (undo-tree-id83 . -3) (undo-tree-id84 . -3) (undo-tree-id85 . -3) (undo-tree-id86 . -3) (undo-tree-id87 . -3) (undo-tree-id88 . -3) (undo-tree-id89 . -3) (undo-tree-id90 . -3) (undo-tree-id91 . -3) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3) (5571 . 5572) (5567 . 5571) 5565) nil (26513 30894 734618 8000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5575 . 5576) (#("
" 0 1 (fontified nil)) . -5597) (5572 . 5598) 5571) nil (26513 30901 188441 981000) 0 nil])
([nil nil ((5585 . 5587)) nil (26513 30919 550539 906000) 0 nil] [nil nil ((#(")" 0 1 (fontified t)) . 5580) (undo-tree-id156 . -1) (undo-tree-id157 . -1)) ((5580 . 5581)) (26513 30901 188249 948000) 0 nil] [nil nil ((#("f" 0 1 (fontified t)) . 5577) (undo-tree-id77 . -1) (undo-tree-id78 . -1)) ((5577 . 5578)) (26513 30894 734595 223000) 0 nil])
([nil nil ((5598 . 5601) (5597 . 5598) (#("|" 0 1 (fontified t)) . -5597) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (#("g" 0 1 (fontified t)) . -5598) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (#("e" 0 1 (fontified t)) . -5599) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) 5600 (5598 . 5600) (5597 . 5598) (5596 . 5597) (#("<" 0 1 (fontified t)) . 5596) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1)) nil (26513 30919 550531 81000) 0 nil])
nil
nil
([nil current ((#("   
" 0 3 (fontified t) 3 4 (fontified t)) . 5569) (undo-tree-id208 . -2) (undo-tree-id209 . -3) (undo-tree-id210 . -2) (undo-tree-id211 . -2) (undo-tree-id212 . -2) (undo-tree-id213 . -2) (undo-tree-id214 . -2) (undo-tree-id215 . -2) (undo-tree-id216 . -2) (undo-tree-id217 . -2) (undo-tree-id218 . -2) (undo-tree-id219 . -2) (undo-tree-id220 . -2) (undo-tree-id221 . -2) (undo-tree-id222 . -2) (undo-tree-id223 . -2) (undo-tree-id224 . -2) (undo-tree-id225 . -2) (undo-tree-id226 . -4) 5571 (t 26513 30919 580979 52000)) nil (26513 30923 795143 967000) 0 nil])
nil
